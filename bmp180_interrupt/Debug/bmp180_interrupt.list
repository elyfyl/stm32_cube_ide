
bmp180_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080082b8  080082b8  000182b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086ac  080086ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080086ac  080086ac  000186ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086b4  080086b4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080086bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  200001dc  08008898  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08008898  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de73  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002326  00000000  00000000  0002e07f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  000303a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  00030ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228f2  00000000  00000000  00031968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe56  00000000  00000000  0005425a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc5e8  00000000  00000000  000640b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc4  00000000  00000000  001306e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080082a0 	.word	0x080082a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080082a0 	.word	0x080082a0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <BMP180_Init+0x1c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200001f8 	.word	0x200001f8

08000f0c <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <BMP180_SetOversampling+0x1c>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	7013      	strb	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	20000212 	.word	0x20000212

08000f2c <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 8000f2c:	b598      	push	{r3, r4, r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8000f30:	23aa      	movs	r3, #170	; 0xaa
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f8be 	bl	80010b4 <BMP180_ReadReg>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	b21c      	sxth	r4, r3
 8000f3e:	23ab      	movs	r3, #171	; 0xab
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f8b7 	bl	80010b4 <BMP180_ReadReg>
 8000f46:	4603      	mov	r3, r0
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4323      	orrs	r3, r4
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	4b58      	ldr	r3, [pc, #352]	; (80010b0 <BMP180_UpdateCalibrationData+0x184>)
 8000f50:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8000f52:	23ac      	movs	r3, #172	; 0xac
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f8ad 	bl	80010b4 <BMP180_ReadReg>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	b21c      	sxth	r4, r3
 8000f60:	23ad      	movs	r3, #173	; 0xad
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f8a6 	bl	80010b4 <BMP180_ReadReg>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4323      	orrs	r3, r4
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	4b4f      	ldr	r3, [pc, #316]	; (80010b0 <BMP180_UpdateCalibrationData+0x184>)
 8000f72:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8000f74:	23ae      	movs	r3, #174	; 0xae
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f89c 	bl	80010b4 <BMP180_ReadReg>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b21c      	sxth	r4, r3
 8000f82:	23af      	movs	r3, #175	; 0xaf
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f895 	bl	80010b4 <BMP180_ReadReg>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4323      	orrs	r3, r4
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <BMP180_UpdateCalibrationData+0x184>)
 8000f94:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8000f96:	23b0      	movs	r3, #176	; 0xb0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f88b 	bl	80010b4 <BMP180_ReadReg>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21c      	sxth	r4, r3
 8000fa4:	23b1      	movs	r3, #177	; 0xb1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f884 	bl	80010b4 <BMP180_ReadReg>
 8000fac:	4603      	mov	r3, r0
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4323      	orrs	r3, r4
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <BMP180_UpdateCalibrationData+0x184>)
 8000fb8:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 8000fba:	23b2      	movs	r3, #178	; 0xb2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f879 	bl	80010b4 <BMP180_ReadReg>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21c      	sxth	r4, r3
 8000fc8:	23b3      	movs	r3, #179	; 0xb3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f872 	bl	80010b4 <BMP180_ReadReg>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4323      	orrs	r3, r4
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <BMP180_UpdateCalibrationData+0x184>)
 8000fdc:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 8000fde:	23b4      	movs	r3, #180	; 0xb4
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f867 	bl	80010b4 <BMP180_ReadReg>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21c      	sxth	r4, r3
 8000fec:	23b5      	movs	r3, #181	; 0xb5
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f860 	bl	80010b4 <BMP180_ReadReg>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4323      	orrs	r3, r4
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <BMP180_UpdateCalibrationData+0x184>)
 8001000:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8001002:	23b6      	movs	r3, #182	; 0xb6
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f855 	bl	80010b4 <BMP180_ReadReg>
 800100a:	4603      	mov	r3, r0
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	b21c      	sxth	r4, r3
 8001010:	23b7      	movs	r3, #183	; 0xb7
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f84e 	bl	80010b4 <BMP180_ReadReg>
 8001018:	4603      	mov	r3, r0
 800101a:	b21b      	sxth	r3, r3
 800101c:	4323      	orrs	r3, r4
 800101e:	b21a      	sxth	r2, r3
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <BMP180_UpdateCalibrationData+0x184>)
 8001022:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 8001024:	23b8      	movs	r3, #184	; 0xb8
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f844 	bl	80010b4 <BMP180_ReadReg>
 800102c:	4603      	mov	r3, r0
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21c      	sxth	r4, r3
 8001032:	23b9      	movs	r3, #185	; 0xb9
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f83d 	bl	80010b4 <BMP180_ReadReg>
 800103a:	4603      	mov	r3, r0
 800103c:	b21b      	sxth	r3, r3
 800103e:	4323      	orrs	r3, r4
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <BMP180_UpdateCalibrationData+0x184>)
 8001044:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 8001046:	23ba      	movs	r3, #186	; 0xba
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f833 	bl	80010b4 <BMP180_ReadReg>
 800104e:	4603      	mov	r3, r0
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21c      	sxth	r4, r3
 8001054:	23bb      	movs	r3, #187	; 0xbb
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f82c 	bl	80010b4 <BMP180_ReadReg>
 800105c:	4603      	mov	r3, r0
 800105e:	b21b      	sxth	r3, r3
 8001060:	4323      	orrs	r3, r4
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <BMP180_UpdateCalibrationData+0x184>)
 8001066:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8001068:	23bc      	movs	r3, #188	; 0xbc
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f822 	bl	80010b4 <BMP180_ReadReg>
 8001070:	4603      	mov	r3, r0
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21c      	sxth	r4, r3
 8001076:	23bd      	movs	r3, #189	; 0xbd
 8001078:	4618      	mov	r0, r3
 800107a:	f000 f81b 	bl	80010b4 <BMP180_ReadReg>
 800107e:	4603      	mov	r3, r0
 8001080:	b21b      	sxth	r3, r3
 8001082:	4323      	orrs	r3, r4
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <BMP180_UpdateCalibrationData+0x184>)
 8001088:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 800108a:	23be      	movs	r3, #190	; 0xbe
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f811 	bl	80010b4 <BMP180_ReadReg>
 8001092:	4603      	mov	r3, r0
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21c      	sxth	r4, r3
 8001098:	23bf      	movs	r3, #191	; 0xbf
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f80a 	bl	80010b4 <BMP180_ReadReg>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4323      	orrs	r3, r4
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	4b01      	ldr	r3, [pc, #4]	; (80010b0 <BMP180_UpdateCalibrationData+0x184>)
 80010aa:	829a      	strh	r2, [r3, #20]
}
 80010ac:	bf00      	nop
 80010ae:	bd98      	pop	{r3, r4, r7, pc}
 80010b0:	200001fc 	.word	0x200001fc

080010b4 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <BMP180_ReadReg+0x40>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	1dfa      	adds	r2, r7, #7
 80010c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	21ee      	movs	r1, #238	; 0xee
 80010ce:	f001 f829 	bl	8002124 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <BMP180_ReadReg+0x40>)
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	f107 020f 	add.w	r2, r7, #15
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	21ee      	movs	r1, #238	; 0xee
 80010e4:	f001 f91c 	bl	8002320 <HAL_I2C_Master_Receive>
	return result;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001f8 	.word	0x200001f8

080010f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <MX_GPIO_Init+0xd0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a2c      	ldr	r2, [pc, #176]	; (80011c8 <MX_GPIO_Init+0xd0>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <MX_GPIO_Init+0xd0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <MX_GPIO_Init+0xd0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <MX_GPIO_Init+0xd0>)
 8001134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <MX_GPIO_Init+0xd0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_GPIO_Init+0xd0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <MX_GPIO_Init+0xd0>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_GPIO_Init+0xd0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_GPIO_Init+0xd0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <MX_GPIO_Init+0xd0>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_GPIO_Init+0xd0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2120      	movs	r1, #32
 8001182:	4812      	ldr	r0, [pc, #72]	; (80011cc <MX_GPIO_Init+0xd4>)
 8001184:	f000 fe70 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800118e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	480c      	ldr	r0, [pc, #48]	; (80011d0 <MX_GPIO_Init+0xd8>)
 80011a0:	f000 fcce 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011a4:	2320      	movs	r3, #32
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4804      	ldr	r0, [pc, #16]	; (80011cc <MX_GPIO_Init+0xd4>)
 80011bc:	f000 fcc0 	bl	8001b40 <HAL_GPIO_Init>

}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	; 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020800 	.word	0x40020800

080011d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_I2C1_Init+0x50>)
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <MX_I2C1_Init+0x54>)
 80011dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_I2C1_Init+0x50>)
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <MX_I2C1_Init+0x58>)
 80011e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_I2C1_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_I2C1_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_I2C1_Init+0x50>)
 80011f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_I2C1_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_I2C1_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_I2C1_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_I2C1_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_I2C1_Init+0x50>)
 8001212:	f000 fe43 	bl	8001e9c <HAL_I2C_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800121c:	f000 f906 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000214 	.word	0x20000214
 8001228:	40005400 	.word	0x40005400
 800122c:	000186a0 	.word	0x000186a0

08001230 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_I2C_MspInit+0x94>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d134      	bne.n	80012bc <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_I2C_MspInit+0x98>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <HAL_I2C_MspInit+0x98>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_I2C_MspInit+0x98>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800126e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001274:	2312      	movs	r3, #18
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001280:	2304      	movs	r3, #4
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4810      	ldr	r0, [pc, #64]	; (80012cc <HAL_I2C_MspInit+0x9c>)
 800128c:	f000 fc58 	bl	8001b40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_I2C_MspInit+0x98>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <HAL_I2C_MspInit+0x98>)
 800129a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800129e:	6413      	str	r3, [r2, #64]	; 0x40
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_I2C_MspInit+0x98>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2100      	movs	r1, #0
 80012b0:	201f      	movs	r0, #31
 80012b2:	f000 fbde 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012b6:	201f      	movs	r0, #31
 80012b8:	f000 fbf7 	bl	8001aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	; 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40005400 	.word	0x40005400
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020400 	.word	0x40020400

080012d0 <HAL_I2C_MemRxCpltCallback>:
/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
 uint8_t data;
 void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
 {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	6078      	str	r0, [r7, #4]
	 if (hi2c->Instance == hi2c1.Instance)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_I2C_MemRxCpltCallback+0x30>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d109      	bne.n	80012f8 <HAL_I2C_MemRxCpltCallback+0x28>
	 {
		 HAL_I2C_Mem_Read_IT(&hi2c1, BMP180_I2C_ADDR << 1, 0xD0, 1, &data, 1);
 80012e4:	2301      	movs	r3, #1
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_I2C_MemRxCpltCallback+0x34>)
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2301      	movs	r3, #1
 80012ee:	22d0      	movs	r2, #208	; 0xd0
 80012f0:	21ee      	movs	r1, #238	; 0xee
 80012f2:	4803      	ldr	r0, [pc, #12]	; (8001300 <HAL_I2C_MemRxCpltCallback+0x30>)
 80012f4:	f001 fa3a 	bl	800276c <HAL_I2C_Mem_Read_IT>
	 }
 }
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000214 	.word	0x20000214
 8001304:	20000268 	.word	0x20000268

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130e:	f000 fa63 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001312:	f000 f81d 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001316:	f7ff feef 	bl	80010f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800131a:	f000 f9c1 	bl	80016a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800131e:	f7ff ff59 	bl	80011d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BMP180_Init(&hi2c1);
 8001322:	4809      	ldr	r0, [pc, #36]	; (8001348 <main+0x40>)
 8001324:	f7ff fde2 	bl	8000eec <BMP180_Init>
  BMP180_SetOversampling(BMP180_ULTRA);
 8001328:	2003      	movs	r0, #3
 800132a:	f7ff fdef 	bl	8000f0c <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 800132e:	f7ff fdfd 	bl	8000f2c <BMP180_UpdateCalibrationData>
  HAL_I2C_Mem_Read_IT(&hi2c1, BMP180_I2C_ADDR << 1, 0xD0, 1, &data, 1);
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <main+0x44>)
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	22d0      	movs	r2, #208	; 0xd0
 800133e:	21ee      	movs	r1, #238	; 0xee
 8001340:	4801      	ldr	r0, [pc, #4]	; (8001348 <main+0x40>)
 8001342:	f001 fa13 	bl	800276c <HAL_I2C_Mem_Read_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001346:	e7fe      	b.n	8001346 <main+0x3e>
 8001348:	20000214 	.word	0x20000214
 800134c:	20000268 	.word	0x20000268

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b094      	sub	sp, #80	; 0x50
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	2234      	movs	r2, #52	; 0x34
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f004 fa7e 	bl	8005860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <SystemClock_Config+0xd4>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a29      	ldr	r2, [pc, #164]	; (8001424 <SystemClock_Config+0xd4>)
 800137e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001382:	6413      	str	r3, [r2, #64]	; 0x40
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <SystemClock_Config+0xd4>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001390:	2300      	movs	r3, #0
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <SystemClock_Config+0xd8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800139c:	4a22      	ldr	r2, [pc, #136]	; (8001428 <SystemClock_Config+0xd8>)
 800139e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <SystemClock_Config+0xd8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b8:	2310      	movs	r3, #16
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013bc:	2302      	movs	r3, #2
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013c4:	2310      	movs	r3, #16
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013ce:	2304      	movs	r3, #4
 80013d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fcb4 	bl	8004d4c <HAL_RCC_OscConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013ea:	f000 f81f 	bl	800142c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ee:	230f      	movs	r3, #15
 80013f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f2:	2302      	movs	r3, #2
 80013f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	2102      	movs	r1, #2
 800140a:	4618      	mov	r0, r3
 800140c:	f003 f954 	bl	80046b8 <HAL_RCC_ClockConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001416:	f000 f809 	bl	800142c <Error_Handler>
  }
}
 800141a:	bf00      	nop
 800141c:	3750      	adds	r7, #80	; 0x50
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_MspInit+0x4c>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_MspInit+0x4c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_MspInit+0x4c>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_MspInit+0x4c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001476:	2007      	movs	r0, #7
 8001478:	f000 faf0 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800148c:	e7fe      	b.n	800148c <NMI_Handler+0x4>

0800148e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <MemManage_Handler+0x4>

0800149a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d4:	f000 f9d2 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <I2C1_EV_IRQHandler+0x10>)
 80014e2:	f001 fa01 	bl	80028e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000214 	.word	0x20000214

080014f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return 1;
 80014f4:	2301      	movs	r3, #1
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_kill>:

int _kill(int pid, int sig)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800150a:	f004 f97f 	bl	800580c <__errno>
 800150e:	4603      	mov	r3, r0
 8001510:	2216      	movs	r2, #22
 8001512:	601a      	str	r2, [r3, #0]
  return -1;
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <_exit>:

void _exit (int status)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ffe7 	bl	8001500 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001532:	e7fe      	b.n	8001532 <_exit+0x12>

08001534 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	e00a      	b.n	800155c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001546:	f3af 8000 	nop.w
 800154a:	4601      	mov	r1, r0
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	60ba      	str	r2, [r7, #8]
 8001552:	b2ca      	uxtb	r2, r1
 8001554:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	dbf0      	blt.n	8001546 <_read+0x12>
  }

  return len;
 8001564:	687b      	ldr	r3, [r7, #4]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e009      	b.n	8001594 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	60ba      	str	r2, [r7, #8]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbf1      	blt.n	8001580 <_write+0x12>
  }
  return len;
 800159c:	687b      	ldr	r3, [r7, #4]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_close>:

int _close(int file)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ce:	605a      	str	r2, [r3, #4]
  return 0;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <_isatty>:

int _isatty(int file)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001618:	4a14      	ldr	r2, [pc, #80]	; (800166c <_sbrk+0x5c>)
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <_sbrk+0x60>)
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <_sbrk+0x64>)
 800162e:	4a12      	ldr	r2, [pc, #72]	; (8001678 <_sbrk+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	d207      	bcs.n	8001650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001640:	f004 f8e4 	bl	800580c <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	220c      	movs	r2, #12
 8001648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e009      	b.n	8001664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <_sbrk+0x64>)
 8001660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20020000 	.word	0x20020000
 8001670:	00000400 	.word	0x00000400
 8001674:	2000026c 	.word	0x2000026c
 8001678:	200002c8 	.word	0x200002c8

0800167c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <SystemInit+0x20>)
 8001682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <SystemInit+0x20>)
 8001688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800168c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_USART2_UART_Init+0x4c>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <MX_USART2_UART_Init+0x50>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_USART2_UART_Init+0x4c>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_USART2_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_USART2_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_USART2_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_USART2_UART_Init+0x4c>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_USART2_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_USART2_UART_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_USART2_UART_Init+0x4c>)
 80016d8:	f003 fdd6 	bl	8005288 <HAL_UART_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016e2:	f7ff fea3 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000270 	.word	0x20000270
 80016f0:	40004400 	.word	0x40004400

080016f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a19      	ldr	r2, [pc, #100]	; (8001778 <HAL_UART_MspInit+0x84>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12b      	bne.n	800176e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_UART_MspInit+0x88>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <HAL_UART_MspInit+0x88>)
 8001720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_UART_MspInit+0x88>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_UART_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_UART_MspInit+0x88>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_UART_MspInit+0x88>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800174e:	230c      	movs	r3, #12
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800175e:	2307      	movs	r3, #7
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <HAL_UART_MspInit+0x8c>)
 800176a:	f000 f9e9 	bl	8001b40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40004400 	.word	0x40004400
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000

08001784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800178a:	490e      	ldr	r1, [pc, #56]	; (80017c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800178c:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017a0:	4c0b      	ldr	r4, [pc, #44]	; (80017d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ae:	f7ff ff65 	bl	800167c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b2:	f004 f831 	bl	8005818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b6:	f7ff fda7 	bl	8001308 <main>
  bx  lr    
 80017ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80017c8:	080086bc 	.word	0x080086bc
  ldr r2, =_sbss
 80017cc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80017d0:	200002c8 	.word	0x200002c8

080017d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_Init+0x40>)
 80017e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_Init+0x40>)
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_Init+0x40>)
 80017fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 f92b 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f808 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff fe14 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x54>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_InitTick+0x58>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f943 	bl	8001ac6 <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f000 f90b 	bl	8001a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_InitTick+0x5c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000000 	.word	0x20000000
 8001874:	20000008 	.word	0x20000008
 8001878:	20000004 	.word	0x20000004

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000008 	.word	0x20000008
 80018a0:	200002b4 	.word	0x200002b4

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200002b4 	.word	0x200002b4

080018bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d8:	4013      	ands	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ee:	4a04      	ldr	r2, [pc, #16]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	60d3      	str	r3, [r2, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <__NVIC_GetPriorityGrouping+0x18>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f003 0307 	and.w	r3, r3, #7
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db0b      	blt.n	800194a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <__NVIC_EnableIRQ+0x38>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a28:	d301      	bcc.n	8001a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <SysTick_Config+0x40>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a36:	210f      	movs	r1, #15
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f7ff ff8e 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SysTick_Config+0x40>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SysTick_Config+0x40>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff29 	bl	80018bc <__NVIC_SetPriorityGrouping>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a84:	f7ff ff3e 	bl	8001904 <__NVIC_GetPriorityGrouping>
 8001a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff ff8e 	bl	80019b0 <NVIC_EncodePriority>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff5d 	bl	800195c <__NVIC_SetPriority>
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff31 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffa2 	bl	8001a18 <SysTick_Config>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d004      	beq.n	8001afc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e00c      	b.n	8001b16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2205      	movs	r2, #5
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0201 	bic.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b30:	b2db      	uxtb	r3, r3
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	e165      	b.n	8001e28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f040 8154 	bne.w	8001e22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d005      	beq.n	8001b92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d130      	bne.n	8001bf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 0201 	and.w	r2, r3, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d017      	beq.n	8001c30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d123      	bne.n	8001c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	08da      	lsrs	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3208      	adds	r2, #8
 8001c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	08da      	lsrs	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3208      	adds	r2, #8
 8001c7e:	69b9      	ldr	r1, [r7, #24]
 8001c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80ae 	beq.w	8001e22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a5c      	ldr	r2, [pc, #368]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b5a      	ldr	r3, [pc, #360]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce2:	4a58      	ldr	r2, [pc, #352]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a4f      	ldr	r2, [pc, #316]	; (8001e48 <HAL_GPIO_Init+0x308>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d025      	beq.n	8001d5a <HAL_GPIO_Init+0x21a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a4e      	ldr	r2, [pc, #312]	; (8001e4c <HAL_GPIO_Init+0x30c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01f      	beq.n	8001d56 <HAL_GPIO_Init+0x216>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4d      	ldr	r2, [pc, #308]	; (8001e50 <HAL_GPIO_Init+0x310>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4c      	ldr	r2, [pc, #304]	; (8001e54 <HAL_GPIO_Init+0x314>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x20e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4b      	ldr	r2, [pc, #300]	; (8001e58 <HAL_GPIO_Init+0x318>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_Init+0x20a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4a      	ldr	r2, [pc, #296]	; (8001e5c <HAL_GPIO_Init+0x31c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_Init+0x206>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a49      	ldr	r2, [pc, #292]	; (8001e60 <HAL_GPIO_Init+0x320>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_Init+0x202>
 8001d3e:	2306      	movs	r3, #6
 8001d40:	e00c      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d42:	2307      	movs	r3, #7
 8001d44:	e00a      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d46:	2305      	movs	r3, #5
 8001d48:	e008      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x21c>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	f002 0203 	and.w	r2, r2, #3
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4093      	lsls	r3, r2
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d6c:	4935      	ldr	r1, [pc, #212]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9e:	4a31      	ldr	r2, [pc, #196]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da4:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc8:	4a26      	ldr	r2, [pc, #152]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e1c:	4a11      	ldr	r2, [pc, #68]	; (8001e64 <HAL_GPIO_Init+0x324>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3301      	adds	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	2b0f      	cmp	r3, #15
 8001e2c:	f67f ae96 	bls.w	8001b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40013800 	.word	0x40013800
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	40020800 	.word	0x40020800
 8001e54:	40020c00 	.word	0x40020c00
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40021400 	.word	0x40021400
 8001e60:	40021800 	.word	0x40021800
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	619a      	str	r2, [r3, #24]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e12b      	b.n	8002106 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff f9b4 	bl	8001230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2224      	movs	r2, #36	; 0x24
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001efe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f00:	f002 fccc 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 8001f04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4a81      	ldr	r2, [pc, #516]	; (8002110 <HAL_I2C_Init+0x274>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d807      	bhi.n	8001f20 <HAL_I2C_Init+0x84>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4a80      	ldr	r2, [pc, #512]	; (8002114 <HAL_I2C_Init+0x278>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	bf94      	ite	ls
 8001f18:	2301      	movls	r3, #1
 8001f1a:	2300      	movhi	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	e006      	b.n	8001f2e <HAL_I2C_Init+0x92>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a7d      	ldr	r2, [pc, #500]	; (8002118 <HAL_I2C_Init+0x27c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	bf94      	ite	ls
 8001f28:	2301      	movls	r3, #1
 8001f2a:	2300      	movhi	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0e7      	b.n	8002106 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4a78      	ldr	r2, [pc, #480]	; (800211c <HAL_I2C_Init+0x280>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0c9b      	lsrs	r3, r3, #18
 8001f40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a6a      	ldr	r2, [pc, #424]	; (8002110 <HAL_I2C_Init+0x274>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d802      	bhi.n	8001f70 <HAL_I2C_Init+0xd4>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	e009      	b.n	8001f84 <HAL_I2C_Init+0xe8>
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	4a69      	ldr	r2, [pc, #420]	; (8002120 <HAL_I2C_Init+0x284>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	099b      	lsrs	r3, r3, #6
 8001f82:	3301      	adds	r3, #1
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	495c      	ldr	r1, [pc, #368]	; (8002110 <HAL_I2C_Init+0x274>)
 8001fa0:	428b      	cmp	r3, r1
 8001fa2:	d819      	bhi.n	8001fd8 <HAL_I2C_Init+0x13c>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1e59      	subs	r1, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb2:	1c59      	adds	r1, r3, #1
 8001fb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fb8:	400b      	ands	r3, r1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_I2C_Init+0x138>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1e59      	subs	r1, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fcc:	3301      	adds	r3, #1
 8001fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd2:	e051      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	e04f      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d111      	bne.n	8002004 <HAL_I2C_Init+0x168>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1e58      	subs	r0, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	440b      	add	r3, r1
 8001fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	e012      	b.n	800202a <HAL_I2C_Init+0x18e>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e58      	subs	r0, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	0099      	lsls	r1, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	fbb0 f3f3 	udiv	r3, r0, r3
 800201a:	3301      	adds	r3, #1
 800201c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_Init+0x196>
 800202e:	2301      	movs	r3, #1
 8002030:	e022      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10e      	bne.n	8002058 <HAL_I2C_Init+0x1bc>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1e58      	subs	r0, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6859      	ldr	r1, [r3, #4]
 8002042:	460b      	mov	r3, r1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	440b      	add	r3, r1
 8002048:	fbb0 f3f3 	udiv	r3, r0, r3
 800204c:	3301      	adds	r3, #1
 800204e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002056:	e00f      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1e58      	subs	r0, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	0099      	lsls	r1, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	fbb0 f3f3 	udiv	r3, r0, r3
 800206e:	3301      	adds	r3, #1
 8002070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	6809      	ldr	r1, [r1, #0]
 800207c:	4313      	orrs	r3, r2
 800207e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69da      	ldr	r2, [r3, #28]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6911      	ldr	r1, [r2, #16]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68d2      	ldr	r2, [r2, #12]
 80020b2:	4311      	orrs	r1, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2220      	movs	r2, #32
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	000186a0 	.word	0x000186a0
 8002114:	001e847f 	.word	0x001e847f
 8002118:	003d08ff 	.word	0x003d08ff
 800211c:	431bde83 	.word	0x431bde83
 8002120:	10624dd3 	.word	0x10624dd3

08002124 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af02      	add	r7, sp, #8
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	461a      	mov	r2, r3
 8002130:	460b      	mov	r3, r1
 8002132:	817b      	strh	r3, [r7, #10]
 8002134:	4613      	mov	r3, r2
 8002136:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff fbb4 	bl	80018a4 <HAL_GetTick>
 800213c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b20      	cmp	r3, #32
 8002148:	f040 80e0 	bne.w	800230c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2319      	movs	r3, #25
 8002152:	2201      	movs	r2, #1
 8002154:	4970      	ldr	r1, [pc, #448]	; (8002318 <HAL_I2C_Master_Transmit+0x1f4>)
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f002 f884 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002162:	2302      	movs	r3, #2
 8002164:	e0d3      	b.n	800230e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_I2C_Master_Transmit+0x50>
 8002170:	2302      	movs	r3, #2
 8002172:	e0cc      	b.n	800230e <HAL_I2C_Master_Transmit+0x1ea>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d007      	beq.n	800219a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0201 	orr.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2221      	movs	r2, #33	; 0x21
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2210      	movs	r2, #16
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	893a      	ldrh	r2, [r7, #8]
 80021ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4a50      	ldr	r2, [pc, #320]	; (800231c <HAL_I2C_Master_Transmit+0x1f8>)
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021dc:	8979      	ldrh	r1, [r7, #10]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	6a3a      	ldr	r2, [r7, #32]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f001 fe46 	bl	8003e74 <I2C_MasterRequestWrite>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e08d      	b.n	800230e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002208:	e066      	b.n	80022d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	6a39      	ldr	r1, [r7, #32]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f002 f8fe 	bl	8004410 <I2C_WaitOnTXEFlagUntilTimeout>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00d      	beq.n	8002236 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	2b04      	cmp	r3, #4
 8002220:	d107      	bne.n	8002232 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002230:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e06b      	b.n	800230e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	781a      	ldrb	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b04      	cmp	r3, #4
 8002272:	d11b      	bne.n	80022ac <HAL_I2C_Master_Transmit+0x188>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	2b00      	cmp	r3, #0
 800227a:	d017      	beq.n	80022ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	6a39      	ldr	r1, [r7, #32]
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f002 f8ee 	bl	8004492 <I2C_WaitOnBTFFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00d      	beq.n	80022d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d107      	bne.n	80022d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e01a      	b.n	800230e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d194      	bne.n	800220a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	e000      	b.n	800230e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800230c:	2302      	movs	r3, #2
  }
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	00100002 	.word	0x00100002
 800231c:	ffff0000 	.word	0xffff0000

08002320 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08c      	sub	sp, #48	; 0x30
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	461a      	mov	r2, r3
 800232c:	460b      	mov	r3, r1
 800232e:	817b      	strh	r3, [r7, #10]
 8002330:	4613      	mov	r3, r2
 8002332:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002334:	f7ff fab6 	bl	80018a4 <HAL_GetTick>
 8002338:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b20      	cmp	r3, #32
 8002344:	f040 820b 	bne.w	800275e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2319      	movs	r3, #25
 800234e:	2201      	movs	r2, #1
 8002350:	497c      	ldr	r1, [pc, #496]	; (8002544 <HAL_I2C_Master_Receive+0x224>)
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f001 ff86 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800235e:	2302      	movs	r3, #2
 8002360:	e1fe      	b.n	8002760 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_I2C_Master_Receive+0x50>
 800236c:	2302      	movs	r3, #2
 800236e:	e1f7      	b.n	8002760 <HAL_I2C_Master_Receive+0x440>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b01      	cmp	r3, #1
 8002384:	d007      	beq.n	8002396 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0201 	orr.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2222      	movs	r2, #34	; 0x22
 80023aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2210      	movs	r2, #16
 80023b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	893a      	ldrh	r2, [r7, #8]
 80023c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4a5c      	ldr	r2, [pc, #368]	; (8002548 <HAL_I2C_Master_Receive+0x228>)
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023d8:	8979      	ldrh	r1, [r7, #10]
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f001 fdca 	bl	8003f78 <I2C_MasterRequestRead>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e1b8      	b.n	8002760 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d113      	bne.n	800241e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	623b      	str	r3, [r7, #32]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	623b      	str	r3, [r7, #32]
 800240a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e18c      	b.n	8002738 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002422:	2b01      	cmp	r3, #1
 8002424:	d11b      	bne.n	800245e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002434:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	e16c      	b.n	8002738 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002462:	2b02      	cmp	r3, #2
 8002464:	d11b      	bne.n	800249e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002474:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002484:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	e14c      	b.n	8002738 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024c4:	e138      	b.n	8002738 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	f200 80f1 	bhi.w	80026b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d123      	bne.n	8002520 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f002 f84b 	bl	8004578 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e139      	b.n	8002760 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800251e:	e10b      	b.n	8002738 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002524:	2b02      	cmp	r3, #2
 8002526:	d14e      	bne.n	80025c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	2200      	movs	r2, #0
 8002530:	4906      	ldr	r1, [pc, #24]	; (800254c <HAL_I2C_Master_Receive+0x22c>)
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f001 fe96 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e10e      	b.n	8002760 <HAL_I2C_Master_Receive+0x440>
 8002542:	bf00      	nop
 8002544:	00100002 	.word	0x00100002
 8002548:	ffff0000 	.word	0xffff0000
 800254c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025c4:	e0b8      	b.n	8002738 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	2200      	movs	r2, #0
 80025ce:	4966      	ldr	r1, [pc, #408]	; (8002768 <HAL_I2C_Master_Receive+0x448>)
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f001 fe47 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0bf      	b.n	8002760 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002628:	2200      	movs	r2, #0
 800262a:	494f      	ldr	r1, [pc, #316]	; (8002768 <HAL_I2C_Master_Receive+0x448>)
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f001 fe19 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e091      	b.n	8002760 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026b0:	e042      	b.n	8002738 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f001 ff5e 	bl	8004578 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e04c      	b.n	8002760 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b04      	cmp	r3, #4
 8002704:	d118      	bne.n	8002738 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	f47f aec2 	bne.w	80024c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
  }
}
 8002760:	4618      	mov	r0, r3
 8002762:	3728      	adds	r7, #40	; 0x28
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	00010004 	.word	0x00010004

0800276c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	4608      	mov	r0, r1
 8002776:	4611      	mov	r1, r2
 8002778:	461a      	mov	r2, r3
 800277a:	4603      	mov	r3, r0
 800277c:	817b      	strh	r3, [r7, #10]
 800277e:	460b      	mov	r3, r1
 8002780:	813b      	strh	r3, [r7, #8]
 8002782:	4613      	mov	r3, r2
 8002784:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b20      	cmp	r3, #32
 8002794:	f040 809a 	bne.w	80028cc <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002798:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_I2C_Mem_Read_IT+0x170>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	08db      	lsrs	r3, r3, #3
 800279e:	4a50      	ldr	r2, [pc, #320]	; (80028e0 <HAL_I2C_Mem_Read_IT+0x174>)
 80027a0:	fba2 2303 	umull	r2, r3, r2, r3
 80027a4:	0a1a      	lsrs	r2, r3, #8
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	009a      	lsls	r2, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f043 0220 	orr.w	r2, r3, #32
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e070      	b.n	80028ce <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d0db      	beq.n	80027b2 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_I2C_Mem_Read_IT+0x9c>
 8002804:	2302      	movs	r3, #2
 8002806:	e062      	b.n	80028ce <HAL_I2C_Mem_Read_IT+0x162>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d007      	beq.n	800282e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0201 	orr.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2222      	movs	r2, #34	; 0x22
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2240      	movs	r2, #64	; 0x40
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a3a      	ldr	r2, [r7, #32]
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800285e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <HAL_I2C_Mem_Read_IT+0x178>)
 800286e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002870:	897a      	ldrh	r2, [r7, #10]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002876:	893a      	ldrh	r2, [r7, #8]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002896:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80028c6:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000000 	.word	0x20000000
 80028e0:	14f8b589 	.word	0x14f8b589
 80028e4:	ffff0000 	.word	0xffff0000

080028e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002908:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b10      	cmp	r3, #16
 8002916:	d003      	beq.n	8002920 <HAL_I2C_EV_IRQHandler+0x38>
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b40      	cmp	r3, #64	; 0x40
 800291c:	f040 80c1 	bne.w	8002aa2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10d      	bne.n	8002956 <HAL_I2C_EV_IRQHandler+0x6e>
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002940:	d003      	beq.n	800294a <HAL_I2C_EV_IRQHandler+0x62>
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002948:	d101      	bne.n	800294e <HAL_I2C_EV_IRQHandler+0x66>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_I2C_EV_IRQHandler+0x68>
 800294e:	2300      	movs	r3, #0
 8002950:	2b01      	cmp	r3, #1
 8002952:	f000 8132 	beq.w	8002bba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00c      	beq.n	800297a <HAL_I2C_EV_IRQHandler+0x92>
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	0a5b      	lsrs	r3, r3, #9
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f001 fe88 	bl	8004682 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fcd2 	bl	800331c <I2C_Master_SB>
 8002978:	e092      	b.n	8002aa0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	08db      	lsrs	r3, r3, #3
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <HAL_I2C_EV_IRQHandler+0xb2>
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	0a5b      	lsrs	r3, r3, #9
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fd48 	bl	8003428 <I2C_Master_ADD10>
 8002998:	e082      	b.n	8002aa0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_I2C_EV_IRQHandler+0xd2>
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	0a5b      	lsrs	r3, r3, #9
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fd62 	bl	800347c <I2C_Master_ADDR>
 80029b8:	e072      	b.n	8002aa0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	089b      	lsrs	r3, r3, #2
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d03b      	beq.n	8002a3e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d4:	f000 80f3 	beq.w	8002bbe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	09db      	lsrs	r3, r3, #7
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00f      	beq.n	8002a04 <HAL_I2C_EV_IRQHandler+0x11c>
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	0a9b      	lsrs	r3, r3, #10
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d009      	beq.n	8002a04 <HAL_I2C_EV_IRQHandler+0x11c>
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d103      	bne.n	8002a04 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f942 	bl	8002c86 <I2C_MasterTransmit_TXE>
 8002a02:	e04d      	b.n	8002aa0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80d6 	beq.w	8002bbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	0a5b      	lsrs	r3, r3, #9
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 80cf 	beq.w	8002bbe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a20:	7bbb      	ldrb	r3, [r7, #14]
 8002a22:	2b21      	cmp	r3, #33	; 0x21
 8002a24:	d103      	bne.n	8002a2e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f9c9 	bl	8002dbe <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a2c:	e0c7      	b.n	8002bbe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	f040 80c4 	bne.w	8002bbe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fa37 	bl	8002eaa <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a3c:	e0bf      	b.n	8002bbe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a4c:	f000 80b7 	beq.w	8002bbe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	099b      	lsrs	r3, r3, #6
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00f      	beq.n	8002a7c <HAL_I2C_EV_IRQHandler+0x194>
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	0a9b      	lsrs	r3, r3, #10
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d009      	beq.n	8002a7c <HAL_I2C_EV_IRQHandler+0x194>
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d103      	bne.n	8002a7c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 faac 	bl	8002fd2 <I2C_MasterReceive_RXNE>
 8002a7a:	e011      	b.n	8002aa0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 809a 	beq.w	8002bbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	0a5b      	lsrs	r3, r3, #9
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8093 	beq.w	8002bbe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fb55 	bl	8003148 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a9e:	e08e      	b.n	8002bbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8002aa0:	e08d      	b.n	8002bbe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d004      	beq.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e007      	b.n	8002ac4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <HAL_I2C_EV_IRQHandler+0x20e>
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	0a5b      	lsrs	r3, r3, #9
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00c      	beq.n	8002af6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002aec:	69b9      	ldr	r1, [r7, #24]
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 ff13 	bl	800391a <I2C_Slave_ADDR>
 8002af4:	e066      	b.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <HAL_I2C_EV_IRQHandler+0x22e>
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	0a5b      	lsrs	r3, r3, #9
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 ff4e 	bl	80039b0 <I2C_Slave_STOPF>
 8002b14:	e056      	b.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b16:	7bbb      	ldrb	r3, [r7, #14]
 8002b18:	2b21      	cmp	r3, #33	; 0x21
 8002b1a:	d002      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0x23a>
 8002b1c:	7bbb      	ldrb	r3, [r7, #14]
 8002b1e:	2b29      	cmp	r3, #41	; 0x29
 8002b20:	d125      	bne.n	8002b6e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	09db      	lsrs	r3, r3, #7
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00f      	beq.n	8002b4e <HAL_I2C_EV_IRQHandler+0x266>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	0a9b      	lsrs	r3, r3, #10
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_I2C_EV_IRQHandler+0x266>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fe29 	bl	800379e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b4c:	e039      	b.n	8002bc2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d033      	beq.n	8002bc2 <HAL_I2C_EV_IRQHandler+0x2da>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	0a5b      	lsrs	r3, r3, #9
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d02d      	beq.n	8002bc2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fe56 	bl	8003818 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b6c:	e029      	b.n	8002bc2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00f      	beq.n	8002b9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	0a9b      	lsrs	r3, r3, #10
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d103      	bne.n	8002b9a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fe61 	bl	800385a <I2C_SlaveReceive_RXNE>
 8002b98:	e014      	b.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00e      	beq.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	0a5b      	lsrs	r3, r3, #9
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fe8f 	bl	80038d6 <I2C_SlaveReceive_BTF>
 8002bb8:	e004      	b.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002bba:	bf00      	nop
 8002bbc:	e002      	b.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bbe:	bf00      	nop
 8002bc0:	e000      	b.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bc2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	70fb      	strb	r3, [r7, #3]
 8002c26:	4613      	mov	r3, r2
 8002c28:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c9c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d150      	bne.n	8002d4e <I2C_MasterTransmit_TXE+0xc8>
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b21      	cmp	r3, #33	; 0x21
 8002cb0:	d14d      	bne.n	8002d4e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d01d      	beq.n	8002cf4 <I2C_MasterTransmit_TXE+0x6e>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d01a      	beq.n	8002cf4 <I2C_MasterTransmit_TXE+0x6e>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cc4:	d016      	beq.n	8002cf4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cd4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2211      	movs	r2, #17
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ff6c 	bl	8002bca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cf2:	e060      	b.n	8002db6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d02:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d107      	bne.n	8002d3e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ff87 	bl	8002c4a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d3c:	e03b      	b.n	8002db6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff ff3f 	bl	8002bca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d4c:	e033      	b.n	8002db6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	2b21      	cmp	r3, #33	; 0x21
 8002d52:	d005      	beq.n	8002d60 <I2C_MasterTransmit_TXE+0xda>
 8002d54:	7bbb      	ldrb	r3, [r7, #14]
 8002d56:	2b40      	cmp	r3, #64	; 0x40
 8002d58:	d12d      	bne.n	8002db6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	2b22      	cmp	r3, #34	; 0x22
 8002d5e:	d12a      	bne.n	8002db6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d108      	bne.n	8002d7c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d78:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002d7a:	e01c      	b.n	8002db6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b40      	cmp	r3, #64	; 0x40
 8002d86:	d103      	bne.n	8002d90 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f88e 	bl	8002eaa <I2C_MemoryTransmit_TXE_BTF>
}
 8002d8e:	e012      	b.n	8002db6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002db4:	e7ff      	b.n	8002db6 <I2C_MasterTransmit_TXE+0x130>
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b21      	cmp	r3, #33	; 0x21
 8002dd6:	d164      	bne.n	8002ea2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d012      	beq.n	8002e08 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	781a      	ldrb	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002e06:	e04c      	b.n	8002ea2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d01d      	beq.n	8002e4a <I2C_MasterTransmit_BTF+0x8c>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d01a      	beq.n	8002e4a <I2C_MasterTransmit_BTF+0x8c>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e1a:	d016      	beq.n	8002e4a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e2a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2211      	movs	r2, #17
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff fec1 	bl	8002bca <HAL_I2C_MasterTxCpltCallback>
}
 8002e48:	e02b      	b.n	8002ea2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e58:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e68:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b40      	cmp	r3, #64	; 0x40
 8002e82:	d107      	bne.n	8002e94 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff fedc 	bl	8002c4a <HAL_I2C_MemTxCpltCallback>
}
 8002e92:	e006      	b.n	8002ea2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff fe94 	bl	8002bca <HAL_I2C_MasterTxCpltCallback>
}
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d11d      	bne.n	8002efe <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d10b      	bne.n	8002ee2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eda:	1c9a      	adds	r2, r3, #2
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002ee0:	e073      	b.n	8002fca <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	121b      	asrs	r3, r3, #8
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002efc:	e065      	b.n	8002fca <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d10b      	bne.n	8002f1e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f1c:	e055      	b.n	8002fca <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d151      	bne.n	8002fca <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b22      	cmp	r3, #34	; 0x22
 8002f2a:	d10d      	bne.n	8002f48 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f46:	e040      	b.n	8002fca <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d015      	beq.n	8002f7e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	2b21      	cmp	r3, #33	; 0x21
 8002f56:	d112      	bne.n	8002f7e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f7c:	e025      	b.n	8002fca <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d120      	bne.n	8002fca <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	2b21      	cmp	r3, #33	; 0x21
 8002f8c:	d11d      	bne.n	8002fca <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f9c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fac:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff fe40 	bl	8002c4a <HAL_I2C_MemTxCpltCallback>
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b22      	cmp	r3, #34	; 0x22
 8002fe4:	f040 80ac 	bne.w	8003140 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d921      	bls.n	800303a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b03      	cmp	r3, #3
 8003024:	f040 808c 	bne.w	8003140 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003036:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003038:	e082      	b.n	8003140 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	2b02      	cmp	r3, #2
 8003040:	d075      	beq.n	800312e <I2C_MasterReceive_RXNE+0x15c>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d002      	beq.n	800304e <I2C_MasterReceive_RXNE+0x7c>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d16f      	bne.n	800312e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f001 fa60 	bl	8004514 <I2C_WaitOnSTOPRequestThroughIT>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d142      	bne.n	80030e0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003068:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003078:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d10a      	bne.n	80030ca <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe f904 	bl	80012d0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030c8:	e03a      	b.n	8003140 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2212      	movs	r2, #18
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff fd80 	bl	8002bde <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030de:	e02f      	b.n	8003140 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030ee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fd99 	bl	8002c5e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800312c:	e008      	b.n	8003140 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313c:	605a      	str	r2, [r3, #4]
}
 800313e:	e7ff      	b.n	8003140 <I2C_MasterReceive_RXNE+0x16e>
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b04      	cmp	r3, #4
 800315e:	d11b      	bne.n	8003198 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003196:	e0bd      	b.n	8003314 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d129      	bne.n	80031f6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d00a      	beq.n	80031ce <I2C_MasterReceive_BTF+0x86>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d007      	beq.n	80031ce <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031f4:	e08e      	b.n	8003314 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d176      	bne.n	80032ee <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d002      	beq.n	800320c <I2C_MasterReceive_BTF+0xc4>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b10      	cmp	r3, #16
 800320a:	d108      	bne.n	800321e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e019      	b.n	8003252 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d002      	beq.n	800322a <I2C_MasterReceive_BTF+0xe2>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d108      	bne.n	800323c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e00a      	b.n	8003252 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b10      	cmp	r3, #16
 8003240:	d007      	beq.n	8003252 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003250:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	d10a      	bne.n	80032d8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7fd fffd 	bl	80012d0 <HAL_I2C_MemRxCpltCallback>
}
 80032d6:	e01d      	b.n	8003314 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2212      	movs	r2, #18
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff fc79 	bl	8002bde <HAL_I2C_MasterRxCpltCallback>
}
 80032ec:	e012      	b.n	8003314 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b40      	cmp	r3, #64	; 0x40
 800332e:	d117      	bne.n	8003360 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	b2db      	uxtb	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003348:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800334a:	e067      	b.n	800341c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	b2da      	uxtb	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	611a      	str	r2, [r3, #16]
}
 800335e:	e05d      	b.n	800341c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003368:	d133      	bne.n	80033d2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b21      	cmp	r3, #33	; 0x21
 8003374:	d109      	bne.n	800338a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003386:	611a      	str	r2, [r3, #16]
 8003388:	e008      	b.n	800339c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	b2da      	uxtb	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d004      	beq.n	80033ae <I2C_Master_SB+0x92>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d108      	bne.n	80033c0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d032      	beq.n	800341c <I2C_Master_SB+0x100>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d02d      	beq.n	800341c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ce:	605a      	str	r2, [r3, #4]
}
 80033d0:	e024      	b.n	800341c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10e      	bne.n	80033f8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	b29b      	uxth	r3, r3
 80033e0:	11db      	asrs	r3, r3, #7
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	f003 0306 	and.w	r3, r3, #6
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f063 030f 	orn	r3, r3, #15
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	611a      	str	r2, [r3, #16]
}
 80033f6:	e011      	b.n	800341c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d10d      	bne.n	800341c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003404:	b29b      	uxth	r3, r3
 8003406:	11db      	asrs	r3, r3, #7
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f003 0306 	and.w	r3, r3, #6
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f063 030e 	orn	r3, r3, #14
 8003414:	b2da      	uxtb	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	611a      	str	r2, [r3, #16]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	b2da      	uxtb	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <I2C_Master_ADD10+0x26>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d108      	bne.n	8003460 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00c      	beq.n	8003470 <I2C_Master_ADD10+0x48>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d007      	beq.n	8003470 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800346e:	605a      	str	r2, [r3, #4]
  }
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800347c:	b480      	push	{r7}
 800347e:	b091      	sub	sp, #68	; 0x44
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800348a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b22      	cmp	r3, #34	; 0x22
 80034a4:	f040 8169 	bne.w	800377a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10f      	bne.n	80034d0 <I2C_Master_ADDR+0x54>
 80034b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	d10b      	bne.n	80034d0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b8:	2300      	movs	r3, #0
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	633b      	str	r3, [r7, #48]	; 0x30
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	e160      	b.n	8003792 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d11d      	bne.n	8003514 <I2C_Master_ADDR+0x98>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034e0:	d118      	bne.n	8003514 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e2:	2300      	movs	r3, #0
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003506:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	651a      	str	r2, [r3, #80]	; 0x50
 8003512:	e13e      	b.n	8003792 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d113      	bne.n	8003546 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351e:	2300      	movs	r3, #0
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e115      	b.n	8003772 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	f040 808a 	bne.w	8003666 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003558:	d137      	bne.n	80035ca <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003568:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003578:	d113      	bne.n	80035a2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003588:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	e0e7      	b.n	8003772 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	623b      	str	r3, [r7, #32]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	623b      	str	r3, [r7, #32]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	623b      	str	r3, [r7, #32]
 80035b6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e0d3      	b.n	8003772 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80035ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d02e      	beq.n	800362e <I2C_Master_ADDR+0x1b2>
 80035d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d02b      	beq.n	800362e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d8:	2b12      	cmp	r3, #18
 80035da:	d102      	bne.n	80035e2 <I2C_Master_ADDR+0x166>
 80035dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d125      	bne.n	800362e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d00e      	beq.n	8003606 <I2C_Master_ADDR+0x18a>
 80035e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d00b      	beq.n	8003606 <I2C_Master_ADDR+0x18a>
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f0:	2b10      	cmp	r3, #16
 80035f2:	d008      	beq.n	8003606 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e007      	b.n	8003616 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003614:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	e0a1      	b.n	8003772 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363e:	2300      	movs	r3, #0
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	e085      	b.n	8003772 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d14d      	bne.n	800370c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003672:	2b04      	cmp	r3, #4
 8003674:	d016      	beq.n	80036a4 <I2C_Master_ADDR+0x228>
 8003676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003678:	2b02      	cmp	r3, #2
 800367a:	d013      	beq.n	80036a4 <I2C_Master_ADDR+0x228>
 800367c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367e:	2b10      	cmp	r3, #16
 8003680:	d010      	beq.n	80036a4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003690:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e007      	b.n	80036b4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036b2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c2:	d117      	bne.n	80036f4 <I2C_Master_ADDR+0x278>
 80036c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036ca:	d00b      	beq.n	80036e4 <I2C_Master_ADDR+0x268>
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d008      	beq.n	80036e4 <I2C_Master_ADDR+0x268>
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d005      	beq.n	80036e4 <I2C_Master_ADDR+0x268>
 80036d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036da:	2b10      	cmp	r3, #16
 80036dc:	d002      	beq.n	80036e4 <I2C_Master_ADDR+0x268>
 80036de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d107      	bne.n	80036f4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036f2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	e032      	b.n	8003772 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800371a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372a:	d117      	bne.n	800375c <I2C_Master_ADDR+0x2e0>
 800372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003732:	d00b      	beq.n	800374c <I2C_Master_ADDR+0x2d0>
 8003734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003736:	2b01      	cmp	r3, #1
 8003738:	d008      	beq.n	800374c <I2C_Master_ADDR+0x2d0>
 800373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373c:	2b08      	cmp	r3, #8
 800373e:	d005      	beq.n	800374c <I2C_Master_ADDR+0x2d0>
 8003740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003742:	2b10      	cmp	r3, #16
 8003744:	d002      	beq.n	800374c <I2C_Master_ADDR+0x2d0>
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	2b20      	cmp	r3, #32
 800374a:	d107      	bne.n	800375c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800375a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003778:	e00b      	b.n	8003792 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
}
 8003790:	e7ff      	b.n	8003792 <I2C_Master_ADDR+0x316>
 8003792:	bf00      	nop
 8003794:	3744      	adds	r7, #68	; 0x44
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d02b      	beq.n	8003810 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	781a      	ldrb	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d114      	bne.n	8003810 <I2C_SlaveTransmit_TXE+0x72>
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b29      	cmp	r3, #41	; 0x29
 80037ea:	d111      	bne.n	8003810 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2221      	movs	r2, #33	; 0x21
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2228      	movs	r2, #40	; 0x28
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff f9f1 	bl	8002bf2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d011      	beq.n	800384e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	781a      	ldrb	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d02c      	beq.n	80038ce <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d114      	bne.n	80038ce <I2C_SlaveReceive_RXNE+0x74>
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b2a      	cmp	r3, #42	; 0x2a
 80038a8:	d111      	bne.n	80038ce <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2222      	movs	r2, #34	; 0x22
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2228      	movs	r2, #40	; 0x28
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff f99c 	bl	8002c06 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d012      	beq.n	800390e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003934:	2b28      	cmp	r3, #40	; 0x28
 8003936:	d127      	bne.n	8003988 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003946:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	09db      	lsrs	r3, r3, #7
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d103      	bne.n	800396c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	81bb      	strh	r3, [r7, #12]
 800396a:	e002      	b.n	8003972 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800397a:	89ba      	ldrh	r2, [r7, #12]
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff f94a 	bl	8002c1a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003986:	e00e      	b.n	80039a6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003988:	2300      	movs	r3, #0
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80039d0:	2300      	movs	r3, #0
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a0c:	d172      	bne.n	8003af4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b22      	cmp	r3, #34	; 0x22
 8003a12:	d002      	beq.n	8003a1a <I2C_Slave_STOPF+0x6a>
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b2a      	cmp	r3, #42	; 0x2a
 8003a18:	d135      	bne.n	8003a86 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f043 0204 	orr.w	r2, r3, #4
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe f865 	bl	8001b22 <HAL_DMA_GetState>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d049      	beq.n	8003af2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	4a69      	ldr	r2, [pc, #420]	; (8003c08 <I2C_Slave_STOPF+0x258>)
 8003a64:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe f837 	bl	8001ade <HAL_DMA_Abort_IT>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d03d      	beq.n	8003af2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a80:	4610      	mov	r0, r2
 8003a82:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a84:	e035      	b.n	8003af2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe f82f 	bl	8001b22 <HAL_DMA_GetState>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d014      	beq.n	8003af4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	4a4e      	ldr	r2, [pc, #312]	; (8003c08 <I2C_Slave_STOPF+0x258>)
 8003ad0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe f801 	bl	8001ade <HAL_DMA_Abort_IT>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003aec:	4610      	mov	r0, r2
 8003aee:	4798      	blx	r3
 8003af0:	e000      	b.n	8003af4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003af2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d03e      	beq.n	8003b7c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d112      	bne.n	8003b32 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d112      	bne.n	8003b66 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f043 0204 	orr.w	r2, r3, #4
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f843 	bl	8003c10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003b8a:	e039      	b.n	8003c00 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b90:	d109      	bne.n	8003ba6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2228      	movs	r2, #40	; 0x28
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff f830 	bl	8002c06 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b28      	cmp	r3, #40	; 0x28
 8003bb0:	d111      	bne.n	8003bd6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a15      	ldr	r2, [pc, #84]	; (8003c0c <I2C_Slave_STOPF+0x25c>)
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff f831 	bl	8002c36 <HAL_I2C_ListenCpltCallback>
}
 8003bd4:	e014      	b.n	8003c00 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	2b22      	cmp	r3, #34	; 0x22
 8003bdc:	d002      	beq.n	8003be4 <I2C_Slave_STOPF+0x234>
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b22      	cmp	r3, #34	; 0x22
 8003be2:	d10d      	bne.n	8003c00 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff f803 	bl	8002c06 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	08004115 	.word	0x08004115
 8003c0c:	ffff0000 	.word	0xffff0000

08003c10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c28:	7bbb      	ldrb	r3, [r7, #14]
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d002      	beq.n	8003c34 <I2C_ITError+0x24>
 8003c2e:	7bbb      	ldrb	r3, [r7, #14]
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d10a      	bne.n	8003c4a <I2C_ITError+0x3a>
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	2b22      	cmp	r3, #34	; 0x22
 8003c38:	d107      	bne.n	8003c4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c50:	2b28      	cmp	r3, #40	; 0x28
 8003c52:	d107      	bne.n	8003c64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2228      	movs	r2, #40	; 0x28
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c62:	e015      	b.n	8003c90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c72:	d00a      	beq.n	8003c8a <I2C_ITError+0x7a>
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b60      	cmp	r3, #96	; 0x60
 8003c78:	d007      	beq.n	8003c8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9e:	d162      	bne.n	8003d66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d020      	beq.n	8003d00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc2:	4a6a      	ldr	r2, [pc, #424]	; (8003e6c <I2C_ITError+0x25c>)
 8003cc4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd ff07 	bl	8001ade <HAL_DMA_Abort_IT>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8089 	beq.w	8003dea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4798      	blx	r3
 8003cfe:	e074      	b.n	8003dea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	4a59      	ldr	r2, [pc, #356]	; (8003e6c <I2C_ITError+0x25c>)
 8003d06:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fd fee6 	bl	8001ade <HAL_DMA_Abort_IT>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d068      	beq.n	8003dea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b40      	cmp	r3, #64	; 0x40
 8003d24:	d10b      	bne.n	8003d3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d60:	4610      	mov	r0, r2
 8003d62:	4798      	blx	r3
 8003d64:	e041      	b.n	8003dea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b60      	cmp	r3, #96	; 0x60
 8003d70:	d125      	bne.n	8003dbe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d10b      	bne.n	8003da6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fe ff5b 	bl	8002c72 <HAL_I2C_AbortCpltCallback>
 8003dbc:	e015      	b.n	8003dea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b40      	cmp	r3, #64	; 0x40
 8003dca:	d10b      	bne.n	8003de4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7fe ff3a 	bl	8002c5e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10e      	bne.n	8003e18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d109      	bne.n	8003e18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d104      	bne.n	8003e18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e26:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d113      	bne.n	8003e64 <I2C_ITError+0x254>
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b28      	cmp	r3, #40	; 0x28
 8003e40:	d110      	bne.n	8003e64 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <I2C_ITError+0x260>)
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fe fee9 	bl	8002c36 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	08004115 	.word	0x08004115
 8003e70:	ffff0000 	.word	0xffff0000

08003e74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	607a      	str	r2, [r7, #4]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	460b      	mov	r3, r1
 8003e82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d006      	beq.n	8003e9e <I2C_MasterRequestWrite+0x2a>
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d003      	beq.n	8003e9e <I2C_MasterRequestWrite+0x2a>
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e9c:	d108      	bne.n	8003eb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e00b      	b.n	8003ec8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	2b12      	cmp	r3, #18
 8003eb6:	d107      	bne.n	8003ec8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 f9c5 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00d      	beq.n	8003efc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eee:	d103      	bne.n	8003ef8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e035      	b.n	8003f68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f04:	d108      	bne.n	8003f18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f06:	897b      	ldrh	r3, [r7, #10]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f14:	611a      	str	r2, [r3, #16]
 8003f16:	e01b      	b.n	8003f50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f18:	897b      	ldrh	r3, [r7, #10]
 8003f1a:	11db      	asrs	r3, r3, #7
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f003 0306 	and.w	r3, r3, #6
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f063 030f 	orn	r3, r3, #15
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	490e      	ldr	r1, [pc, #56]	; (8003f70 <I2C_MasterRequestWrite+0xfc>)
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f9eb 	bl	8004312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e010      	b.n	8003f68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f46:	897b      	ldrh	r3, [r7, #10]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	4907      	ldr	r1, [pc, #28]	; (8003f74 <I2C_MasterRequestWrite+0x100>)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f9db 	bl	8004312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	00010008 	.word	0x00010008
 8003f74:	00010002 	.word	0x00010002

08003f78 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	607a      	str	r2, [r7, #4]
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	460b      	mov	r3, r1
 8003f86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f9c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d006      	beq.n	8003fb2 <I2C_MasterRequestRead+0x3a>
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d003      	beq.n	8003fb2 <I2C_MasterRequestRead+0x3a>
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fb0:	d108      	bne.n	8003fc4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	e00b      	b.n	8003fdc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	2b11      	cmp	r3, #17
 8003fca:	d107      	bne.n	8003fdc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f93b 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00d      	beq.n	8004010 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004002:	d103      	bne.n	800400c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800400a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e079      	b.n	8004104 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004018:	d108      	bne.n	800402c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800401a:	897b      	ldrh	r3, [r7, #10]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	b2da      	uxtb	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	611a      	str	r2, [r3, #16]
 800402a:	e05f      	b.n	80040ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800402c:	897b      	ldrh	r3, [r7, #10]
 800402e:	11db      	asrs	r3, r3, #7
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f003 0306 	and.w	r3, r3, #6
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f063 030f 	orn	r3, r3, #15
 800403c:	b2da      	uxtb	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4930      	ldr	r1, [pc, #192]	; (800410c <I2C_MasterRequestRead+0x194>)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f961 	bl	8004312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e054      	b.n	8004104 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800405a:	897b      	ldrh	r3, [r7, #10]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	4929      	ldr	r1, [pc, #164]	; (8004110 <I2C_MasterRequestRead+0x198>)
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f951 	bl	8004312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e044      	b.n	8004104 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800409e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f8d9 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00d      	beq.n	80040d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c6:	d103      	bne.n	80040d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e017      	b.n	8004104 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040d4:	897b      	ldrh	r3, [r7, #10]
 80040d6:	11db      	asrs	r3, r3, #7
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f003 0306 	and.w	r3, r3, #6
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f063 030e 	orn	r3, r3, #14
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	4907      	ldr	r1, [pc, #28]	; (8004110 <I2C_MasterRequestRead+0x198>)
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f90d 	bl	8004312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	00010008 	.word	0x00010008
 8004110:	00010002 	.word	0x00010002

08004114 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800412e:	4b4b      	ldr	r3, [pc, #300]	; (800425c <I2C_DMAAbort+0x148>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	08db      	lsrs	r3, r3, #3
 8004134:	4a4a      	ldr	r2, [pc, #296]	; (8004260 <I2C_DMAAbort+0x14c>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	0a1a      	lsrs	r2, r3, #8
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	00da      	lsls	r2, r3, #3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f043 0220 	orr.w	r2, r3, #32
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800415a:	e00a      	b.n	8004172 <I2C_DMAAbort+0x5e>
    }
    count--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3b01      	subs	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800416c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004170:	d0ea      	beq.n	8004148 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	2200      	movs	r2, #0
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	2200      	movs	r2, #0
 8004190:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b4:	2200      	movs	r2, #0
 80041b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	2200      	movs	r2, #0
 80041c6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0201 	bic.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b60      	cmp	r3, #96	; 0x60
 80041e2:	d10e      	bne.n	8004202 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2200      	movs	r2, #0
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041fa:	6978      	ldr	r0, [r7, #20]
 80041fc:	f7fe fd39 	bl	8002c72 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004200:	e027      	b.n	8004252 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004202:	7cfb      	ldrb	r3, [r7, #19]
 8004204:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004208:	2b28      	cmp	r3, #40	; 0x28
 800420a:	d117      	bne.n	800423c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800422a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2200      	movs	r2, #0
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2228      	movs	r2, #40	; 0x28
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800423a:	e007      	b.n	800424c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800424c:	6978      	ldr	r0, [r7, #20]
 800424e:	f7fe fd06 	bl	8002c5e <HAL_I2C_ErrorCallback>
}
 8004252:	bf00      	nop
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000000 	.word	0x20000000
 8004260:	14f8b589 	.word	0x14f8b589

08004264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004274:	e025      	b.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427c:	d021      	beq.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427e:	f7fd fb11 	bl	80018a4 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d302      	bcc.n	8004294 <I2C_WaitOnFlagUntilTimeout+0x30>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d116      	bne.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f043 0220 	orr.w	r2, r3, #32
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e023      	b.n	800430a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d10d      	bne.n	80042e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	43da      	mvns	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4013      	ands	r3, r2
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	e00c      	b.n	8004302 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	43da      	mvns	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4013      	ands	r3, r2
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bf0c      	ite	eq
 80042fa:	2301      	moveq	r3, #1
 80042fc:	2300      	movne	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	429a      	cmp	r2, r3
 8004306:	d0b6      	beq.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004320:	e051      	b.n	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004330:	d123      	bne.n	800437a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004340:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800434a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f043 0204 	orr.w	r2, r3, #4
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e046      	b.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d021      	beq.n	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004382:	f7fd fa8f 	bl	80018a4 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	429a      	cmp	r2, r3
 8004390:	d302      	bcc.n	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d116      	bne.n	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e020      	b.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	0c1b      	lsrs	r3, r3, #16
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d10c      	bne.n	80043ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	43da      	mvns	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4013      	ands	r3, r2
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	bf14      	ite	ne
 80043e2:	2301      	movne	r3, #1
 80043e4:	2300      	moveq	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	e00b      	b.n	8004402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	43da      	mvns	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4013      	ands	r3, r2
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	bf14      	ite	ne
 80043fc:	2301      	movne	r3, #1
 80043fe:	2300      	moveq	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d18d      	bne.n	8004322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800441c:	e02d      	b.n	800447a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f900 	bl	8004624 <I2C_IsAcknowledgeFailed>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e02d      	b.n	800448a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d021      	beq.n	800447a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004436:	f7fd fa35 	bl	80018a4 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d116      	bne.n	800447a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e007      	b.n	800448a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d1ca      	bne.n	800441e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800449e:	e02d      	b.n	80044fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f8bf 	bl	8004624 <I2C_IsAcknowledgeFailed>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e02d      	b.n	800450c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b6:	d021      	beq.n	80044fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b8:	f7fd f9f4 	bl	80018a4 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d302      	bcc.n	80044ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d116      	bne.n	80044fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	f043 0220 	orr.w	r2, r3, #32
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e007      	b.n	800450c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b04      	cmp	r3, #4
 8004508:	d1ca      	bne.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004520:	4b13      	ldr	r3, [pc, #76]	; (8004570 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	08db      	lsrs	r3, r3, #3
 8004526:	4a13      	ldr	r2, [pc, #76]	; (8004574 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	0a1a      	lsrs	r2, r3, #8
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3b01      	subs	r3, #1
 800453a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d107      	bne.n	8004552 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f043 0220 	orr.w	r2, r3, #32
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e008      	b.n	8004564 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800455c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004560:	d0e9      	beq.n	8004536 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	20000000 	.word	0x20000000
 8004574:	14f8b589 	.word	0x14f8b589

08004578 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004584:	e042      	b.n	800460c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b10      	cmp	r3, #16
 8004592:	d119      	bne.n	80045c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0210 	mvn.w	r2, #16
 800459c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e029      	b.n	800461c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c8:	f7fd f96c 	bl	80018a4 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d302      	bcc.n	80045de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d116      	bne.n	800460c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	f043 0220 	orr.w	r2, r3, #32
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e007      	b.n	800461c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004616:	2b40      	cmp	r3, #64	; 0x40
 8004618:	d1b5      	bne.n	8004586 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463a:	d11b      	bne.n	8004674 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004644:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	f043 0204 	orr.w	r2, r3, #4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004692:	d103      	bne.n	800469c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800469a:	e007      	b.n	80046ac <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80046a4:	d102      	bne.n	80046ac <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2208      	movs	r2, #8
 80046aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0cc      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046cc:	4b68      	ldr	r3, [pc, #416]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d90c      	bls.n	80046f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046da:	4b65      	ldr	r3, [pc, #404]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e2:	4b63      	ldr	r3, [pc, #396]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d001      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0b8      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d020      	beq.n	8004742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800470c:	4b59      	ldr	r3, [pc, #356]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a58      	ldr	r2, [pc, #352]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004724:	4b53      	ldr	r3, [pc, #332]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4a52      	ldr	r2, [pc, #328]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800472e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004730:	4b50      	ldr	r3, [pc, #320]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	494d      	ldr	r1, [pc, #308]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d044      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004756:	4b47      	ldr	r3, [pc, #284]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d119      	bne.n	8004796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e07f      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d003      	beq.n	8004776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004772:	2b03      	cmp	r3, #3
 8004774:	d107      	bne.n	8004786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004776:	4b3f      	ldr	r3, [pc, #252]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e06f      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004786:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e067      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004796:	4b37      	ldr	r3, [pc, #220]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f023 0203 	bic.w	r2, r3, #3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4934      	ldr	r1, [pc, #208]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a8:	f7fd f87c 	bl	80018a4 <HAL_GetTick>
 80047ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b0:	f7fd f878 	bl	80018a4 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e04f      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 020c 	and.w	r2, r3, #12
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d1eb      	bne.n	80047b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d8:	4b25      	ldr	r3, [pc, #148]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 030f 	and.w	r3, r3, #15
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d20c      	bcs.n	8004800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e6:	4b22      	ldr	r3, [pc, #136]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b20      	ldr	r3, [pc, #128]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e032      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800480c:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4916      	ldr	r1, [pc, #88]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	490e      	ldr	r1, [pc, #56]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800483e:	f000 f855 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 8004842:	4602      	mov	r2, r0
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	490a      	ldr	r1, [pc, #40]	; (8004878 <HAL_RCC_ClockConfig+0x1c0>)
 8004850:	5ccb      	ldrb	r3, [r1, r3]
 8004852:	fa22 f303 	lsr.w	r3, r2, r3
 8004856:	4a09      	ldr	r2, [pc, #36]	; (800487c <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800485a:	4b09      	ldr	r3, [pc, #36]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fc ffdc 	bl	800181c <HAL_InitTick>

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40023c00 	.word	0x40023c00
 8004874:	40023800 	.word	0x40023800
 8004878:	080082b8 	.word	0x080082b8
 800487c:	20000000 	.word	0x20000000
 8004880:	20000004 	.word	0x20000004

08004884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <HAL_RCC_GetHCLKFreq+0x14>)
 800488a:	681b      	ldr	r3, [r3, #0]
}
 800488c:	4618      	mov	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000000 	.word	0x20000000

0800489c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048a0:	f7ff fff0 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0a9b      	lsrs	r3, r3, #10
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4903      	ldr	r1, [pc, #12]	; (80048c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40023800 	.word	0x40023800
 80048c0:	080082c8 	.word	0x080082c8

080048c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048c8:	f7ff ffdc 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	0b5b      	lsrs	r3, r3, #13
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	4903      	ldr	r1, [pc, #12]	; (80048e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048da:	5ccb      	ldrb	r3, [r1, r3]
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40023800 	.word	0x40023800
 80048e8:	080082c8 	.word	0x080082c8

080048ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f0:	b0ae      	sub	sp, #184	; 0xb8
 80048f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004912:	4bcb      	ldr	r3, [pc, #812]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	2b0c      	cmp	r3, #12
 800491c:	f200 8206 	bhi.w	8004d2c <HAL_RCC_GetSysClockFreq+0x440>
 8004920:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004926:	bf00      	nop
 8004928:	0800495d 	.word	0x0800495d
 800492c:	08004d2d 	.word	0x08004d2d
 8004930:	08004d2d 	.word	0x08004d2d
 8004934:	08004d2d 	.word	0x08004d2d
 8004938:	08004965 	.word	0x08004965
 800493c:	08004d2d 	.word	0x08004d2d
 8004940:	08004d2d 	.word	0x08004d2d
 8004944:	08004d2d 	.word	0x08004d2d
 8004948:	0800496d 	.word	0x0800496d
 800494c:	08004d2d 	.word	0x08004d2d
 8004950:	08004d2d 	.word	0x08004d2d
 8004954:	08004d2d 	.word	0x08004d2d
 8004958:	08004b5d 	.word	0x08004b5d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800495c:	4bb9      	ldr	r3, [pc, #740]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x358>)
 800495e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004962:	e1e7      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004964:	4bb8      	ldr	r3, [pc, #736]	; (8004c48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004966:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800496a:	e1e3      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800496c:	4bb4      	ldr	r3, [pc, #720]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x354>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004974:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004978:	4bb1      	ldr	r3, [pc, #708]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x354>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d071      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004984:	4bae      	ldr	r3, [pc, #696]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	099b      	lsrs	r3, r3, #6
 800498a:	2200      	movs	r2, #0
 800498c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004990:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049a0:	2300      	movs	r3, #0
 80049a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049aa:	4622      	mov	r2, r4
 80049ac:	462b      	mov	r3, r5
 80049ae:	f04f 0000 	mov.w	r0, #0
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	0159      	lsls	r1, r3, #5
 80049b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049bc:	0150      	lsls	r0, r2, #5
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4621      	mov	r1, r4
 80049c4:	1a51      	subs	r1, r2, r1
 80049c6:	6439      	str	r1, [r7, #64]	; 0x40
 80049c8:	4629      	mov	r1, r5
 80049ca:	eb63 0301 	sbc.w	r3, r3, r1
 80049ce:	647b      	str	r3, [r7, #68]	; 0x44
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80049dc:	4649      	mov	r1, r9
 80049de:	018b      	lsls	r3, r1, #6
 80049e0:	4641      	mov	r1, r8
 80049e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049e6:	4641      	mov	r1, r8
 80049e8:	018a      	lsls	r2, r1, #6
 80049ea:	4641      	mov	r1, r8
 80049ec:	1a51      	subs	r1, r2, r1
 80049ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80049f0:	4649      	mov	r1, r9
 80049f2:	eb63 0301 	sbc.w	r3, r3, r1
 80049f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004a04:	4649      	mov	r1, r9
 8004a06:	00cb      	lsls	r3, r1, #3
 8004a08:	4641      	mov	r1, r8
 8004a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a0e:	4641      	mov	r1, r8
 8004a10:	00ca      	lsls	r2, r1, #3
 8004a12:	4610      	mov	r0, r2
 8004a14:	4619      	mov	r1, r3
 8004a16:	4603      	mov	r3, r0
 8004a18:	4622      	mov	r2, r4
 8004a1a:	189b      	adds	r3, r3, r2
 8004a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a1e:	462b      	mov	r3, r5
 8004a20:	460a      	mov	r2, r1
 8004a22:	eb42 0303 	adc.w	r3, r2, r3
 8004a26:	637b      	str	r3, [r7, #52]	; 0x34
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a34:	4629      	mov	r1, r5
 8004a36:	024b      	lsls	r3, r1, #9
 8004a38:	4621      	mov	r1, r4
 8004a3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a3e:	4621      	mov	r1, r4
 8004a40:	024a      	lsls	r2, r1, #9
 8004a42:	4610      	mov	r0, r2
 8004a44:	4619      	mov	r1, r3
 8004a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a54:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004a58:	f7fc f8c6 	bl	8000be8 <__aeabi_uldivmod>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4613      	mov	r3, r2
 8004a62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a66:	e067      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a68:	4b75      	ldr	r3, [pc, #468]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	099b      	lsrs	r3, r3, #6
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a74:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004a78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a80:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a82:	2300      	movs	r3, #0
 8004a84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a86:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	f04f 0000 	mov.w	r0, #0
 8004a92:	f04f 0100 	mov.w	r1, #0
 8004a96:	0159      	lsls	r1, r3, #5
 8004a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a9c:	0150      	lsls	r0, r2, #5
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	1a51      	subs	r1, r2, r1
 8004aa6:	62b9      	str	r1, [r7, #40]	; 0x28
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004abc:	4649      	mov	r1, r9
 8004abe:	018b      	lsls	r3, r1, #6
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	018a      	lsls	r2, r1, #6
 8004aca:	4641      	mov	r1, r8
 8004acc:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ae2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ae6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aea:	4692      	mov	sl, r2
 8004aec:	469b      	mov	fp, r3
 8004aee:	4623      	mov	r3, r4
 8004af0:	eb1a 0303 	adds.w	r3, sl, r3
 8004af4:	623b      	str	r3, [r7, #32]
 8004af6:	462b      	mov	r3, r5
 8004af8:	eb4b 0303 	adc.w	r3, fp, r3
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	028b      	lsls	r3, r1, #10
 8004b0e:	4621      	mov	r1, r4
 8004b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b14:	4621      	mov	r1, r4
 8004b16:	028a      	lsls	r2, r1, #10
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b20:	2200      	movs	r2, #0
 8004b22:	673b      	str	r3, [r7, #112]	; 0x70
 8004b24:	677a      	str	r2, [r7, #116]	; 0x74
 8004b26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004b2a:	f7fc f85d 	bl	8000be8 <__aeabi_uldivmod>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4613      	mov	r3, r2
 8004b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b38:	4b41      	ldr	r3, [pc, #260]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	0c1b      	lsrs	r3, r3, #16
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	3301      	adds	r3, #1
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004b4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b5a:	e0eb      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b5c:	4b38      	ldr	r3, [pc, #224]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b68:	4b35      	ldr	r3, [pc, #212]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d06b      	beq.n	8004c4c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b74:	4b32      	ldr	r3, [pc, #200]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	099b      	lsrs	r3, r3, #6
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	663b      	str	r3, [r7, #96]	; 0x60
 8004b88:	2300      	movs	r3, #0
 8004b8a:	667b      	str	r3, [r7, #100]	; 0x64
 8004b8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004b90:	4622      	mov	r2, r4
 8004b92:	462b      	mov	r3, r5
 8004b94:	f04f 0000 	mov.w	r0, #0
 8004b98:	f04f 0100 	mov.w	r1, #0
 8004b9c:	0159      	lsls	r1, r3, #5
 8004b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ba2:	0150      	lsls	r0, r2, #5
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4621      	mov	r1, r4
 8004baa:	1a51      	subs	r1, r2, r1
 8004bac:	61b9      	str	r1, [r7, #24]
 8004bae:	4629      	mov	r1, r5
 8004bb0:	eb63 0301 	sbc.w	r3, r3, r1
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004bc2:	4659      	mov	r1, fp
 8004bc4:	018b      	lsls	r3, r1, #6
 8004bc6:	4651      	mov	r1, sl
 8004bc8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bcc:	4651      	mov	r1, sl
 8004bce:	018a      	lsls	r2, r1, #6
 8004bd0:	4651      	mov	r1, sl
 8004bd2:	ebb2 0801 	subs.w	r8, r2, r1
 8004bd6:	4659      	mov	r1, fp
 8004bd8:	eb63 0901 	sbc.w	r9, r3, r1
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004be8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bf0:	4690      	mov	r8, r2
 8004bf2:	4699      	mov	r9, r3
 8004bf4:	4623      	mov	r3, r4
 8004bf6:	eb18 0303 	adds.w	r3, r8, r3
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	462b      	mov	r3, r5
 8004bfe:	eb49 0303 	adc.w	r3, r9, r3
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004c10:	4629      	mov	r1, r5
 8004c12:	024b      	lsls	r3, r1, #9
 8004c14:	4621      	mov	r1, r4
 8004c16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	024a      	lsls	r2, r1, #9
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4619      	mov	r1, r3
 8004c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c26:	2200      	movs	r2, #0
 8004c28:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c2a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004c2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c30:	f7fb ffda 	bl	8000be8 <__aeabi_uldivmod>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4613      	mov	r3, r2
 8004c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c3e:	e065      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x420>
 8004c40:	40023800 	.word	0x40023800
 8004c44:	00f42400 	.word	0x00f42400
 8004c48:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c4c:	4b3d      	ldr	r3, [pc, #244]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x458>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	099b      	lsrs	r3, r3, #6
 8004c52:	2200      	movs	r2, #0
 8004c54:	4618      	mov	r0, r3
 8004c56:	4611      	mov	r1, r2
 8004c58:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004c5e:	2300      	movs	r3, #0
 8004c60:	657b      	str	r3, [r7, #84]	; 0x54
 8004c62:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004c66:	4642      	mov	r2, r8
 8004c68:	464b      	mov	r3, r9
 8004c6a:	f04f 0000 	mov.w	r0, #0
 8004c6e:	f04f 0100 	mov.w	r1, #0
 8004c72:	0159      	lsls	r1, r3, #5
 8004c74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c78:	0150      	lsls	r0, r2, #5
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4641      	mov	r1, r8
 8004c80:	1a51      	subs	r1, r2, r1
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	4649      	mov	r1, r9
 8004c86:	eb63 0301 	sbc.w	r3, r3, r1
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004c98:	4659      	mov	r1, fp
 8004c9a:	018b      	lsls	r3, r1, #6
 8004c9c:	4651      	mov	r1, sl
 8004c9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ca2:	4651      	mov	r1, sl
 8004ca4:	018a      	lsls	r2, r1, #6
 8004ca6:	4651      	mov	r1, sl
 8004ca8:	1a54      	subs	r4, r2, r1
 8004caa:	4659      	mov	r1, fp
 8004cac:	eb63 0501 	sbc.w	r5, r3, r1
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	00eb      	lsls	r3, r5, #3
 8004cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cbe:	00e2      	lsls	r2, r4, #3
 8004cc0:	4614      	mov	r4, r2
 8004cc2:	461d      	mov	r5, r3
 8004cc4:	4643      	mov	r3, r8
 8004cc6:	18e3      	adds	r3, r4, r3
 8004cc8:	603b      	str	r3, [r7, #0]
 8004cca:	464b      	mov	r3, r9
 8004ccc:	eb45 0303 	adc.w	r3, r5, r3
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cde:	4629      	mov	r1, r5
 8004ce0:	028b      	lsls	r3, r1, #10
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ce8:	4621      	mov	r1, r4
 8004cea:	028a      	lsls	r2, r1, #10
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cf8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004cfa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cfe:	f7fb ff73 	bl	8000be8 <__aeabi_uldivmod>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4613      	mov	r3, r2
 8004d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	0f1b      	lsrs	r3, r3, #28
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004d1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004d2a:	e003      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004d32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	37b8      	adds	r7, #184	; 0xb8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d42:	bf00      	nop
 8004d44:	40023800 	.word	0x40023800
 8004d48:	00f42400 	.word	0x00f42400

08004d4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e28d      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 8083 	beq.w	8004e72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d6c:	4b94      	ldr	r3, [pc, #592]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 030c 	and.w	r3, r3, #12
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d019      	beq.n	8004dac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d78:	4b91      	ldr	r3, [pc, #580]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d106      	bne.n	8004d92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d84:	4b8e      	ldr	r3, [pc, #568]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d90:	d00c      	beq.n	8004dac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d92:	4b8b      	ldr	r3, [pc, #556]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d9a:	2b0c      	cmp	r3, #12
 8004d9c:	d112      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d9e:	4b88      	ldr	r3, [pc, #544]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004daa:	d10b      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	4b84      	ldr	r3, [pc, #528]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d05b      	beq.n	8004e70 <HAL_RCC_OscConfig+0x124>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d157      	bne.n	8004e70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e25a      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dcc:	d106      	bne.n	8004ddc <HAL_RCC_OscConfig+0x90>
 8004dce:	4b7c      	ldr	r3, [pc, #496]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a7b      	ldr	r2, [pc, #492]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	e01d      	b.n	8004e18 <HAL_RCC_OscConfig+0xcc>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCC_OscConfig+0xb4>
 8004de6:	4b76      	ldr	r3, [pc, #472]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a75      	ldr	r2, [pc, #468]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	4b73      	ldr	r3, [pc, #460]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a72      	ldr	r2, [pc, #456]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCC_OscConfig+0xcc>
 8004e00:	4b6f      	ldr	r3, [pc, #444]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a6e      	ldr	r2, [pc, #440]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	4b6c      	ldr	r3, [pc, #432]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a6b      	ldr	r2, [pc, #428]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d013      	beq.n	8004e48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e20:	f7fc fd40 	bl	80018a4 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e28:	f7fc fd3c 	bl	80018a4 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	; 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e21f      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3a:	4b61      	ldr	r3, [pc, #388]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0xdc>
 8004e46:	e014      	b.n	8004e72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e48:	f7fc fd2c 	bl	80018a4 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fc fd28 	bl	80018a4 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	; 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e20b      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e62:	4b57      	ldr	r3, [pc, #348]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x104>
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d06f      	beq.n	8004f5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e7e:	4b50      	ldr	r3, [pc, #320]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d017      	beq.n	8004eba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e8a:	4b4d      	ldr	r3, [pc, #308]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d105      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e96:	4b4a      	ldr	r3, [pc, #296]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00b      	beq.n	8004eba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ea2:	4b47      	ldr	r3, [pc, #284]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004eaa:	2b0c      	cmp	r3, #12
 8004eac:	d11c      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eae:	4b44      	ldr	r3, [pc, #272]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d116      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eba:	4b41      	ldr	r3, [pc, #260]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x186>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d001      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e1d3      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed2:	4b3b      	ldr	r3, [pc, #236]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4937      	ldr	r1, [pc, #220]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee6:	e03a      	b.n	8004f5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d020      	beq.n	8004f32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ef0:	4b34      	ldr	r3, [pc, #208]	; (8004fc4 <HAL_RCC_OscConfig+0x278>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef6:	f7fc fcd5 	bl	80018a4 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004efe:	f7fc fcd1 	bl	80018a4 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e1b4      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f10:	4b2b      	ldr	r3, [pc, #172]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1c:	4b28      	ldr	r3, [pc, #160]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4925      	ldr	r1, [pc, #148]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	600b      	str	r3, [r1, #0]
 8004f30:	e015      	b.n	8004f5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f32:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <HAL_RCC_OscConfig+0x278>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fc fcb4 	bl	80018a4 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f40:	f7fc fcb0 	bl	80018a4 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e193      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f52:	4b1b      	ldr	r3, [pc, #108]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d036      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d016      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <HAL_RCC_OscConfig+0x27c>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f78:	f7fc fc94 	bl	80018a4 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f80:	f7fc fc90 	bl	80018a4 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e173      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0f0      	beq.n	8004f80 <HAL_RCC_OscConfig+0x234>
 8004f9e:	e01b      	b.n	8004fd8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fa0:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <HAL_RCC_OscConfig+0x27c>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa6:	f7fc fc7d 	bl	80018a4 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fac:	e00e      	b.n	8004fcc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fae:	f7fc fc79 	bl	80018a4 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d907      	bls.n	8004fcc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e15c      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	42470000 	.word	0x42470000
 8004fc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fcc:	4b8a      	ldr	r3, [pc, #552]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8004fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1ea      	bne.n	8004fae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8097 	beq.w	8005114 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fea:	4b83      	ldr	r3, [pc, #524]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10f      	bne.n	8005016 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	4b7f      	ldr	r3, [pc, #508]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	4a7e      	ldr	r2, [pc, #504]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005004:	6413      	str	r3, [r2, #64]	; 0x40
 8005006:	4b7c      	ldr	r3, [pc, #496]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005016:	4b79      	ldr	r3, [pc, #484]	; (80051fc <HAL_RCC_OscConfig+0x4b0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501e:	2b00      	cmp	r3, #0
 8005020:	d118      	bne.n	8005054 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005022:	4b76      	ldr	r3, [pc, #472]	; (80051fc <HAL_RCC_OscConfig+0x4b0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a75      	ldr	r2, [pc, #468]	; (80051fc <HAL_RCC_OscConfig+0x4b0>)
 8005028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800502e:	f7fc fc39 	bl	80018a4 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005036:	f7fc fc35 	bl	80018a4 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e118      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005048:	4b6c      	ldr	r3, [pc, #432]	; (80051fc <HAL_RCC_OscConfig+0x4b0>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d106      	bne.n	800506a <HAL_RCC_OscConfig+0x31e>
 800505c:	4b66      	ldr	r3, [pc, #408]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005060:	4a65      	ldr	r2, [pc, #404]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	6713      	str	r3, [r2, #112]	; 0x70
 8005068:	e01c      	b.n	80050a4 <HAL_RCC_OscConfig+0x358>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b05      	cmp	r3, #5
 8005070:	d10c      	bne.n	800508c <HAL_RCC_OscConfig+0x340>
 8005072:	4b61      	ldr	r3, [pc, #388]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005076:	4a60      	ldr	r2, [pc, #384]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005078:	f043 0304 	orr.w	r3, r3, #4
 800507c:	6713      	str	r3, [r2, #112]	; 0x70
 800507e:	4b5e      	ldr	r3, [pc, #376]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005082:	4a5d      	ldr	r2, [pc, #372]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	6713      	str	r3, [r2, #112]	; 0x70
 800508a:	e00b      	b.n	80050a4 <HAL_RCC_OscConfig+0x358>
 800508c:	4b5a      	ldr	r3, [pc, #360]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005090:	4a59      	ldr	r2, [pc, #356]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005092:	f023 0301 	bic.w	r3, r3, #1
 8005096:	6713      	str	r3, [r2, #112]	; 0x70
 8005098:	4b57      	ldr	r3, [pc, #348]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 800509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509c:	4a56      	ldr	r2, [pc, #344]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 800509e:	f023 0304 	bic.w	r3, r3, #4
 80050a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d015      	beq.n	80050d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ac:	f7fc fbfa 	bl	80018a4 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b2:	e00a      	b.n	80050ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050b4:	f7fc fbf6 	bl	80018a4 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e0d7      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ca:	4b4b      	ldr	r3, [pc, #300]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0ee      	beq.n	80050b4 <HAL_RCC_OscConfig+0x368>
 80050d6:	e014      	b.n	8005102 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d8:	f7fc fbe4 	bl	80018a4 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e0:	f7fc fbe0 	bl	80018a4 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e0c1      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f6:	4b40      	ldr	r3, [pc, #256]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1ee      	bne.n	80050e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005102:	7dfb      	ldrb	r3, [r7, #23]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d105      	bne.n	8005114 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005108:	4b3b      	ldr	r3, [pc, #236]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	4a3a      	ldr	r2, [pc, #232]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 800510e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005112:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 80ad 	beq.w	8005278 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800511e:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	2b08      	cmp	r3, #8
 8005128:	d060      	beq.n	80051ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d145      	bne.n	80051be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005132:	4b33      	ldr	r3, [pc, #204]	; (8005200 <HAL_RCC_OscConfig+0x4b4>)
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005138:	f7fc fbb4 	bl	80018a4 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005140:	f7fc fbb0 	bl	80018a4 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e093      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005152:	4b29      	ldr	r3, [pc, #164]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69da      	ldr	r2, [r3, #28]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	019b      	lsls	r3, r3, #6
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	3b01      	subs	r3, #1
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	061b      	lsls	r3, r3, #24
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	071b      	lsls	r3, r3, #28
 800518a:	491b      	ldr	r1, [pc, #108]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 800518c:	4313      	orrs	r3, r2
 800518e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005190:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <HAL_RCC_OscConfig+0x4b4>)
 8005192:	2201      	movs	r2, #1
 8005194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005196:	f7fc fb85 	bl	80018a4 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800519e:	f7fc fb81 	bl	80018a4 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e064      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b0:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <HAL_RCC_OscConfig+0x452>
 80051bc:	e05c      	b.n	8005278 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051be:	4b10      	ldr	r3, [pc, #64]	; (8005200 <HAL_RCC_OscConfig+0x4b4>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fc fb6e 	bl	80018a4 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051cc:	f7fc fb6a 	bl	80018a4 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e04d      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051de:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x480>
 80051ea:	e045      	b.n	8005278 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d107      	bne.n	8005204 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e040      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40007000 	.word	0x40007000
 8005200:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005204:	4b1f      	ldr	r3, [pc, #124]	; (8005284 <HAL_RCC_OscConfig+0x538>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d030      	beq.n	8005274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800521c:	429a      	cmp	r2, r3
 800521e:	d129      	bne.n	8005274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522a:	429a      	cmp	r2, r3
 800522c:	d122      	bne.n	8005274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005234:	4013      	ands	r3, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800523a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800523c:	4293      	cmp	r3, r2
 800523e:	d119      	bne.n	8005274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	085b      	lsrs	r3, r3, #1
 800524c:	3b01      	subs	r3, #1
 800524e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005250:	429a      	cmp	r2, r3
 8005252:	d10f      	bne.n	8005274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d107      	bne.n	8005274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40023800 	.word	0x40023800

08005288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e03f      	b.n	800531a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fc fa20 	bl	80016f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2224      	movs	r2, #36	; 0x24
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f829 	bl	8005324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005328:	b0c0      	sub	sp, #256	; 0x100
 800532a:	af00      	add	r7, sp, #0
 800532c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005340:	68d9      	ldr	r1, [r3, #12]
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	ea40 0301 	orr.w	r3, r0, r1
 800534c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800534e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	431a      	orrs	r2, r3
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	431a      	orrs	r2, r3
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800537c:	f021 010c 	bic.w	r1, r1, #12
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800538a:	430b      	orrs	r3, r1
 800538c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800539a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539e:	6999      	ldr	r1, [r3, #24]
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	ea40 0301 	orr.w	r3, r0, r1
 80053aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b8f      	ldr	r3, [pc, #572]	; (80055f0 <UART_SetConfig+0x2cc>)
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d005      	beq.n	80053c4 <UART_SetConfig+0xa0>
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	4b8d      	ldr	r3, [pc, #564]	; (80055f4 <UART_SetConfig+0x2d0>)
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d104      	bne.n	80053ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053c4:	f7ff fa7e 	bl	80048c4 <HAL_RCC_GetPCLK2Freq>
 80053c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053cc:	e003      	b.n	80053d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053ce:	f7ff fa65 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 80053d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e0:	f040 810c 	bne.w	80055fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e8:	2200      	movs	r2, #0
 80053ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053f6:	4622      	mov	r2, r4
 80053f8:	462b      	mov	r3, r5
 80053fa:	1891      	adds	r1, r2, r2
 80053fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80053fe:	415b      	adcs	r3, r3
 8005400:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005402:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005406:	4621      	mov	r1, r4
 8005408:	eb12 0801 	adds.w	r8, r2, r1
 800540c:	4629      	mov	r1, r5
 800540e:	eb43 0901 	adc.w	r9, r3, r1
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800541e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005426:	4690      	mov	r8, r2
 8005428:	4699      	mov	r9, r3
 800542a:	4623      	mov	r3, r4
 800542c:	eb18 0303 	adds.w	r3, r8, r3
 8005430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005434:	462b      	mov	r3, r5
 8005436:	eb49 0303 	adc.w	r3, r9, r3
 800543a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800543e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800544a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800544e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005452:	460b      	mov	r3, r1
 8005454:	18db      	adds	r3, r3, r3
 8005456:	653b      	str	r3, [r7, #80]	; 0x50
 8005458:	4613      	mov	r3, r2
 800545a:	eb42 0303 	adc.w	r3, r2, r3
 800545e:	657b      	str	r3, [r7, #84]	; 0x54
 8005460:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005464:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005468:	f7fb fbbe 	bl	8000be8 <__aeabi_uldivmod>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4b61      	ldr	r3, [pc, #388]	; (80055f8 <UART_SetConfig+0x2d4>)
 8005472:	fba3 2302 	umull	r2, r3, r3, r2
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	011c      	lsls	r4, r3, #4
 800547a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800547e:	2200      	movs	r2, #0
 8005480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005484:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005488:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800548c:	4642      	mov	r2, r8
 800548e:	464b      	mov	r3, r9
 8005490:	1891      	adds	r1, r2, r2
 8005492:	64b9      	str	r1, [r7, #72]	; 0x48
 8005494:	415b      	adcs	r3, r3
 8005496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005498:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800549c:	4641      	mov	r1, r8
 800549e:	eb12 0a01 	adds.w	sl, r2, r1
 80054a2:	4649      	mov	r1, r9
 80054a4:	eb43 0b01 	adc.w	fp, r3, r1
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054bc:	4692      	mov	sl, r2
 80054be:	469b      	mov	fp, r3
 80054c0:	4643      	mov	r3, r8
 80054c2:	eb1a 0303 	adds.w	r3, sl, r3
 80054c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054ca:	464b      	mov	r3, r9
 80054cc:	eb4b 0303 	adc.w	r3, fp, r3
 80054d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054e8:	460b      	mov	r3, r1
 80054ea:	18db      	adds	r3, r3, r3
 80054ec:	643b      	str	r3, [r7, #64]	; 0x40
 80054ee:	4613      	mov	r3, r2
 80054f0:	eb42 0303 	adc.w	r3, r2, r3
 80054f4:	647b      	str	r3, [r7, #68]	; 0x44
 80054f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054fe:	f7fb fb73 	bl	8000be8 <__aeabi_uldivmod>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4611      	mov	r1, r2
 8005508:	4b3b      	ldr	r3, [pc, #236]	; (80055f8 <UART_SetConfig+0x2d4>)
 800550a:	fba3 2301 	umull	r2, r3, r3, r1
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	2264      	movs	r2, #100	; 0x64
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	1acb      	subs	r3, r1, r3
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800551e:	4b36      	ldr	r3, [pc, #216]	; (80055f8 <UART_SetConfig+0x2d4>)
 8005520:	fba3 2302 	umull	r2, r3, r3, r2
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800552c:	441c      	add	r4, r3
 800552e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005532:	2200      	movs	r2, #0
 8005534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005538:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800553c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	1891      	adds	r1, r2, r2
 8005546:	63b9      	str	r1, [r7, #56]	; 0x38
 8005548:	415b      	adcs	r3, r3
 800554a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800554c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005550:	4641      	mov	r1, r8
 8005552:	1851      	adds	r1, r2, r1
 8005554:	6339      	str	r1, [r7, #48]	; 0x30
 8005556:	4649      	mov	r1, r9
 8005558:	414b      	adcs	r3, r1
 800555a:	637b      	str	r3, [r7, #52]	; 0x34
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005568:	4659      	mov	r1, fp
 800556a:	00cb      	lsls	r3, r1, #3
 800556c:	4651      	mov	r1, sl
 800556e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005572:	4651      	mov	r1, sl
 8005574:	00ca      	lsls	r2, r1, #3
 8005576:	4610      	mov	r0, r2
 8005578:	4619      	mov	r1, r3
 800557a:	4603      	mov	r3, r0
 800557c:	4642      	mov	r2, r8
 800557e:	189b      	adds	r3, r3, r2
 8005580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005584:	464b      	mov	r3, r9
 8005586:	460a      	mov	r2, r1
 8005588:	eb42 0303 	adc.w	r3, r2, r3
 800558c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800559c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055a4:	460b      	mov	r3, r1
 80055a6:	18db      	adds	r3, r3, r3
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80055aa:	4613      	mov	r3, r2
 80055ac:	eb42 0303 	adc.w	r3, r2, r3
 80055b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055ba:	f7fb fb15 	bl	8000be8 <__aeabi_uldivmod>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4b0d      	ldr	r3, [pc, #52]	; (80055f8 <UART_SetConfig+0x2d4>)
 80055c4:	fba3 1302 	umull	r1, r3, r3, r2
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	2164      	movs	r1, #100	; 0x64
 80055cc:	fb01 f303 	mul.w	r3, r1, r3
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	3332      	adds	r3, #50	; 0x32
 80055d6:	4a08      	ldr	r2, [pc, #32]	; (80055f8 <UART_SetConfig+0x2d4>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	095b      	lsrs	r3, r3, #5
 80055de:	f003 0207 	and.w	r2, r3, #7
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4422      	add	r2, r4
 80055ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055ec:	e105      	b.n	80057fa <UART_SetConfig+0x4d6>
 80055ee:	bf00      	nop
 80055f0:	40011000 	.word	0x40011000
 80055f4:	40011400 	.word	0x40011400
 80055f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005600:	2200      	movs	r2, #0
 8005602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005606:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800560a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800560e:	4642      	mov	r2, r8
 8005610:	464b      	mov	r3, r9
 8005612:	1891      	adds	r1, r2, r2
 8005614:	6239      	str	r1, [r7, #32]
 8005616:	415b      	adcs	r3, r3
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
 800561a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800561e:	4641      	mov	r1, r8
 8005620:	1854      	adds	r4, r2, r1
 8005622:	4649      	mov	r1, r9
 8005624:	eb43 0501 	adc.w	r5, r3, r1
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	00eb      	lsls	r3, r5, #3
 8005632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005636:	00e2      	lsls	r2, r4, #3
 8005638:	4614      	mov	r4, r2
 800563a:	461d      	mov	r5, r3
 800563c:	4643      	mov	r3, r8
 800563e:	18e3      	adds	r3, r4, r3
 8005640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005644:	464b      	mov	r3, r9
 8005646:	eb45 0303 	adc.w	r3, r5, r3
 800564a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800564e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800565a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800566a:	4629      	mov	r1, r5
 800566c:	008b      	lsls	r3, r1, #2
 800566e:	4621      	mov	r1, r4
 8005670:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005674:	4621      	mov	r1, r4
 8005676:	008a      	lsls	r2, r1, #2
 8005678:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800567c:	f7fb fab4 	bl	8000be8 <__aeabi_uldivmod>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	4b60      	ldr	r3, [pc, #384]	; (8005808 <UART_SetConfig+0x4e4>)
 8005686:	fba3 2302 	umull	r2, r3, r3, r2
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	011c      	lsls	r4, r3, #4
 800568e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005692:	2200      	movs	r2, #0
 8005694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005698:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800569c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056a0:	4642      	mov	r2, r8
 80056a2:	464b      	mov	r3, r9
 80056a4:	1891      	adds	r1, r2, r2
 80056a6:	61b9      	str	r1, [r7, #24]
 80056a8:	415b      	adcs	r3, r3
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056b0:	4641      	mov	r1, r8
 80056b2:	1851      	adds	r1, r2, r1
 80056b4:	6139      	str	r1, [r7, #16]
 80056b6:	4649      	mov	r1, r9
 80056b8:	414b      	adcs	r3, r1
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056c8:	4659      	mov	r1, fp
 80056ca:	00cb      	lsls	r3, r1, #3
 80056cc:	4651      	mov	r1, sl
 80056ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056d2:	4651      	mov	r1, sl
 80056d4:	00ca      	lsls	r2, r1, #3
 80056d6:	4610      	mov	r0, r2
 80056d8:	4619      	mov	r1, r3
 80056da:	4603      	mov	r3, r0
 80056dc:	4642      	mov	r2, r8
 80056de:	189b      	adds	r3, r3, r2
 80056e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056e4:	464b      	mov	r3, r9
 80056e6:	460a      	mov	r2, r1
 80056e8:	eb42 0303 	adc.w	r3, r2, r3
 80056ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80056fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005708:	4649      	mov	r1, r9
 800570a:	008b      	lsls	r3, r1, #2
 800570c:	4641      	mov	r1, r8
 800570e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005712:	4641      	mov	r1, r8
 8005714:	008a      	lsls	r2, r1, #2
 8005716:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800571a:	f7fb fa65 	bl	8000be8 <__aeabi_uldivmod>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4b39      	ldr	r3, [pc, #228]	; (8005808 <UART_SetConfig+0x4e4>)
 8005724:	fba3 1302 	umull	r1, r3, r3, r2
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	2164      	movs	r1, #100	; 0x64
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	3332      	adds	r3, #50	; 0x32
 8005736:	4a34      	ldr	r2, [pc, #208]	; (8005808 <UART_SetConfig+0x4e4>)
 8005738:	fba2 2303 	umull	r2, r3, r2, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005742:	441c      	add	r4, r3
 8005744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005748:	2200      	movs	r2, #0
 800574a:	673b      	str	r3, [r7, #112]	; 0x70
 800574c:	677a      	str	r2, [r7, #116]	; 0x74
 800574e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005752:	4642      	mov	r2, r8
 8005754:	464b      	mov	r3, r9
 8005756:	1891      	adds	r1, r2, r2
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	415b      	adcs	r3, r3
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005762:	4641      	mov	r1, r8
 8005764:	1851      	adds	r1, r2, r1
 8005766:	6039      	str	r1, [r7, #0]
 8005768:	4649      	mov	r1, r9
 800576a:	414b      	adcs	r3, r1
 800576c:	607b      	str	r3, [r7, #4]
 800576e:	f04f 0200 	mov.w	r2, #0
 8005772:	f04f 0300 	mov.w	r3, #0
 8005776:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800577a:	4659      	mov	r1, fp
 800577c:	00cb      	lsls	r3, r1, #3
 800577e:	4651      	mov	r1, sl
 8005780:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005784:	4651      	mov	r1, sl
 8005786:	00ca      	lsls	r2, r1, #3
 8005788:	4610      	mov	r0, r2
 800578a:	4619      	mov	r1, r3
 800578c:	4603      	mov	r3, r0
 800578e:	4642      	mov	r2, r8
 8005790:	189b      	adds	r3, r3, r2
 8005792:	66bb      	str	r3, [r7, #104]	; 0x68
 8005794:	464b      	mov	r3, r9
 8005796:	460a      	mov	r2, r1
 8005798:	eb42 0303 	adc.w	r3, r2, r3
 800579c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800579e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	663b      	str	r3, [r7, #96]	; 0x60
 80057a8:	667a      	str	r2, [r7, #100]	; 0x64
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057b6:	4649      	mov	r1, r9
 80057b8:	008b      	lsls	r3, r1, #2
 80057ba:	4641      	mov	r1, r8
 80057bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057c0:	4641      	mov	r1, r8
 80057c2:	008a      	lsls	r2, r1, #2
 80057c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057c8:	f7fb fa0e 	bl	8000be8 <__aeabi_uldivmod>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <UART_SetConfig+0x4e4>)
 80057d2:	fba3 1302 	umull	r1, r3, r3, r2
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	2164      	movs	r1, #100	; 0x64
 80057da:	fb01 f303 	mul.w	r3, r1, r3
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	3332      	adds	r3, #50	; 0x32
 80057e4:	4a08      	ldr	r2, [pc, #32]	; (8005808 <UART_SetConfig+0x4e4>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	f003 020f 	and.w	r2, r3, #15
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4422      	add	r2, r4
 80057f8:	609a      	str	r2, [r3, #8]
}
 80057fa:	bf00      	nop
 80057fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005800:	46bd      	mov	sp, r7
 8005802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005806:	bf00      	nop
 8005808:	51eb851f 	.word	0x51eb851f

0800580c <__errno>:
 800580c:	4b01      	ldr	r3, [pc, #4]	; (8005814 <__errno+0x8>)
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	2000000c 	.word	0x2000000c

08005818 <__libc_init_array>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	4d0d      	ldr	r5, [pc, #52]	; (8005850 <__libc_init_array+0x38>)
 800581c:	4c0d      	ldr	r4, [pc, #52]	; (8005854 <__libc_init_array+0x3c>)
 800581e:	1b64      	subs	r4, r4, r5
 8005820:	10a4      	asrs	r4, r4, #2
 8005822:	2600      	movs	r6, #0
 8005824:	42a6      	cmp	r6, r4
 8005826:	d109      	bne.n	800583c <__libc_init_array+0x24>
 8005828:	4d0b      	ldr	r5, [pc, #44]	; (8005858 <__libc_init_array+0x40>)
 800582a:	4c0c      	ldr	r4, [pc, #48]	; (800585c <__libc_init_array+0x44>)
 800582c:	f002 fd38 	bl	80082a0 <_init>
 8005830:	1b64      	subs	r4, r4, r5
 8005832:	10a4      	asrs	r4, r4, #2
 8005834:	2600      	movs	r6, #0
 8005836:	42a6      	cmp	r6, r4
 8005838:	d105      	bne.n	8005846 <__libc_init_array+0x2e>
 800583a:	bd70      	pop	{r4, r5, r6, pc}
 800583c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005840:	4798      	blx	r3
 8005842:	3601      	adds	r6, #1
 8005844:	e7ee      	b.n	8005824 <__libc_init_array+0xc>
 8005846:	f855 3b04 	ldr.w	r3, [r5], #4
 800584a:	4798      	blx	r3
 800584c:	3601      	adds	r6, #1
 800584e:	e7f2      	b.n	8005836 <__libc_init_array+0x1e>
 8005850:	080086b4 	.word	0x080086b4
 8005854:	080086b4 	.word	0x080086b4
 8005858:	080086b4 	.word	0x080086b4
 800585c:	080086b8 	.word	0x080086b8

08005860 <memset>:
 8005860:	4402      	add	r2, r0
 8005862:	4603      	mov	r3, r0
 8005864:	4293      	cmp	r3, r2
 8005866:	d100      	bne.n	800586a <memset+0xa>
 8005868:	4770      	bx	lr
 800586a:	f803 1b01 	strb.w	r1, [r3], #1
 800586e:	e7f9      	b.n	8005864 <memset+0x4>

08005870 <__cvt>:
 8005870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005874:	ec55 4b10 	vmov	r4, r5, d0
 8005878:	2d00      	cmp	r5, #0
 800587a:	460e      	mov	r6, r1
 800587c:	4619      	mov	r1, r3
 800587e:	462b      	mov	r3, r5
 8005880:	bfbb      	ittet	lt
 8005882:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005886:	461d      	movlt	r5, r3
 8005888:	2300      	movge	r3, #0
 800588a:	232d      	movlt	r3, #45	; 0x2d
 800588c:	700b      	strb	r3, [r1, #0]
 800588e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005890:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005894:	4691      	mov	r9, r2
 8005896:	f023 0820 	bic.w	r8, r3, #32
 800589a:	bfbc      	itt	lt
 800589c:	4622      	movlt	r2, r4
 800589e:	4614      	movlt	r4, r2
 80058a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058a4:	d005      	beq.n	80058b2 <__cvt+0x42>
 80058a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058aa:	d100      	bne.n	80058ae <__cvt+0x3e>
 80058ac:	3601      	adds	r6, #1
 80058ae:	2102      	movs	r1, #2
 80058b0:	e000      	b.n	80058b4 <__cvt+0x44>
 80058b2:	2103      	movs	r1, #3
 80058b4:	ab03      	add	r3, sp, #12
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	ab02      	add	r3, sp, #8
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	ec45 4b10 	vmov	d0, r4, r5
 80058c0:	4653      	mov	r3, sl
 80058c2:	4632      	mov	r2, r6
 80058c4:	f000 fccc 	bl	8006260 <_dtoa_r>
 80058c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058cc:	4607      	mov	r7, r0
 80058ce:	d102      	bne.n	80058d6 <__cvt+0x66>
 80058d0:	f019 0f01 	tst.w	r9, #1
 80058d4:	d022      	beq.n	800591c <__cvt+0xac>
 80058d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058da:	eb07 0906 	add.w	r9, r7, r6
 80058de:	d110      	bne.n	8005902 <__cvt+0x92>
 80058e0:	783b      	ldrb	r3, [r7, #0]
 80058e2:	2b30      	cmp	r3, #48	; 0x30
 80058e4:	d10a      	bne.n	80058fc <__cvt+0x8c>
 80058e6:	2200      	movs	r2, #0
 80058e8:	2300      	movs	r3, #0
 80058ea:	4620      	mov	r0, r4
 80058ec:	4629      	mov	r1, r5
 80058ee:	f7fb f90b 	bl	8000b08 <__aeabi_dcmpeq>
 80058f2:	b918      	cbnz	r0, 80058fc <__cvt+0x8c>
 80058f4:	f1c6 0601 	rsb	r6, r6, #1
 80058f8:	f8ca 6000 	str.w	r6, [sl]
 80058fc:	f8da 3000 	ldr.w	r3, [sl]
 8005900:	4499      	add	r9, r3
 8005902:	2200      	movs	r2, #0
 8005904:	2300      	movs	r3, #0
 8005906:	4620      	mov	r0, r4
 8005908:	4629      	mov	r1, r5
 800590a:	f7fb f8fd 	bl	8000b08 <__aeabi_dcmpeq>
 800590e:	b108      	cbz	r0, 8005914 <__cvt+0xa4>
 8005910:	f8cd 900c 	str.w	r9, [sp, #12]
 8005914:	2230      	movs	r2, #48	; 0x30
 8005916:	9b03      	ldr	r3, [sp, #12]
 8005918:	454b      	cmp	r3, r9
 800591a:	d307      	bcc.n	800592c <__cvt+0xbc>
 800591c:	9b03      	ldr	r3, [sp, #12]
 800591e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005920:	1bdb      	subs	r3, r3, r7
 8005922:	4638      	mov	r0, r7
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	b004      	add	sp, #16
 8005928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800592c:	1c59      	adds	r1, r3, #1
 800592e:	9103      	str	r1, [sp, #12]
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	e7f0      	b.n	8005916 <__cvt+0xa6>

08005934 <__exponent>:
 8005934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005936:	4603      	mov	r3, r0
 8005938:	2900      	cmp	r1, #0
 800593a:	bfb8      	it	lt
 800593c:	4249      	neglt	r1, r1
 800593e:	f803 2b02 	strb.w	r2, [r3], #2
 8005942:	bfb4      	ite	lt
 8005944:	222d      	movlt	r2, #45	; 0x2d
 8005946:	222b      	movge	r2, #43	; 0x2b
 8005948:	2909      	cmp	r1, #9
 800594a:	7042      	strb	r2, [r0, #1]
 800594c:	dd2a      	ble.n	80059a4 <__exponent+0x70>
 800594e:	f10d 0407 	add.w	r4, sp, #7
 8005952:	46a4      	mov	ip, r4
 8005954:	270a      	movs	r7, #10
 8005956:	46a6      	mov	lr, r4
 8005958:	460a      	mov	r2, r1
 800595a:	fb91 f6f7 	sdiv	r6, r1, r7
 800595e:	fb07 1516 	mls	r5, r7, r6, r1
 8005962:	3530      	adds	r5, #48	; 0x30
 8005964:	2a63      	cmp	r2, #99	; 0x63
 8005966:	f104 34ff 	add.w	r4, r4, #4294967295
 800596a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800596e:	4631      	mov	r1, r6
 8005970:	dcf1      	bgt.n	8005956 <__exponent+0x22>
 8005972:	3130      	adds	r1, #48	; 0x30
 8005974:	f1ae 0502 	sub.w	r5, lr, #2
 8005978:	f804 1c01 	strb.w	r1, [r4, #-1]
 800597c:	1c44      	adds	r4, r0, #1
 800597e:	4629      	mov	r1, r5
 8005980:	4561      	cmp	r1, ip
 8005982:	d30a      	bcc.n	800599a <__exponent+0x66>
 8005984:	f10d 0209 	add.w	r2, sp, #9
 8005988:	eba2 020e 	sub.w	r2, r2, lr
 800598c:	4565      	cmp	r5, ip
 800598e:	bf88      	it	hi
 8005990:	2200      	movhi	r2, #0
 8005992:	4413      	add	r3, r2
 8005994:	1a18      	subs	r0, r3, r0
 8005996:	b003      	add	sp, #12
 8005998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800599a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800599e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80059a2:	e7ed      	b.n	8005980 <__exponent+0x4c>
 80059a4:	2330      	movs	r3, #48	; 0x30
 80059a6:	3130      	adds	r1, #48	; 0x30
 80059a8:	7083      	strb	r3, [r0, #2]
 80059aa:	70c1      	strb	r1, [r0, #3]
 80059ac:	1d03      	adds	r3, r0, #4
 80059ae:	e7f1      	b.n	8005994 <__exponent+0x60>

080059b0 <_printf_float>:
 80059b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b4:	ed2d 8b02 	vpush	{d8}
 80059b8:	b08d      	sub	sp, #52	; 0x34
 80059ba:	460c      	mov	r4, r1
 80059bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059c0:	4616      	mov	r6, r2
 80059c2:	461f      	mov	r7, r3
 80059c4:	4605      	mov	r5, r0
 80059c6:	f001 fa39 	bl	8006e3c <_localeconv_r>
 80059ca:	f8d0 a000 	ldr.w	sl, [r0]
 80059ce:	4650      	mov	r0, sl
 80059d0:	f7fa fc1e 	bl	8000210 <strlen>
 80059d4:	2300      	movs	r3, #0
 80059d6:	930a      	str	r3, [sp, #40]	; 0x28
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	9305      	str	r3, [sp, #20]
 80059dc:	f8d8 3000 	ldr.w	r3, [r8]
 80059e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059e4:	3307      	adds	r3, #7
 80059e6:	f023 0307 	bic.w	r3, r3, #7
 80059ea:	f103 0208 	add.w	r2, r3, #8
 80059ee:	f8c8 2000 	str.w	r2, [r8]
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80059fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a02:	9307      	str	r3, [sp, #28]
 8005a04:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a08:	ee08 0a10 	vmov	s16, r0
 8005a0c:	4b9f      	ldr	r3, [pc, #636]	; (8005c8c <_printf_float+0x2dc>)
 8005a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a12:	f04f 32ff 	mov.w	r2, #4294967295
 8005a16:	f7fb f8a9 	bl	8000b6c <__aeabi_dcmpun>
 8005a1a:	bb88      	cbnz	r0, 8005a80 <_printf_float+0xd0>
 8005a1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a20:	4b9a      	ldr	r3, [pc, #616]	; (8005c8c <_printf_float+0x2dc>)
 8005a22:	f04f 32ff 	mov.w	r2, #4294967295
 8005a26:	f7fb f883 	bl	8000b30 <__aeabi_dcmple>
 8005a2a:	bb48      	cbnz	r0, 8005a80 <_printf_float+0xd0>
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2300      	movs	r3, #0
 8005a30:	4640      	mov	r0, r8
 8005a32:	4649      	mov	r1, r9
 8005a34:	f7fb f872 	bl	8000b1c <__aeabi_dcmplt>
 8005a38:	b110      	cbz	r0, 8005a40 <_printf_float+0x90>
 8005a3a:	232d      	movs	r3, #45	; 0x2d
 8005a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a40:	4b93      	ldr	r3, [pc, #588]	; (8005c90 <_printf_float+0x2e0>)
 8005a42:	4894      	ldr	r0, [pc, #592]	; (8005c94 <_printf_float+0x2e4>)
 8005a44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a48:	bf94      	ite	ls
 8005a4a:	4698      	movls	r8, r3
 8005a4c:	4680      	movhi	r8, r0
 8005a4e:	2303      	movs	r3, #3
 8005a50:	6123      	str	r3, [r4, #16]
 8005a52:	9b05      	ldr	r3, [sp, #20]
 8005a54:	f023 0204 	bic.w	r2, r3, #4
 8005a58:	6022      	str	r2, [r4, #0]
 8005a5a:	f04f 0900 	mov.w	r9, #0
 8005a5e:	9700      	str	r7, [sp, #0]
 8005a60:	4633      	mov	r3, r6
 8005a62:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a64:	4621      	mov	r1, r4
 8005a66:	4628      	mov	r0, r5
 8005a68:	f000 f9d8 	bl	8005e1c <_printf_common>
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	f040 8090 	bne.w	8005b92 <_printf_float+0x1e2>
 8005a72:	f04f 30ff 	mov.w	r0, #4294967295
 8005a76:	b00d      	add	sp, #52	; 0x34
 8005a78:	ecbd 8b02 	vpop	{d8}
 8005a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a80:	4642      	mov	r2, r8
 8005a82:	464b      	mov	r3, r9
 8005a84:	4640      	mov	r0, r8
 8005a86:	4649      	mov	r1, r9
 8005a88:	f7fb f870 	bl	8000b6c <__aeabi_dcmpun>
 8005a8c:	b140      	cbz	r0, 8005aa0 <_printf_float+0xf0>
 8005a8e:	464b      	mov	r3, r9
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bfbc      	itt	lt
 8005a94:	232d      	movlt	r3, #45	; 0x2d
 8005a96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a9a:	487f      	ldr	r0, [pc, #508]	; (8005c98 <_printf_float+0x2e8>)
 8005a9c:	4b7f      	ldr	r3, [pc, #508]	; (8005c9c <_printf_float+0x2ec>)
 8005a9e:	e7d1      	b.n	8005a44 <_printf_float+0x94>
 8005aa0:	6863      	ldr	r3, [r4, #4]
 8005aa2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005aa6:	9206      	str	r2, [sp, #24]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	d13f      	bne.n	8005b2c <_printf_float+0x17c>
 8005aac:	2306      	movs	r3, #6
 8005aae:	6063      	str	r3, [r4, #4]
 8005ab0:	9b05      	ldr	r3, [sp, #20]
 8005ab2:	6861      	ldr	r1, [r4, #4]
 8005ab4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9303      	str	r3, [sp, #12]
 8005abc:	ab0a      	add	r3, sp, #40	; 0x28
 8005abe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ac2:	ab09      	add	r3, sp, #36	; 0x24
 8005ac4:	ec49 8b10 	vmov	d0, r8, r9
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	6022      	str	r2, [r4, #0]
 8005acc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f7ff fecd 	bl	8005870 <__cvt>
 8005ad6:	9b06      	ldr	r3, [sp, #24]
 8005ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ada:	2b47      	cmp	r3, #71	; 0x47
 8005adc:	4680      	mov	r8, r0
 8005ade:	d108      	bne.n	8005af2 <_printf_float+0x142>
 8005ae0:	1cc8      	adds	r0, r1, #3
 8005ae2:	db02      	blt.n	8005aea <_printf_float+0x13a>
 8005ae4:	6863      	ldr	r3, [r4, #4]
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	dd41      	ble.n	8005b6e <_printf_float+0x1be>
 8005aea:	f1ab 0b02 	sub.w	fp, fp, #2
 8005aee:	fa5f fb8b 	uxtb.w	fp, fp
 8005af2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005af6:	d820      	bhi.n	8005b3a <_printf_float+0x18a>
 8005af8:	3901      	subs	r1, #1
 8005afa:	465a      	mov	r2, fp
 8005afc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b00:	9109      	str	r1, [sp, #36]	; 0x24
 8005b02:	f7ff ff17 	bl	8005934 <__exponent>
 8005b06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b08:	1813      	adds	r3, r2, r0
 8005b0a:	2a01      	cmp	r2, #1
 8005b0c:	4681      	mov	r9, r0
 8005b0e:	6123      	str	r3, [r4, #16]
 8005b10:	dc02      	bgt.n	8005b18 <_printf_float+0x168>
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	07d2      	lsls	r2, r2, #31
 8005b16:	d501      	bpl.n	8005b1c <_printf_float+0x16c>
 8005b18:	3301      	adds	r3, #1
 8005b1a:	6123      	str	r3, [r4, #16]
 8005b1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d09c      	beq.n	8005a5e <_printf_float+0xae>
 8005b24:	232d      	movs	r3, #45	; 0x2d
 8005b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b2a:	e798      	b.n	8005a5e <_printf_float+0xae>
 8005b2c:	9a06      	ldr	r2, [sp, #24]
 8005b2e:	2a47      	cmp	r2, #71	; 0x47
 8005b30:	d1be      	bne.n	8005ab0 <_printf_float+0x100>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1bc      	bne.n	8005ab0 <_printf_float+0x100>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e7b9      	b.n	8005aae <_printf_float+0xfe>
 8005b3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b3e:	d118      	bne.n	8005b72 <_printf_float+0x1c2>
 8005b40:	2900      	cmp	r1, #0
 8005b42:	6863      	ldr	r3, [r4, #4]
 8005b44:	dd0b      	ble.n	8005b5e <_printf_float+0x1ae>
 8005b46:	6121      	str	r1, [r4, #16]
 8005b48:	b913      	cbnz	r3, 8005b50 <_printf_float+0x1a0>
 8005b4a:	6822      	ldr	r2, [r4, #0]
 8005b4c:	07d0      	lsls	r0, r2, #31
 8005b4e:	d502      	bpl.n	8005b56 <_printf_float+0x1a6>
 8005b50:	3301      	adds	r3, #1
 8005b52:	440b      	add	r3, r1
 8005b54:	6123      	str	r3, [r4, #16]
 8005b56:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b58:	f04f 0900 	mov.w	r9, #0
 8005b5c:	e7de      	b.n	8005b1c <_printf_float+0x16c>
 8005b5e:	b913      	cbnz	r3, 8005b66 <_printf_float+0x1b6>
 8005b60:	6822      	ldr	r2, [r4, #0]
 8005b62:	07d2      	lsls	r2, r2, #31
 8005b64:	d501      	bpl.n	8005b6a <_printf_float+0x1ba>
 8005b66:	3302      	adds	r3, #2
 8005b68:	e7f4      	b.n	8005b54 <_printf_float+0x1a4>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e7f2      	b.n	8005b54 <_printf_float+0x1a4>
 8005b6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b74:	4299      	cmp	r1, r3
 8005b76:	db05      	blt.n	8005b84 <_printf_float+0x1d4>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	6121      	str	r1, [r4, #16]
 8005b7c:	07d8      	lsls	r0, r3, #31
 8005b7e:	d5ea      	bpl.n	8005b56 <_printf_float+0x1a6>
 8005b80:	1c4b      	adds	r3, r1, #1
 8005b82:	e7e7      	b.n	8005b54 <_printf_float+0x1a4>
 8005b84:	2900      	cmp	r1, #0
 8005b86:	bfd4      	ite	le
 8005b88:	f1c1 0202 	rsble	r2, r1, #2
 8005b8c:	2201      	movgt	r2, #1
 8005b8e:	4413      	add	r3, r2
 8005b90:	e7e0      	b.n	8005b54 <_printf_float+0x1a4>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	055a      	lsls	r2, r3, #21
 8005b96:	d407      	bmi.n	8005ba8 <_printf_float+0x1f8>
 8005b98:	6923      	ldr	r3, [r4, #16]
 8005b9a:	4642      	mov	r2, r8
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	47b8      	blx	r7
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	d12c      	bne.n	8005c00 <_printf_float+0x250>
 8005ba6:	e764      	b.n	8005a72 <_printf_float+0xc2>
 8005ba8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bac:	f240 80e0 	bls.w	8005d70 <_printf_float+0x3c0>
 8005bb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f7fa ffa6 	bl	8000b08 <__aeabi_dcmpeq>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d034      	beq.n	8005c2a <_printf_float+0x27a>
 8005bc0:	4a37      	ldr	r2, [pc, #220]	; (8005ca0 <_printf_float+0x2f0>)
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	47b8      	blx	r7
 8005bca:	3001      	adds	r0, #1
 8005bcc:	f43f af51 	beq.w	8005a72 <_printf_float+0xc2>
 8005bd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	db02      	blt.n	8005bde <_printf_float+0x22e>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	07d8      	lsls	r0, r3, #31
 8005bdc:	d510      	bpl.n	8005c00 <_printf_float+0x250>
 8005bde:	ee18 3a10 	vmov	r3, s16
 8005be2:	4652      	mov	r2, sl
 8005be4:	4631      	mov	r1, r6
 8005be6:	4628      	mov	r0, r5
 8005be8:	47b8      	blx	r7
 8005bea:	3001      	adds	r0, #1
 8005bec:	f43f af41 	beq.w	8005a72 <_printf_float+0xc2>
 8005bf0:	f04f 0800 	mov.w	r8, #0
 8005bf4:	f104 091a 	add.w	r9, r4, #26
 8005bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	4543      	cmp	r3, r8
 8005bfe:	dc09      	bgt.n	8005c14 <_printf_float+0x264>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	079b      	lsls	r3, r3, #30
 8005c04:	f100 8105 	bmi.w	8005e12 <_printf_float+0x462>
 8005c08:	68e0      	ldr	r0, [r4, #12]
 8005c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c0c:	4298      	cmp	r0, r3
 8005c0e:	bfb8      	it	lt
 8005c10:	4618      	movlt	r0, r3
 8005c12:	e730      	b.n	8005a76 <_printf_float+0xc6>
 8005c14:	2301      	movs	r3, #1
 8005c16:	464a      	mov	r2, r9
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	47b8      	blx	r7
 8005c1e:	3001      	adds	r0, #1
 8005c20:	f43f af27 	beq.w	8005a72 <_printf_float+0xc2>
 8005c24:	f108 0801 	add.w	r8, r8, #1
 8005c28:	e7e6      	b.n	8005bf8 <_printf_float+0x248>
 8005c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	dc39      	bgt.n	8005ca4 <_printf_float+0x2f4>
 8005c30:	4a1b      	ldr	r2, [pc, #108]	; (8005ca0 <_printf_float+0x2f0>)
 8005c32:	2301      	movs	r3, #1
 8005c34:	4631      	mov	r1, r6
 8005c36:	4628      	mov	r0, r5
 8005c38:	47b8      	blx	r7
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	f43f af19 	beq.w	8005a72 <_printf_float+0xc2>
 8005c40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c44:	4313      	orrs	r3, r2
 8005c46:	d102      	bne.n	8005c4e <_printf_float+0x29e>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	07d9      	lsls	r1, r3, #31
 8005c4c:	d5d8      	bpl.n	8005c00 <_printf_float+0x250>
 8005c4e:	ee18 3a10 	vmov	r3, s16
 8005c52:	4652      	mov	r2, sl
 8005c54:	4631      	mov	r1, r6
 8005c56:	4628      	mov	r0, r5
 8005c58:	47b8      	blx	r7
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	f43f af09 	beq.w	8005a72 <_printf_float+0xc2>
 8005c60:	f04f 0900 	mov.w	r9, #0
 8005c64:	f104 0a1a 	add.w	sl, r4, #26
 8005c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6a:	425b      	negs	r3, r3
 8005c6c:	454b      	cmp	r3, r9
 8005c6e:	dc01      	bgt.n	8005c74 <_printf_float+0x2c4>
 8005c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c72:	e792      	b.n	8005b9a <_printf_float+0x1ea>
 8005c74:	2301      	movs	r3, #1
 8005c76:	4652      	mov	r2, sl
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f43f aef7 	beq.w	8005a72 <_printf_float+0xc2>
 8005c84:	f109 0901 	add.w	r9, r9, #1
 8005c88:	e7ee      	b.n	8005c68 <_printf_float+0x2b8>
 8005c8a:	bf00      	nop
 8005c8c:	7fefffff 	.word	0x7fefffff
 8005c90:	080082d4 	.word	0x080082d4
 8005c94:	080082d8 	.word	0x080082d8
 8005c98:	080082e0 	.word	0x080082e0
 8005c9c:	080082dc 	.word	0x080082dc
 8005ca0:	080082e4 	.word	0x080082e4
 8005ca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	bfa8      	it	ge
 8005cac:	461a      	movge	r2, r3
 8005cae:	2a00      	cmp	r2, #0
 8005cb0:	4691      	mov	r9, r2
 8005cb2:	dc37      	bgt.n	8005d24 <_printf_float+0x374>
 8005cb4:	f04f 0b00 	mov.w	fp, #0
 8005cb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cbc:	f104 021a 	add.w	r2, r4, #26
 8005cc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cc2:	9305      	str	r3, [sp, #20]
 8005cc4:	eba3 0309 	sub.w	r3, r3, r9
 8005cc8:	455b      	cmp	r3, fp
 8005cca:	dc33      	bgt.n	8005d34 <_printf_float+0x384>
 8005ccc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	db3b      	blt.n	8005d4c <_printf_float+0x39c>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	07da      	lsls	r2, r3, #31
 8005cd8:	d438      	bmi.n	8005d4c <_printf_float+0x39c>
 8005cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cdc:	9a05      	ldr	r2, [sp, #20]
 8005cde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ce0:	1a9a      	subs	r2, r3, r2
 8005ce2:	eba3 0901 	sub.w	r9, r3, r1
 8005ce6:	4591      	cmp	r9, r2
 8005ce8:	bfa8      	it	ge
 8005cea:	4691      	movge	r9, r2
 8005cec:	f1b9 0f00 	cmp.w	r9, #0
 8005cf0:	dc35      	bgt.n	8005d5e <_printf_float+0x3ae>
 8005cf2:	f04f 0800 	mov.w	r8, #0
 8005cf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cfa:	f104 0a1a 	add.w	sl, r4, #26
 8005cfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	eba3 0309 	sub.w	r3, r3, r9
 8005d08:	4543      	cmp	r3, r8
 8005d0a:	f77f af79 	ble.w	8005c00 <_printf_float+0x250>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4652      	mov	r2, sl
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	f43f aeaa 	beq.w	8005a72 <_printf_float+0xc2>
 8005d1e:	f108 0801 	add.w	r8, r8, #1
 8005d22:	e7ec      	b.n	8005cfe <_printf_float+0x34e>
 8005d24:	4613      	mov	r3, r2
 8005d26:	4631      	mov	r1, r6
 8005d28:	4642      	mov	r2, r8
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	47b8      	blx	r7
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d1c0      	bne.n	8005cb4 <_printf_float+0x304>
 8005d32:	e69e      	b.n	8005a72 <_printf_float+0xc2>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4631      	mov	r1, r6
 8005d38:	4628      	mov	r0, r5
 8005d3a:	9205      	str	r2, [sp, #20]
 8005d3c:	47b8      	blx	r7
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f43f ae97 	beq.w	8005a72 <_printf_float+0xc2>
 8005d44:	9a05      	ldr	r2, [sp, #20]
 8005d46:	f10b 0b01 	add.w	fp, fp, #1
 8005d4a:	e7b9      	b.n	8005cc0 <_printf_float+0x310>
 8005d4c:	ee18 3a10 	vmov	r3, s16
 8005d50:	4652      	mov	r2, sl
 8005d52:	4631      	mov	r1, r6
 8005d54:	4628      	mov	r0, r5
 8005d56:	47b8      	blx	r7
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d1be      	bne.n	8005cda <_printf_float+0x32a>
 8005d5c:	e689      	b.n	8005a72 <_printf_float+0xc2>
 8005d5e:	9a05      	ldr	r2, [sp, #20]
 8005d60:	464b      	mov	r3, r9
 8005d62:	4442      	add	r2, r8
 8005d64:	4631      	mov	r1, r6
 8005d66:	4628      	mov	r0, r5
 8005d68:	47b8      	blx	r7
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d1c1      	bne.n	8005cf2 <_printf_float+0x342>
 8005d6e:	e680      	b.n	8005a72 <_printf_float+0xc2>
 8005d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d72:	2a01      	cmp	r2, #1
 8005d74:	dc01      	bgt.n	8005d7a <_printf_float+0x3ca>
 8005d76:	07db      	lsls	r3, r3, #31
 8005d78:	d538      	bpl.n	8005dec <_printf_float+0x43c>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	f43f ae74 	beq.w	8005a72 <_printf_float+0xc2>
 8005d8a:	ee18 3a10 	vmov	r3, s16
 8005d8e:	4652      	mov	r2, sl
 8005d90:	4631      	mov	r1, r6
 8005d92:	4628      	mov	r0, r5
 8005d94:	47b8      	blx	r7
 8005d96:	3001      	adds	r0, #1
 8005d98:	f43f ae6b 	beq.w	8005a72 <_printf_float+0xc2>
 8005d9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005da0:	2200      	movs	r2, #0
 8005da2:	2300      	movs	r3, #0
 8005da4:	f7fa feb0 	bl	8000b08 <__aeabi_dcmpeq>
 8005da8:	b9d8      	cbnz	r0, 8005de2 <_printf_float+0x432>
 8005daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dac:	f108 0201 	add.w	r2, r8, #1
 8005db0:	3b01      	subs	r3, #1
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	d10e      	bne.n	8005dda <_printf_float+0x42a>
 8005dbc:	e659      	b.n	8005a72 <_printf_float+0xc2>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	4652      	mov	r2, sl
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	47b8      	blx	r7
 8005dc8:	3001      	adds	r0, #1
 8005dca:	f43f ae52 	beq.w	8005a72 <_printf_float+0xc2>
 8005dce:	f108 0801 	add.w	r8, r8, #1
 8005dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	4543      	cmp	r3, r8
 8005dd8:	dcf1      	bgt.n	8005dbe <_printf_float+0x40e>
 8005dda:	464b      	mov	r3, r9
 8005ddc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005de0:	e6dc      	b.n	8005b9c <_printf_float+0x1ec>
 8005de2:	f04f 0800 	mov.w	r8, #0
 8005de6:	f104 0a1a 	add.w	sl, r4, #26
 8005dea:	e7f2      	b.n	8005dd2 <_printf_float+0x422>
 8005dec:	2301      	movs	r3, #1
 8005dee:	4642      	mov	r2, r8
 8005df0:	e7df      	b.n	8005db2 <_printf_float+0x402>
 8005df2:	2301      	movs	r3, #1
 8005df4:	464a      	mov	r2, r9
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	f43f ae38 	beq.w	8005a72 <_printf_float+0xc2>
 8005e02:	f108 0801 	add.w	r8, r8, #1
 8005e06:	68e3      	ldr	r3, [r4, #12]
 8005e08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e0a:	1a5b      	subs	r3, r3, r1
 8005e0c:	4543      	cmp	r3, r8
 8005e0e:	dcf0      	bgt.n	8005df2 <_printf_float+0x442>
 8005e10:	e6fa      	b.n	8005c08 <_printf_float+0x258>
 8005e12:	f04f 0800 	mov.w	r8, #0
 8005e16:	f104 0919 	add.w	r9, r4, #25
 8005e1a:	e7f4      	b.n	8005e06 <_printf_float+0x456>

08005e1c <_printf_common>:
 8005e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e20:	4616      	mov	r6, r2
 8005e22:	4699      	mov	r9, r3
 8005e24:	688a      	ldr	r2, [r1, #8]
 8005e26:	690b      	ldr	r3, [r1, #16]
 8005e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	bfb8      	it	lt
 8005e30:	4613      	movlt	r3, r2
 8005e32:	6033      	str	r3, [r6, #0]
 8005e34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e38:	4607      	mov	r7, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	b10a      	cbz	r2, 8005e42 <_printf_common+0x26>
 8005e3e:	3301      	adds	r3, #1
 8005e40:	6033      	str	r3, [r6, #0]
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	0699      	lsls	r1, r3, #26
 8005e46:	bf42      	ittt	mi
 8005e48:	6833      	ldrmi	r3, [r6, #0]
 8005e4a:	3302      	addmi	r3, #2
 8005e4c:	6033      	strmi	r3, [r6, #0]
 8005e4e:	6825      	ldr	r5, [r4, #0]
 8005e50:	f015 0506 	ands.w	r5, r5, #6
 8005e54:	d106      	bne.n	8005e64 <_printf_common+0x48>
 8005e56:	f104 0a19 	add.w	sl, r4, #25
 8005e5a:	68e3      	ldr	r3, [r4, #12]
 8005e5c:	6832      	ldr	r2, [r6, #0]
 8005e5e:	1a9b      	subs	r3, r3, r2
 8005e60:	42ab      	cmp	r3, r5
 8005e62:	dc26      	bgt.n	8005eb2 <_printf_common+0x96>
 8005e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e68:	1e13      	subs	r3, r2, #0
 8005e6a:	6822      	ldr	r2, [r4, #0]
 8005e6c:	bf18      	it	ne
 8005e6e:	2301      	movne	r3, #1
 8005e70:	0692      	lsls	r2, r2, #26
 8005e72:	d42b      	bmi.n	8005ecc <_printf_common+0xb0>
 8005e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e78:	4649      	mov	r1, r9
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	47c0      	blx	r8
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d01e      	beq.n	8005ec0 <_printf_common+0xa4>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	68e5      	ldr	r5, [r4, #12]
 8005e86:	6832      	ldr	r2, [r6, #0]
 8005e88:	f003 0306 	and.w	r3, r3, #6
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	bf08      	it	eq
 8005e90:	1aad      	subeq	r5, r5, r2
 8005e92:	68a3      	ldr	r3, [r4, #8]
 8005e94:	6922      	ldr	r2, [r4, #16]
 8005e96:	bf0c      	ite	eq
 8005e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e9c:	2500      	movne	r5, #0
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	bfc4      	itt	gt
 8005ea2:	1a9b      	subgt	r3, r3, r2
 8005ea4:	18ed      	addgt	r5, r5, r3
 8005ea6:	2600      	movs	r6, #0
 8005ea8:	341a      	adds	r4, #26
 8005eaa:	42b5      	cmp	r5, r6
 8005eac:	d11a      	bne.n	8005ee4 <_printf_common+0xc8>
 8005eae:	2000      	movs	r0, #0
 8005eb0:	e008      	b.n	8005ec4 <_printf_common+0xa8>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	4638      	mov	r0, r7
 8005eba:	47c0      	blx	r8
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d103      	bne.n	8005ec8 <_printf_common+0xac>
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec8:	3501      	adds	r5, #1
 8005eca:	e7c6      	b.n	8005e5a <_printf_common+0x3e>
 8005ecc:	18e1      	adds	r1, r4, r3
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	2030      	movs	r0, #48	; 0x30
 8005ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ed6:	4422      	add	r2, r4
 8005ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005edc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	e7c7      	b.n	8005e74 <_printf_common+0x58>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	4649      	mov	r1, r9
 8005eea:	4638      	mov	r0, r7
 8005eec:	47c0      	blx	r8
 8005eee:	3001      	adds	r0, #1
 8005ef0:	d0e6      	beq.n	8005ec0 <_printf_common+0xa4>
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7d9      	b.n	8005eaa <_printf_common+0x8e>
	...

08005ef8 <_printf_i>:
 8005ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005efc:	7e0f      	ldrb	r7, [r1, #24]
 8005efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f00:	2f78      	cmp	r7, #120	; 0x78
 8005f02:	4691      	mov	r9, r2
 8005f04:	4680      	mov	r8, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	469a      	mov	sl, r3
 8005f0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f0e:	d807      	bhi.n	8005f20 <_printf_i+0x28>
 8005f10:	2f62      	cmp	r7, #98	; 0x62
 8005f12:	d80a      	bhi.n	8005f2a <_printf_i+0x32>
 8005f14:	2f00      	cmp	r7, #0
 8005f16:	f000 80d8 	beq.w	80060ca <_printf_i+0x1d2>
 8005f1a:	2f58      	cmp	r7, #88	; 0x58
 8005f1c:	f000 80a3 	beq.w	8006066 <_printf_i+0x16e>
 8005f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f28:	e03a      	b.n	8005fa0 <_printf_i+0xa8>
 8005f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f2e:	2b15      	cmp	r3, #21
 8005f30:	d8f6      	bhi.n	8005f20 <_printf_i+0x28>
 8005f32:	a101      	add	r1, pc, #4	; (adr r1, 8005f38 <_printf_i+0x40>)
 8005f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f38:	08005f91 	.word	0x08005f91
 8005f3c:	08005fa5 	.word	0x08005fa5
 8005f40:	08005f21 	.word	0x08005f21
 8005f44:	08005f21 	.word	0x08005f21
 8005f48:	08005f21 	.word	0x08005f21
 8005f4c:	08005f21 	.word	0x08005f21
 8005f50:	08005fa5 	.word	0x08005fa5
 8005f54:	08005f21 	.word	0x08005f21
 8005f58:	08005f21 	.word	0x08005f21
 8005f5c:	08005f21 	.word	0x08005f21
 8005f60:	08005f21 	.word	0x08005f21
 8005f64:	080060b1 	.word	0x080060b1
 8005f68:	08005fd5 	.word	0x08005fd5
 8005f6c:	08006093 	.word	0x08006093
 8005f70:	08005f21 	.word	0x08005f21
 8005f74:	08005f21 	.word	0x08005f21
 8005f78:	080060d3 	.word	0x080060d3
 8005f7c:	08005f21 	.word	0x08005f21
 8005f80:	08005fd5 	.word	0x08005fd5
 8005f84:	08005f21 	.word	0x08005f21
 8005f88:	08005f21 	.word	0x08005f21
 8005f8c:	0800609b 	.word	0x0800609b
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	1d1a      	adds	r2, r3, #4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	602a      	str	r2, [r5, #0]
 8005f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0a3      	b.n	80060ec <_printf_i+0x1f4>
 8005fa4:	6820      	ldr	r0, [r4, #0]
 8005fa6:	6829      	ldr	r1, [r5, #0]
 8005fa8:	0606      	lsls	r6, r0, #24
 8005faa:	f101 0304 	add.w	r3, r1, #4
 8005fae:	d50a      	bpl.n	8005fc6 <_printf_i+0xce>
 8005fb0:	680e      	ldr	r6, [r1, #0]
 8005fb2:	602b      	str	r3, [r5, #0]
 8005fb4:	2e00      	cmp	r6, #0
 8005fb6:	da03      	bge.n	8005fc0 <_printf_i+0xc8>
 8005fb8:	232d      	movs	r3, #45	; 0x2d
 8005fba:	4276      	negs	r6, r6
 8005fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fc0:	485e      	ldr	r0, [pc, #376]	; (800613c <_printf_i+0x244>)
 8005fc2:	230a      	movs	r3, #10
 8005fc4:	e019      	b.n	8005ffa <_printf_i+0x102>
 8005fc6:	680e      	ldr	r6, [r1, #0]
 8005fc8:	602b      	str	r3, [r5, #0]
 8005fca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fce:	bf18      	it	ne
 8005fd0:	b236      	sxthne	r6, r6
 8005fd2:	e7ef      	b.n	8005fb4 <_printf_i+0xbc>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	6820      	ldr	r0, [r4, #0]
 8005fd8:	1d19      	adds	r1, r3, #4
 8005fda:	6029      	str	r1, [r5, #0]
 8005fdc:	0601      	lsls	r1, r0, #24
 8005fde:	d501      	bpl.n	8005fe4 <_printf_i+0xec>
 8005fe0:	681e      	ldr	r6, [r3, #0]
 8005fe2:	e002      	b.n	8005fea <_printf_i+0xf2>
 8005fe4:	0646      	lsls	r6, r0, #25
 8005fe6:	d5fb      	bpl.n	8005fe0 <_printf_i+0xe8>
 8005fe8:	881e      	ldrh	r6, [r3, #0]
 8005fea:	4854      	ldr	r0, [pc, #336]	; (800613c <_printf_i+0x244>)
 8005fec:	2f6f      	cmp	r7, #111	; 0x6f
 8005fee:	bf0c      	ite	eq
 8005ff0:	2308      	moveq	r3, #8
 8005ff2:	230a      	movne	r3, #10
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ffa:	6865      	ldr	r5, [r4, #4]
 8005ffc:	60a5      	str	r5, [r4, #8]
 8005ffe:	2d00      	cmp	r5, #0
 8006000:	bfa2      	ittt	ge
 8006002:	6821      	ldrge	r1, [r4, #0]
 8006004:	f021 0104 	bicge.w	r1, r1, #4
 8006008:	6021      	strge	r1, [r4, #0]
 800600a:	b90e      	cbnz	r6, 8006010 <_printf_i+0x118>
 800600c:	2d00      	cmp	r5, #0
 800600e:	d04d      	beq.n	80060ac <_printf_i+0x1b4>
 8006010:	4615      	mov	r5, r2
 8006012:	fbb6 f1f3 	udiv	r1, r6, r3
 8006016:	fb03 6711 	mls	r7, r3, r1, r6
 800601a:	5dc7      	ldrb	r7, [r0, r7]
 800601c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006020:	4637      	mov	r7, r6
 8006022:	42bb      	cmp	r3, r7
 8006024:	460e      	mov	r6, r1
 8006026:	d9f4      	bls.n	8006012 <_printf_i+0x11a>
 8006028:	2b08      	cmp	r3, #8
 800602a:	d10b      	bne.n	8006044 <_printf_i+0x14c>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	07de      	lsls	r6, r3, #31
 8006030:	d508      	bpl.n	8006044 <_printf_i+0x14c>
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	6861      	ldr	r1, [r4, #4]
 8006036:	4299      	cmp	r1, r3
 8006038:	bfde      	ittt	le
 800603a:	2330      	movle	r3, #48	; 0x30
 800603c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006040:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006044:	1b52      	subs	r2, r2, r5
 8006046:	6122      	str	r2, [r4, #16]
 8006048:	f8cd a000 	str.w	sl, [sp]
 800604c:	464b      	mov	r3, r9
 800604e:	aa03      	add	r2, sp, #12
 8006050:	4621      	mov	r1, r4
 8006052:	4640      	mov	r0, r8
 8006054:	f7ff fee2 	bl	8005e1c <_printf_common>
 8006058:	3001      	adds	r0, #1
 800605a:	d14c      	bne.n	80060f6 <_printf_i+0x1fe>
 800605c:	f04f 30ff 	mov.w	r0, #4294967295
 8006060:	b004      	add	sp, #16
 8006062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006066:	4835      	ldr	r0, [pc, #212]	; (800613c <_printf_i+0x244>)
 8006068:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800606c:	6829      	ldr	r1, [r5, #0]
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	f851 6b04 	ldr.w	r6, [r1], #4
 8006074:	6029      	str	r1, [r5, #0]
 8006076:	061d      	lsls	r5, r3, #24
 8006078:	d514      	bpl.n	80060a4 <_printf_i+0x1ac>
 800607a:	07df      	lsls	r7, r3, #31
 800607c:	bf44      	itt	mi
 800607e:	f043 0320 	orrmi.w	r3, r3, #32
 8006082:	6023      	strmi	r3, [r4, #0]
 8006084:	b91e      	cbnz	r6, 800608e <_printf_i+0x196>
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	f023 0320 	bic.w	r3, r3, #32
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	2310      	movs	r3, #16
 8006090:	e7b0      	b.n	8005ff4 <_printf_i+0xfc>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	f043 0320 	orr.w	r3, r3, #32
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	2378      	movs	r3, #120	; 0x78
 800609c:	4828      	ldr	r0, [pc, #160]	; (8006140 <_printf_i+0x248>)
 800609e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060a2:	e7e3      	b.n	800606c <_printf_i+0x174>
 80060a4:	0659      	lsls	r1, r3, #25
 80060a6:	bf48      	it	mi
 80060a8:	b2b6      	uxthmi	r6, r6
 80060aa:	e7e6      	b.n	800607a <_printf_i+0x182>
 80060ac:	4615      	mov	r5, r2
 80060ae:	e7bb      	b.n	8006028 <_printf_i+0x130>
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	6826      	ldr	r6, [r4, #0]
 80060b4:	6961      	ldr	r1, [r4, #20]
 80060b6:	1d18      	adds	r0, r3, #4
 80060b8:	6028      	str	r0, [r5, #0]
 80060ba:	0635      	lsls	r5, r6, #24
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	d501      	bpl.n	80060c4 <_printf_i+0x1cc>
 80060c0:	6019      	str	r1, [r3, #0]
 80060c2:	e002      	b.n	80060ca <_printf_i+0x1d2>
 80060c4:	0670      	lsls	r0, r6, #25
 80060c6:	d5fb      	bpl.n	80060c0 <_printf_i+0x1c8>
 80060c8:	8019      	strh	r1, [r3, #0]
 80060ca:	2300      	movs	r3, #0
 80060cc:	6123      	str	r3, [r4, #16]
 80060ce:	4615      	mov	r5, r2
 80060d0:	e7ba      	b.n	8006048 <_printf_i+0x150>
 80060d2:	682b      	ldr	r3, [r5, #0]
 80060d4:	1d1a      	adds	r2, r3, #4
 80060d6:	602a      	str	r2, [r5, #0]
 80060d8:	681d      	ldr	r5, [r3, #0]
 80060da:	6862      	ldr	r2, [r4, #4]
 80060dc:	2100      	movs	r1, #0
 80060de:	4628      	mov	r0, r5
 80060e0:	f7fa f89e 	bl	8000220 <memchr>
 80060e4:	b108      	cbz	r0, 80060ea <_printf_i+0x1f2>
 80060e6:	1b40      	subs	r0, r0, r5
 80060e8:	6060      	str	r0, [r4, #4]
 80060ea:	6863      	ldr	r3, [r4, #4]
 80060ec:	6123      	str	r3, [r4, #16]
 80060ee:	2300      	movs	r3, #0
 80060f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f4:	e7a8      	b.n	8006048 <_printf_i+0x150>
 80060f6:	6923      	ldr	r3, [r4, #16]
 80060f8:	462a      	mov	r2, r5
 80060fa:	4649      	mov	r1, r9
 80060fc:	4640      	mov	r0, r8
 80060fe:	47d0      	blx	sl
 8006100:	3001      	adds	r0, #1
 8006102:	d0ab      	beq.n	800605c <_printf_i+0x164>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	079b      	lsls	r3, r3, #30
 8006108:	d413      	bmi.n	8006132 <_printf_i+0x23a>
 800610a:	68e0      	ldr	r0, [r4, #12]
 800610c:	9b03      	ldr	r3, [sp, #12]
 800610e:	4298      	cmp	r0, r3
 8006110:	bfb8      	it	lt
 8006112:	4618      	movlt	r0, r3
 8006114:	e7a4      	b.n	8006060 <_printf_i+0x168>
 8006116:	2301      	movs	r3, #1
 8006118:	4632      	mov	r2, r6
 800611a:	4649      	mov	r1, r9
 800611c:	4640      	mov	r0, r8
 800611e:	47d0      	blx	sl
 8006120:	3001      	adds	r0, #1
 8006122:	d09b      	beq.n	800605c <_printf_i+0x164>
 8006124:	3501      	adds	r5, #1
 8006126:	68e3      	ldr	r3, [r4, #12]
 8006128:	9903      	ldr	r1, [sp, #12]
 800612a:	1a5b      	subs	r3, r3, r1
 800612c:	42ab      	cmp	r3, r5
 800612e:	dcf2      	bgt.n	8006116 <_printf_i+0x21e>
 8006130:	e7eb      	b.n	800610a <_printf_i+0x212>
 8006132:	2500      	movs	r5, #0
 8006134:	f104 0619 	add.w	r6, r4, #25
 8006138:	e7f5      	b.n	8006126 <_printf_i+0x22e>
 800613a:	bf00      	nop
 800613c:	080082e6 	.word	0x080082e6
 8006140:	080082f7 	.word	0x080082f7

08006144 <quorem>:
 8006144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006148:	6903      	ldr	r3, [r0, #16]
 800614a:	690c      	ldr	r4, [r1, #16]
 800614c:	42a3      	cmp	r3, r4
 800614e:	4607      	mov	r7, r0
 8006150:	f2c0 8081 	blt.w	8006256 <quorem+0x112>
 8006154:	3c01      	subs	r4, #1
 8006156:	f101 0814 	add.w	r8, r1, #20
 800615a:	f100 0514 	add.w	r5, r0, #20
 800615e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006168:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800616c:	3301      	adds	r3, #1
 800616e:	429a      	cmp	r2, r3
 8006170:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006174:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006178:	fbb2 f6f3 	udiv	r6, r2, r3
 800617c:	d331      	bcc.n	80061e2 <quorem+0x9e>
 800617e:	f04f 0e00 	mov.w	lr, #0
 8006182:	4640      	mov	r0, r8
 8006184:	46ac      	mov	ip, r5
 8006186:	46f2      	mov	sl, lr
 8006188:	f850 2b04 	ldr.w	r2, [r0], #4
 800618c:	b293      	uxth	r3, r2
 800618e:	fb06 e303 	mla	r3, r6, r3, lr
 8006192:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006196:	b29b      	uxth	r3, r3
 8006198:	ebaa 0303 	sub.w	r3, sl, r3
 800619c:	f8dc a000 	ldr.w	sl, [ip]
 80061a0:	0c12      	lsrs	r2, r2, #16
 80061a2:	fa13 f38a 	uxtah	r3, r3, sl
 80061a6:	fb06 e202 	mla	r2, r6, r2, lr
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	9b00      	ldr	r3, [sp, #0]
 80061ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061b2:	b292      	uxth	r2, r2
 80061b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80061b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80061c0:	4581      	cmp	r9, r0
 80061c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061c6:	f84c 3b04 	str.w	r3, [ip], #4
 80061ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061ce:	d2db      	bcs.n	8006188 <quorem+0x44>
 80061d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80061d4:	b92b      	cbnz	r3, 80061e2 <quorem+0x9e>
 80061d6:	9b01      	ldr	r3, [sp, #4]
 80061d8:	3b04      	subs	r3, #4
 80061da:	429d      	cmp	r5, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	d32e      	bcc.n	800623e <quorem+0xfa>
 80061e0:	613c      	str	r4, [r7, #16]
 80061e2:	4638      	mov	r0, r7
 80061e4:	f001 f8c6 	bl	8007374 <__mcmp>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	db24      	blt.n	8006236 <quorem+0xf2>
 80061ec:	3601      	adds	r6, #1
 80061ee:	4628      	mov	r0, r5
 80061f0:	f04f 0c00 	mov.w	ip, #0
 80061f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80061f8:	f8d0 e000 	ldr.w	lr, [r0]
 80061fc:	b293      	uxth	r3, r2
 80061fe:	ebac 0303 	sub.w	r3, ip, r3
 8006202:	0c12      	lsrs	r2, r2, #16
 8006204:	fa13 f38e 	uxtah	r3, r3, lr
 8006208:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800620c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006210:	b29b      	uxth	r3, r3
 8006212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006216:	45c1      	cmp	r9, r8
 8006218:	f840 3b04 	str.w	r3, [r0], #4
 800621c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006220:	d2e8      	bcs.n	80061f4 <quorem+0xb0>
 8006222:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800622a:	b922      	cbnz	r2, 8006236 <quorem+0xf2>
 800622c:	3b04      	subs	r3, #4
 800622e:	429d      	cmp	r5, r3
 8006230:	461a      	mov	r2, r3
 8006232:	d30a      	bcc.n	800624a <quorem+0x106>
 8006234:	613c      	str	r4, [r7, #16]
 8006236:	4630      	mov	r0, r6
 8006238:	b003      	add	sp, #12
 800623a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623e:	6812      	ldr	r2, [r2, #0]
 8006240:	3b04      	subs	r3, #4
 8006242:	2a00      	cmp	r2, #0
 8006244:	d1cc      	bne.n	80061e0 <quorem+0x9c>
 8006246:	3c01      	subs	r4, #1
 8006248:	e7c7      	b.n	80061da <quorem+0x96>
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	3b04      	subs	r3, #4
 800624e:	2a00      	cmp	r2, #0
 8006250:	d1f0      	bne.n	8006234 <quorem+0xf0>
 8006252:	3c01      	subs	r4, #1
 8006254:	e7eb      	b.n	800622e <quorem+0xea>
 8006256:	2000      	movs	r0, #0
 8006258:	e7ee      	b.n	8006238 <quorem+0xf4>
 800625a:	0000      	movs	r0, r0
 800625c:	0000      	movs	r0, r0
	...

08006260 <_dtoa_r>:
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	ed2d 8b04 	vpush	{d8-d9}
 8006268:	ec57 6b10 	vmov	r6, r7, d0
 800626c:	b093      	sub	sp, #76	; 0x4c
 800626e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006270:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006274:	9106      	str	r1, [sp, #24]
 8006276:	ee10 aa10 	vmov	sl, s0
 800627a:	4604      	mov	r4, r0
 800627c:	9209      	str	r2, [sp, #36]	; 0x24
 800627e:	930c      	str	r3, [sp, #48]	; 0x30
 8006280:	46bb      	mov	fp, r7
 8006282:	b975      	cbnz	r5, 80062a2 <_dtoa_r+0x42>
 8006284:	2010      	movs	r0, #16
 8006286:	f000 fddd 	bl	8006e44 <malloc>
 800628a:	4602      	mov	r2, r0
 800628c:	6260      	str	r0, [r4, #36]	; 0x24
 800628e:	b920      	cbnz	r0, 800629a <_dtoa_r+0x3a>
 8006290:	4ba7      	ldr	r3, [pc, #668]	; (8006530 <_dtoa_r+0x2d0>)
 8006292:	21ea      	movs	r1, #234	; 0xea
 8006294:	48a7      	ldr	r0, [pc, #668]	; (8006534 <_dtoa_r+0x2d4>)
 8006296:	f001 fa75 	bl	8007784 <__assert_func>
 800629a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800629e:	6005      	str	r5, [r0, #0]
 80062a0:	60c5      	str	r5, [r0, #12]
 80062a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062a4:	6819      	ldr	r1, [r3, #0]
 80062a6:	b151      	cbz	r1, 80062be <_dtoa_r+0x5e>
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	604a      	str	r2, [r1, #4]
 80062ac:	2301      	movs	r3, #1
 80062ae:	4093      	lsls	r3, r2
 80062b0:	608b      	str	r3, [r1, #8]
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 fe1c 	bl	8006ef0 <_Bfree>
 80062b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	1e3b      	subs	r3, r7, #0
 80062c0:	bfaa      	itet	ge
 80062c2:	2300      	movge	r3, #0
 80062c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80062c8:	f8c8 3000 	strge.w	r3, [r8]
 80062cc:	4b9a      	ldr	r3, [pc, #616]	; (8006538 <_dtoa_r+0x2d8>)
 80062ce:	bfbc      	itt	lt
 80062d0:	2201      	movlt	r2, #1
 80062d2:	f8c8 2000 	strlt.w	r2, [r8]
 80062d6:	ea33 030b 	bics.w	r3, r3, fp
 80062da:	d11b      	bne.n	8006314 <_dtoa_r+0xb4>
 80062dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062de:	f242 730f 	movw	r3, #9999	; 0x270f
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062e8:	4333      	orrs	r3, r6
 80062ea:	f000 8592 	beq.w	8006e12 <_dtoa_r+0xbb2>
 80062ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062f0:	b963      	cbnz	r3, 800630c <_dtoa_r+0xac>
 80062f2:	4b92      	ldr	r3, [pc, #584]	; (800653c <_dtoa_r+0x2dc>)
 80062f4:	e022      	b.n	800633c <_dtoa_r+0xdc>
 80062f6:	4b92      	ldr	r3, [pc, #584]	; (8006540 <_dtoa_r+0x2e0>)
 80062f8:	9301      	str	r3, [sp, #4]
 80062fa:	3308      	adds	r3, #8
 80062fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	9801      	ldr	r0, [sp, #4]
 8006302:	b013      	add	sp, #76	; 0x4c
 8006304:	ecbd 8b04 	vpop	{d8-d9}
 8006308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630c:	4b8b      	ldr	r3, [pc, #556]	; (800653c <_dtoa_r+0x2dc>)
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	3303      	adds	r3, #3
 8006312:	e7f3      	b.n	80062fc <_dtoa_r+0x9c>
 8006314:	2200      	movs	r2, #0
 8006316:	2300      	movs	r3, #0
 8006318:	4650      	mov	r0, sl
 800631a:	4659      	mov	r1, fp
 800631c:	f7fa fbf4 	bl	8000b08 <__aeabi_dcmpeq>
 8006320:	ec4b ab19 	vmov	d9, sl, fp
 8006324:	4680      	mov	r8, r0
 8006326:	b158      	cbz	r0, 8006340 <_dtoa_r+0xe0>
 8006328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800632a:	2301      	movs	r3, #1
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 856b 	beq.w	8006e0c <_dtoa_r+0xbac>
 8006336:	4883      	ldr	r0, [pc, #524]	; (8006544 <_dtoa_r+0x2e4>)
 8006338:	6018      	str	r0, [r3, #0]
 800633a:	1e43      	subs	r3, r0, #1
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	e7df      	b.n	8006300 <_dtoa_r+0xa0>
 8006340:	ec4b ab10 	vmov	d0, sl, fp
 8006344:	aa10      	add	r2, sp, #64	; 0x40
 8006346:	a911      	add	r1, sp, #68	; 0x44
 8006348:	4620      	mov	r0, r4
 800634a:	f001 f8b9 	bl	80074c0 <__d2b>
 800634e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006352:	ee08 0a10 	vmov	s16, r0
 8006356:	2d00      	cmp	r5, #0
 8006358:	f000 8084 	beq.w	8006464 <_dtoa_r+0x204>
 800635c:	ee19 3a90 	vmov	r3, s19
 8006360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006364:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006368:	4656      	mov	r6, sl
 800636a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800636e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006372:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006376:	4b74      	ldr	r3, [pc, #464]	; (8006548 <_dtoa_r+0x2e8>)
 8006378:	2200      	movs	r2, #0
 800637a:	4630      	mov	r0, r6
 800637c:	4639      	mov	r1, r7
 800637e:	f7f9 ffa3 	bl	80002c8 <__aeabi_dsub>
 8006382:	a365      	add	r3, pc, #404	; (adr r3, 8006518 <_dtoa_r+0x2b8>)
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f7fa f956 	bl	8000638 <__aeabi_dmul>
 800638c:	a364      	add	r3, pc, #400	; (adr r3, 8006520 <_dtoa_r+0x2c0>)
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f7f9 ff9b 	bl	80002cc <__adddf3>
 8006396:	4606      	mov	r6, r0
 8006398:	4628      	mov	r0, r5
 800639a:	460f      	mov	r7, r1
 800639c:	f7fa f8e2 	bl	8000564 <__aeabi_i2d>
 80063a0:	a361      	add	r3, pc, #388	; (adr r3, 8006528 <_dtoa_r+0x2c8>)
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f7fa f947 	bl	8000638 <__aeabi_dmul>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4630      	mov	r0, r6
 80063b0:	4639      	mov	r1, r7
 80063b2:	f7f9 ff8b 	bl	80002cc <__adddf3>
 80063b6:	4606      	mov	r6, r0
 80063b8:	460f      	mov	r7, r1
 80063ba:	f7fa fbed 	bl	8000b98 <__aeabi_d2iz>
 80063be:	2200      	movs	r2, #0
 80063c0:	9000      	str	r0, [sp, #0]
 80063c2:	2300      	movs	r3, #0
 80063c4:	4630      	mov	r0, r6
 80063c6:	4639      	mov	r1, r7
 80063c8:	f7fa fba8 	bl	8000b1c <__aeabi_dcmplt>
 80063cc:	b150      	cbz	r0, 80063e4 <_dtoa_r+0x184>
 80063ce:	9800      	ldr	r0, [sp, #0]
 80063d0:	f7fa f8c8 	bl	8000564 <__aeabi_i2d>
 80063d4:	4632      	mov	r2, r6
 80063d6:	463b      	mov	r3, r7
 80063d8:	f7fa fb96 	bl	8000b08 <__aeabi_dcmpeq>
 80063dc:	b910      	cbnz	r0, 80063e4 <_dtoa_r+0x184>
 80063de:	9b00      	ldr	r3, [sp, #0]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	9b00      	ldr	r3, [sp, #0]
 80063e6:	2b16      	cmp	r3, #22
 80063e8:	d85a      	bhi.n	80064a0 <_dtoa_r+0x240>
 80063ea:	9a00      	ldr	r2, [sp, #0]
 80063ec:	4b57      	ldr	r3, [pc, #348]	; (800654c <_dtoa_r+0x2ec>)
 80063ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	ec51 0b19 	vmov	r0, r1, d9
 80063fa:	f7fa fb8f 	bl	8000b1c <__aeabi_dcmplt>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d050      	beq.n	80064a4 <_dtoa_r+0x244>
 8006402:	9b00      	ldr	r3, [sp, #0]
 8006404:	3b01      	subs	r3, #1
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	2300      	movs	r3, #0
 800640a:	930b      	str	r3, [sp, #44]	; 0x2c
 800640c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800640e:	1b5d      	subs	r5, r3, r5
 8006410:	1e6b      	subs	r3, r5, #1
 8006412:	9305      	str	r3, [sp, #20]
 8006414:	bf45      	ittet	mi
 8006416:	f1c5 0301 	rsbmi	r3, r5, #1
 800641a:	9304      	strmi	r3, [sp, #16]
 800641c:	2300      	movpl	r3, #0
 800641e:	2300      	movmi	r3, #0
 8006420:	bf4c      	ite	mi
 8006422:	9305      	strmi	r3, [sp, #20]
 8006424:	9304      	strpl	r3, [sp, #16]
 8006426:	9b00      	ldr	r3, [sp, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	db3d      	blt.n	80064a8 <_dtoa_r+0x248>
 800642c:	9b05      	ldr	r3, [sp, #20]
 800642e:	9a00      	ldr	r2, [sp, #0]
 8006430:	920a      	str	r2, [sp, #40]	; 0x28
 8006432:	4413      	add	r3, r2
 8006434:	9305      	str	r3, [sp, #20]
 8006436:	2300      	movs	r3, #0
 8006438:	9307      	str	r3, [sp, #28]
 800643a:	9b06      	ldr	r3, [sp, #24]
 800643c:	2b09      	cmp	r3, #9
 800643e:	f200 8089 	bhi.w	8006554 <_dtoa_r+0x2f4>
 8006442:	2b05      	cmp	r3, #5
 8006444:	bfc4      	itt	gt
 8006446:	3b04      	subgt	r3, #4
 8006448:	9306      	strgt	r3, [sp, #24]
 800644a:	9b06      	ldr	r3, [sp, #24]
 800644c:	f1a3 0302 	sub.w	r3, r3, #2
 8006450:	bfcc      	ite	gt
 8006452:	2500      	movgt	r5, #0
 8006454:	2501      	movle	r5, #1
 8006456:	2b03      	cmp	r3, #3
 8006458:	f200 8087 	bhi.w	800656a <_dtoa_r+0x30a>
 800645c:	e8df f003 	tbb	[pc, r3]
 8006460:	59383a2d 	.word	0x59383a2d
 8006464:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006468:	441d      	add	r5, r3
 800646a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800646e:	2b20      	cmp	r3, #32
 8006470:	bfc1      	itttt	gt
 8006472:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006476:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800647a:	fa0b f303 	lslgt.w	r3, fp, r3
 800647e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006482:	bfda      	itte	le
 8006484:	f1c3 0320 	rsble	r3, r3, #32
 8006488:	fa06 f003 	lslle.w	r0, r6, r3
 800648c:	4318      	orrgt	r0, r3
 800648e:	f7fa f859 	bl	8000544 <__aeabi_ui2d>
 8006492:	2301      	movs	r3, #1
 8006494:	4606      	mov	r6, r0
 8006496:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800649a:	3d01      	subs	r5, #1
 800649c:	930e      	str	r3, [sp, #56]	; 0x38
 800649e:	e76a      	b.n	8006376 <_dtoa_r+0x116>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e7b2      	b.n	800640a <_dtoa_r+0x1aa>
 80064a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80064a6:	e7b1      	b.n	800640c <_dtoa_r+0x1ac>
 80064a8:	9b04      	ldr	r3, [sp, #16]
 80064aa:	9a00      	ldr	r2, [sp, #0]
 80064ac:	1a9b      	subs	r3, r3, r2
 80064ae:	9304      	str	r3, [sp, #16]
 80064b0:	4253      	negs	r3, r2
 80064b2:	9307      	str	r3, [sp, #28]
 80064b4:	2300      	movs	r3, #0
 80064b6:	930a      	str	r3, [sp, #40]	; 0x28
 80064b8:	e7bf      	b.n	800643a <_dtoa_r+0x1da>
 80064ba:	2300      	movs	r3, #0
 80064bc:	9308      	str	r3, [sp, #32]
 80064be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	dc55      	bgt.n	8006570 <_dtoa_r+0x310>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80064ca:	461a      	mov	r2, r3
 80064cc:	9209      	str	r2, [sp, #36]	; 0x24
 80064ce:	e00c      	b.n	80064ea <_dtoa_r+0x28a>
 80064d0:	2301      	movs	r3, #1
 80064d2:	e7f3      	b.n	80064bc <_dtoa_r+0x25c>
 80064d4:	2300      	movs	r3, #0
 80064d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d8:	9308      	str	r3, [sp, #32]
 80064da:	9b00      	ldr	r3, [sp, #0]
 80064dc:	4413      	add	r3, r2
 80064de:	9302      	str	r3, [sp, #8]
 80064e0:	3301      	adds	r3, #1
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	9303      	str	r3, [sp, #12]
 80064e6:	bfb8      	it	lt
 80064e8:	2301      	movlt	r3, #1
 80064ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80064ec:	2200      	movs	r2, #0
 80064ee:	6042      	str	r2, [r0, #4]
 80064f0:	2204      	movs	r2, #4
 80064f2:	f102 0614 	add.w	r6, r2, #20
 80064f6:	429e      	cmp	r6, r3
 80064f8:	6841      	ldr	r1, [r0, #4]
 80064fa:	d93d      	bls.n	8006578 <_dtoa_r+0x318>
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 fcb7 	bl	8006e70 <_Balloc>
 8006502:	9001      	str	r0, [sp, #4]
 8006504:	2800      	cmp	r0, #0
 8006506:	d13b      	bne.n	8006580 <_dtoa_r+0x320>
 8006508:	4b11      	ldr	r3, [pc, #68]	; (8006550 <_dtoa_r+0x2f0>)
 800650a:	4602      	mov	r2, r0
 800650c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006510:	e6c0      	b.n	8006294 <_dtoa_r+0x34>
 8006512:	2301      	movs	r3, #1
 8006514:	e7df      	b.n	80064d6 <_dtoa_r+0x276>
 8006516:	bf00      	nop
 8006518:	636f4361 	.word	0x636f4361
 800651c:	3fd287a7 	.word	0x3fd287a7
 8006520:	8b60c8b3 	.word	0x8b60c8b3
 8006524:	3fc68a28 	.word	0x3fc68a28
 8006528:	509f79fb 	.word	0x509f79fb
 800652c:	3fd34413 	.word	0x3fd34413
 8006530:	08008315 	.word	0x08008315
 8006534:	0800832c 	.word	0x0800832c
 8006538:	7ff00000 	.word	0x7ff00000
 800653c:	08008311 	.word	0x08008311
 8006540:	08008308 	.word	0x08008308
 8006544:	080082e5 	.word	0x080082e5
 8006548:	3ff80000 	.word	0x3ff80000
 800654c:	08008420 	.word	0x08008420
 8006550:	08008387 	.word	0x08008387
 8006554:	2501      	movs	r5, #1
 8006556:	2300      	movs	r3, #0
 8006558:	9306      	str	r3, [sp, #24]
 800655a:	9508      	str	r5, [sp, #32]
 800655c:	f04f 33ff 	mov.w	r3, #4294967295
 8006560:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006564:	2200      	movs	r2, #0
 8006566:	2312      	movs	r3, #18
 8006568:	e7b0      	b.n	80064cc <_dtoa_r+0x26c>
 800656a:	2301      	movs	r3, #1
 800656c:	9308      	str	r3, [sp, #32]
 800656e:	e7f5      	b.n	800655c <_dtoa_r+0x2fc>
 8006570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006572:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006576:	e7b8      	b.n	80064ea <_dtoa_r+0x28a>
 8006578:	3101      	adds	r1, #1
 800657a:	6041      	str	r1, [r0, #4]
 800657c:	0052      	lsls	r2, r2, #1
 800657e:	e7b8      	b.n	80064f2 <_dtoa_r+0x292>
 8006580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006582:	9a01      	ldr	r2, [sp, #4]
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	9b03      	ldr	r3, [sp, #12]
 8006588:	2b0e      	cmp	r3, #14
 800658a:	f200 809d 	bhi.w	80066c8 <_dtoa_r+0x468>
 800658e:	2d00      	cmp	r5, #0
 8006590:	f000 809a 	beq.w	80066c8 <_dtoa_r+0x468>
 8006594:	9b00      	ldr	r3, [sp, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	dd32      	ble.n	8006600 <_dtoa_r+0x3a0>
 800659a:	4ab7      	ldr	r2, [pc, #732]	; (8006878 <_dtoa_r+0x618>)
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065a8:	9b00      	ldr	r3, [sp, #0]
 80065aa:	05d8      	lsls	r0, r3, #23
 80065ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80065b0:	d516      	bpl.n	80065e0 <_dtoa_r+0x380>
 80065b2:	4bb2      	ldr	r3, [pc, #712]	; (800687c <_dtoa_r+0x61c>)
 80065b4:	ec51 0b19 	vmov	r0, r1, d9
 80065b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065bc:	f7fa f966 	bl	800088c <__aeabi_ddiv>
 80065c0:	f007 070f 	and.w	r7, r7, #15
 80065c4:	4682      	mov	sl, r0
 80065c6:	468b      	mov	fp, r1
 80065c8:	2503      	movs	r5, #3
 80065ca:	4eac      	ldr	r6, [pc, #688]	; (800687c <_dtoa_r+0x61c>)
 80065cc:	b957      	cbnz	r7, 80065e4 <_dtoa_r+0x384>
 80065ce:	4642      	mov	r2, r8
 80065d0:	464b      	mov	r3, r9
 80065d2:	4650      	mov	r0, sl
 80065d4:	4659      	mov	r1, fp
 80065d6:	f7fa f959 	bl	800088c <__aeabi_ddiv>
 80065da:	4682      	mov	sl, r0
 80065dc:	468b      	mov	fp, r1
 80065de:	e028      	b.n	8006632 <_dtoa_r+0x3d2>
 80065e0:	2502      	movs	r5, #2
 80065e2:	e7f2      	b.n	80065ca <_dtoa_r+0x36a>
 80065e4:	07f9      	lsls	r1, r7, #31
 80065e6:	d508      	bpl.n	80065fa <_dtoa_r+0x39a>
 80065e8:	4640      	mov	r0, r8
 80065ea:	4649      	mov	r1, r9
 80065ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065f0:	f7fa f822 	bl	8000638 <__aeabi_dmul>
 80065f4:	3501      	adds	r5, #1
 80065f6:	4680      	mov	r8, r0
 80065f8:	4689      	mov	r9, r1
 80065fa:	107f      	asrs	r7, r7, #1
 80065fc:	3608      	adds	r6, #8
 80065fe:	e7e5      	b.n	80065cc <_dtoa_r+0x36c>
 8006600:	f000 809b 	beq.w	800673a <_dtoa_r+0x4da>
 8006604:	9b00      	ldr	r3, [sp, #0]
 8006606:	4f9d      	ldr	r7, [pc, #628]	; (800687c <_dtoa_r+0x61c>)
 8006608:	425e      	negs	r6, r3
 800660a:	4b9b      	ldr	r3, [pc, #620]	; (8006878 <_dtoa_r+0x618>)
 800660c:	f006 020f 	and.w	r2, r6, #15
 8006610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	ec51 0b19 	vmov	r0, r1, d9
 800661c:	f7fa f80c 	bl	8000638 <__aeabi_dmul>
 8006620:	1136      	asrs	r6, r6, #4
 8006622:	4682      	mov	sl, r0
 8006624:	468b      	mov	fp, r1
 8006626:	2300      	movs	r3, #0
 8006628:	2502      	movs	r5, #2
 800662a:	2e00      	cmp	r6, #0
 800662c:	d17a      	bne.n	8006724 <_dtoa_r+0x4c4>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1d3      	bne.n	80065da <_dtoa_r+0x37a>
 8006632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 8082 	beq.w	800673e <_dtoa_r+0x4de>
 800663a:	4b91      	ldr	r3, [pc, #580]	; (8006880 <_dtoa_r+0x620>)
 800663c:	2200      	movs	r2, #0
 800663e:	4650      	mov	r0, sl
 8006640:	4659      	mov	r1, fp
 8006642:	f7fa fa6b 	bl	8000b1c <__aeabi_dcmplt>
 8006646:	2800      	cmp	r0, #0
 8006648:	d079      	beq.n	800673e <_dtoa_r+0x4de>
 800664a:	9b03      	ldr	r3, [sp, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d076      	beq.n	800673e <_dtoa_r+0x4de>
 8006650:	9b02      	ldr	r3, [sp, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	dd36      	ble.n	80066c4 <_dtoa_r+0x464>
 8006656:	9b00      	ldr	r3, [sp, #0]
 8006658:	4650      	mov	r0, sl
 800665a:	4659      	mov	r1, fp
 800665c:	1e5f      	subs	r7, r3, #1
 800665e:	2200      	movs	r2, #0
 8006660:	4b88      	ldr	r3, [pc, #544]	; (8006884 <_dtoa_r+0x624>)
 8006662:	f7f9 ffe9 	bl	8000638 <__aeabi_dmul>
 8006666:	9e02      	ldr	r6, [sp, #8]
 8006668:	4682      	mov	sl, r0
 800666a:	468b      	mov	fp, r1
 800666c:	3501      	adds	r5, #1
 800666e:	4628      	mov	r0, r5
 8006670:	f7f9 ff78 	bl	8000564 <__aeabi_i2d>
 8006674:	4652      	mov	r2, sl
 8006676:	465b      	mov	r3, fp
 8006678:	f7f9 ffde 	bl	8000638 <__aeabi_dmul>
 800667c:	4b82      	ldr	r3, [pc, #520]	; (8006888 <_dtoa_r+0x628>)
 800667e:	2200      	movs	r2, #0
 8006680:	f7f9 fe24 	bl	80002cc <__adddf3>
 8006684:	46d0      	mov	r8, sl
 8006686:	46d9      	mov	r9, fp
 8006688:	4682      	mov	sl, r0
 800668a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800668e:	2e00      	cmp	r6, #0
 8006690:	d158      	bne.n	8006744 <_dtoa_r+0x4e4>
 8006692:	4b7e      	ldr	r3, [pc, #504]	; (800688c <_dtoa_r+0x62c>)
 8006694:	2200      	movs	r2, #0
 8006696:	4640      	mov	r0, r8
 8006698:	4649      	mov	r1, r9
 800669a:	f7f9 fe15 	bl	80002c8 <__aeabi_dsub>
 800669e:	4652      	mov	r2, sl
 80066a0:	465b      	mov	r3, fp
 80066a2:	4680      	mov	r8, r0
 80066a4:	4689      	mov	r9, r1
 80066a6:	f7fa fa57 	bl	8000b58 <__aeabi_dcmpgt>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	f040 8295 	bne.w	8006bda <_dtoa_r+0x97a>
 80066b0:	4652      	mov	r2, sl
 80066b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80066b6:	4640      	mov	r0, r8
 80066b8:	4649      	mov	r1, r9
 80066ba:	f7fa fa2f 	bl	8000b1c <__aeabi_dcmplt>
 80066be:	2800      	cmp	r0, #0
 80066c0:	f040 8289 	bne.w	8006bd6 <_dtoa_r+0x976>
 80066c4:	ec5b ab19 	vmov	sl, fp, d9
 80066c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f2c0 8148 	blt.w	8006960 <_dtoa_r+0x700>
 80066d0:	9a00      	ldr	r2, [sp, #0]
 80066d2:	2a0e      	cmp	r2, #14
 80066d4:	f300 8144 	bgt.w	8006960 <_dtoa_r+0x700>
 80066d8:	4b67      	ldr	r3, [pc, #412]	; (8006878 <_dtoa_r+0x618>)
 80066da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f280 80d5 	bge.w	8006894 <_dtoa_r+0x634>
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f300 80d1 	bgt.w	8006894 <_dtoa_r+0x634>
 80066f2:	f040 826f 	bne.w	8006bd4 <_dtoa_r+0x974>
 80066f6:	4b65      	ldr	r3, [pc, #404]	; (800688c <_dtoa_r+0x62c>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	4640      	mov	r0, r8
 80066fc:	4649      	mov	r1, r9
 80066fe:	f7f9 ff9b 	bl	8000638 <__aeabi_dmul>
 8006702:	4652      	mov	r2, sl
 8006704:	465b      	mov	r3, fp
 8006706:	f7fa fa1d 	bl	8000b44 <__aeabi_dcmpge>
 800670a:	9e03      	ldr	r6, [sp, #12]
 800670c:	4637      	mov	r7, r6
 800670e:	2800      	cmp	r0, #0
 8006710:	f040 8245 	bne.w	8006b9e <_dtoa_r+0x93e>
 8006714:	9d01      	ldr	r5, [sp, #4]
 8006716:	2331      	movs	r3, #49	; 0x31
 8006718:	f805 3b01 	strb.w	r3, [r5], #1
 800671c:	9b00      	ldr	r3, [sp, #0]
 800671e:	3301      	adds	r3, #1
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	e240      	b.n	8006ba6 <_dtoa_r+0x946>
 8006724:	07f2      	lsls	r2, r6, #31
 8006726:	d505      	bpl.n	8006734 <_dtoa_r+0x4d4>
 8006728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800672c:	f7f9 ff84 	bl	8000638 <__aeabi_dmul>
 8006730:	3501      	adds	r5, #1
 8006732:	2301      	movs	r3, #1
 8006734:	1076      	asrs	r6, r6, #1
 8006736:	3708      	adds	r7, #8
 8006738:	e777      	b.n	800662a <_dtoa_r+0x3ca>
 800673a:	2502      	movs	r5, #2
 800673c:	e779      	b.n	8006632 <_dtoa_r+0x3d2>
 800673e:	9f00      	ldr	r7, [sp, #0]
 8006740:	9e03      	ldr	r6, [sp, #12]
 8006742:	e794      	b.n	800666e <_dtoa_r+0x40e>
 8006744:	9901      	ldr	r1, [sp, #4]
 8006746:	4b4c      	ldr	r3, [pc, #304]	; (8006878 <_dtoa_r+0x618>)
 8006748:	4431      	add	r1, r6
 800674a:	910d      	str	r1, [sp, #52]	; 0x34
 800674c:	9908      	ldr	r1, [sp, #32]
 800674e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006752:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006756:	2900      	cmp	r1, #0
 8006758:	d043      	beq.n	80067e2 <_dtoa_r+0x582>
 800675a:	494d      	ldr	r1, [pc, #308]	; (8006890 <_dtoa_r+0x630>)
 800675c:	2000      	movs	r0, #0
 800675e:	f7fa f895 	bl	800088c <__aeabi_ddiv>
 8006762:	4652      	mov	r2, sl
 8006764:	465b      	mov	r3, fp
 8006766:	f7f9 fdaf 	bl	80002c8 <__aeabi_dsub>
 800676a:	9d01      	ldr	r5, [sp, #4]
 800676c:	4682      	mov	sl, r0
 800676e:	468b      	mov	fp, r1
 8006770:	4649      	mov	r1, r9
 8006772:	4640      	mov	r0, r8
 8006774:	f7fa fa10 	bl	8000b98 <__aeabi_d2iz>
 8006778:	4606      	mov	r6, r0
 800677a:	f7f9 fef3 	bl	8000564 <__aeabi_i2d>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4640      	mov	r0, r8
 8006784:	4649      	mov	r1, r9
 8006786:	f7f9 fd9f 	bl	80002c8 <__aeabi_dsub>
 800678a:	3630      	adds	r6, #48	; 0x30
 800678c:	f805 6b01 	strb.w	r6, [r5], #1
 8006790:	4652      	mov	r2, sl
 8006792:	465b      	mov	r3, fp
 8006794:	4680      	mov	r8, r0
 8006796:	4689      	mov	r9, r1
 8006798:	f7fa f9c0 	bl	8000b1c <__aeabi_dcmplt>
 800679c:	2800      	cmp	r0, #0
 800679e:	d163      	bne.n	8006868 <_dtoa_r+0x608>
 80067a0:	4642      	mov	r2, r8
 80067a2:	464b      	mov	r3, r9
 80067a4:	4936      	ldr	r1, [pc, #216]	; (8006880 <_dtoa_r+0x620>)
 80067a6:	2000      	movs	r0, #0
 80067a8:	f7f9 fd8e 	bl	80002c8 <__aeabi_dsub>
 80067ac:	4652      	mov	r2, sl
 80067ae:	465b      	mov	r3, fp
 80067b0:	f7fa f9b4 	bl	8000b1c <__aeabi_dcmplt>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	f040 80b5 	bne.w	8006924 <_dtoa_r+0x6c4>
 80067ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067bc:	429d      	cmp	r5, r3
 80067be:	d081      	beq.n	80066c4 <_dtoa_r+0x464>
 80067c0:	4b30      	ldr	r3, [pc, #192]	; (8006884 <_dtoa_r+0x624>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	4650      	mov	r0, sl
 80067c6:	4659      	mov	r1, fp
 80067c8:	f7f9 ff36 	bl	8000638 <__aeabi_dmul>
 80067cc:	4b2d      	ldr	r3, [pc, #180]	; (8006884 <_dtoa_r+0x624>)
 80067ce:	4682      	mov	sl, r0
 80067d0:	468b      	mov	fp, r1
 80067d2:	4640      	mov	r0, r8
 80067d4:	4649      	mov	r1, r9
 80067d6:	2200      	movs	r2, #0
 80067d8:	f7f9 ff2e 	bl	8000638 <__aeabi_dmul>
 80067dc:	4680      	mov	r8, r0
 80067de:	4689      	mov	r9, r1
 80067e0:	e7c6      	b.n	8006770 <_dtoa_r+0x510>
 80067e2:	4650      	mov	r0, sl
 80067e4:	4659      	mov	r1, fp
 80067e6:	f7f9 ff27 	bl	8000638 <__aeabi_dmul>
 80067ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067ec:	9d01      	ldr	r5, [sp, #4]
 80067ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80067f0:	4682      	mov	sl, r0
 80067f2:	468b      	mov	fp, r1
 80067f4:	4649      	mov	r1, r9
 80067f6:	4640      	mov	r0, r8
 80067f8:	f7fa f9ce 	bl	8000b98 <__aeabi_d2iz>
 80067fc:	4606      	mov	r6, r0
 80067fe:	f7f9 feb1 	bl	8000564 <__aeabi_i2d>
 8006802:	3630      	adds	r6, #48	; 0x30
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4640      	mov	r0, r8
 800680a:	4649      	mov	r1, r9
 800680c:	f7f9 fd5c 	bl	80002c8 <__aeabi_dsub>
 8006810:	f805 6b01 	strb.w	r6, [r5], #1
 8006814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006816:	429d      	cmp	r5, r3
 8006818:	4680      	mov	r8, r0
 800681a:	4689      	mov	r9, r1
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	d124      	bne.n	800686c <_dtoa_r+0x60c>
 8006822:	4b1b      	ldr	r3, [pc, #108]	; (8006890 <_dtoa_r+0x630>)
 8006824:	4650      	mov	r0, sl
 8006826:	4659      	mov	r1, fp
 8006828:	f7f9 fd50 	bl	80002cc <__adddf3>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	f7fa f990 	bl	8000b58 <__aeabi_dcmpgt>
 8006838:	2800      	cmp	r0, #0
 800683a:	d173      	bne.n	8006924 <_dtoa_r+0x6c4>
 800683c:	4652      	mov	r2, sl
 800683e:	465b      	mov	r3, fp
 8006840:	4913      	ldr	r1, [pc, #76]	; (8006890 <_dtoa_r+0x630>)
 8006842:	2000      	movs	r0, #0
 8006844:	f7f9 fd40 	bl	80002c8 <__aeabi_dsub>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4640      	mov	r0, r8
 800684e:	4649      	mov	r1, r9
 8006850:	f7fa f964 	bl	8000b1c <__aeabi_dcmplt>
 8006854:	2800      	cmp	r0, #0
 8006856:	f43f af35 	beq.w	80066c4 <_dtoa_r+0x464>
 800685a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800685c:	1e6b      	subs	r3, r5, #1
 800685e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006860:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006864:	2b30      	cmp	r3, #48	; 0x30
 8006866:	d0f8      	beq.n	800685a <_dtoa_r+0x5fa>
 8006868:	9700      	str	r7, [sp, #0]
 800686a:	e049      	b.n	8006900 <_dtoa_r+0x6a0>
 800686c:	4b05      	ldr	r3, [pc, #20]	; (8006884 <_dtoa_r+0x624>)
 800686e:	f7f9 fee3 	bl	8000638 <__aeabi_dmul>
 8006872:	4680      	mov	r8, r0
 8006874:	4689      	mov	r9, r1
 8006876:	e7bd      	b.n	80067f4 <_dtoa_r+0x594>
 8006878:	08008420 	.word	0x08008420
 800687c:	080083f8 	.word	0x080083f8
 8006880:	3ff00000 	.word	0x3ff00000
 8006884:	40240000 	.word	0x40240000
 8006888:	401c0000 	.word	0x401c0000
 800688c:	40140000 	.word	0x40140000
 8006890:	3fe00000 	.word	0x3fe00000
 8006894:	9d01      	ldr	r5, [sp, #4]
 8006896:	4656      	mov	r6, sl
 8006898:	465f      	mov	r7, fp
 800689a:	4642      	mov	r2, r8
 800689c:	464b      	mov	r3, r9
 800689e:	4630      	mov	r0, r6
 80068a0:	4639      	mov	r1, r7
 80068a2:	f7f9 fff3 	bl	800088c <__aeabi_ddiv>
 80068a6:	f7fa f977 	bl	8000b98 <__aeabi_d2iz>
 80068aa:	4682      	mov	sl, r0
 80068ac:	f7f9 fe5a 	bl	8000564 <__aeabi_i2d>
 80068b0:	4642      	mov	r2, r8
 80068b2:	464b      	mov	r3, r9
 80068b4:	f7f9 fec0 	bl	8000638 <__aeabi_dmul>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4630      	mov	r0, r6
 80068be:	4639      	mov	r1, r7
 80068c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80068c4:	f7f9 fd00 	bl	80002c8 <__aeabi_dsub>
 80068c8:	f805 6b01 	strb.w	r6, [r5], #1
 80068cc:	9e01      	ldr	r6, [sp, #4]
 80068ce:	9f03      	ldr	r7, [sp, #12]
 80068d0:	1bae      	subs	r6, r5, r6
 80068d2:	42b7      	cmp	r7, r6
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	d135      	bne.n	8006946 <_dtoa_r+0x6e6>
 80068da:	f7f9 fcf7 	bl	80002cc <__adddf3>
 80068de:	4642      	mov	r2, r8
 80068e0:	464b      	mov	r3, r9
 80068e2:	4606      	mov	r6, r0
 80068e4:	460f      	mov	r7, r1
 80068e6:	f7fa f937 	bl	8000b58 <__aeabi_dcmpgt>
 80068ea:	b9d0      	cbnz	r0, 8006922 <_dtoa_r+0x6c2>
 80068ec:	4642      	mov	r2, r8
 80068ee:	464b      	mov	r3, r9
 80068f0:	4630      	mov	r0, r6
 80068f2:	4639      	mov	r1, r7
 80068f4:	f7fa f908 	bl	8000b08 <__aeabi_dcmpeq>
 80068f8:	b110      	cbz	r0, 8006900 <_dtoa_r+0x6a0>
 80068fa:	f01a 0f01 	tst.w	sl, #1
 80068fe:	d110      	bne.n	8006922 <_dtoa_r+0x6c2>
 8006900:	4620      	mov	r0, r4
 8006902:	ee18 1a10 	vmov	r1, s16
 8006906:	f000 faf3 	bl	8006ef0 <_Bfree>
 800690a:	2300      	movs	r3, #0
 800690c:	9800      	ldr	r0, [sp, #0]
 800690e:	702b      	strb	r3, [r5, #0]
 8006910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006912:	3001      	adds	r0, #1
 8006914:	6018      	str	r0, [r3, #0]
 8006916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006918:	2b00      	cmp	r3, #0
 800691a:	f43f acf1 	beq.w	8006300 <_dtoa_r+0xa0>
 800691e:	601d      	str	r5, [r3, #0]
 8006920:	e4ee      	b.n	8006300 <_dtoa_r+0xa0>
 8006922:	9f00      	ldr	r7, [sp, #0]
 8006924:	462b      	mov	r3, r5
 8006926:	461d      	mov	r5, r3
 8006928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800692c:	2a39      	cmp	r2, #57	; 0x39
 800692e:	d106      	bne.n	800693e <_dtoa_r+0x6de>
 8006930:	9a01      	ldr	r2, [sp, #4]
 8006932:	429a      	cmp	r2, r3
 8006934:	d1f7      	bne.n	8006926 <_dtoa_r+0x6c6>
 8006936:	9901      	ldr	r1, [sp, #4]
 8006938:	2230      	movs	r2, #48	; 0x30
 800693a:	3701      	adds	r7, #1
 800693c:	700a      	strb	r2, [r1, #0]
 800693e:	781a      	ldrb	r2, [r3, #0]
 8006940:	3201      	adds	r2, #1
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	e790      	b.n	8006868 <_dtoa_r+0x608>
 8006946:	4ba6      	ldr	r3, [pc, #664]	; (8006be0 <_dtoa_r+0x980>)
 8006948:	2200      	movs	r2, #0
 800694a:	f7f9 fe75 	bl	8000638 <__aeabi_dmul>
 800694e:	2200      	movs	r2, #0
 8006950:	2300      	movs	r3, #0
 8006952:	4606      	mov	r6, r0
 8006954:	460f      	mov	r7, r1
 8006956:	f7fa f8d7 	bl	8000b08 <__aeabi_dcmpeq>
 800695a:	2800      	cmp	r0, #0
 800695c:	d09d      	beq.n	800689a <_dtoa_r+0x63a>
 800695e:	e7cf      	b.n	8006900 <_dtoa_r+0x6a0>
 8006960:	9a08      	ldr	r2, [sp, #32]
 8006962:	2a00      	cmp	r2, #0
 8006964:	f000 80d7 	beq.w	8006b16 <_dtoa_r+0x8b6>
 8006968:	9a06      	ldr	r2, [sp, #24]
 800696a:	2a01      	cmp	r2, #1
 800696c:	f300 80ba 	bgt.w	8006ae4 <_dtoa_r+0x884>
 8006970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006972:	2a00      	cmp	r2, #0
 8006974:	f000 80b2 	beq.w	8006adc <_dtoa_r+0x87c>
 8006978:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800697c:	9e07      	ldr	r6, [sp, #28]
 800697e:	9d04      	ldr	r5, [sp, #16]
 8006980:	9a04      	ldr	r2, [sp, #16]
 8006982:	441a      	add	r2, r3
 8006984:	9204      	str	r2, [sp, #16]
 8006986:	9a05      	ldr	r2, [sp, #20]
 8006988:	2101      	movs	r1, #1
 800698a:	441a      	add	r2, r3
 800698c:	4620      	mov	r0, r4
 800698e:	9205      	str	r2, [sp, #20]
 8006990:	f000 fb66 	bl	8007060 <__i2b>
 8006994:	4607      	mov	r7, r0
 8006996:	2d00      	cmp	r5, #0
 8006998:	dd0c      	ble.n	80069b4 <_dtoa_r+0x754>
 800699a:	9b05      	ldr	r3, [sp, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	dd09      	ble.n	80069b4 <_dtoa_r+0x754>
 80069a0:	42ab      	cmp	r3, r5
 80069a2:	9a04      	ldr	r2, [sp, #16]
 80069a4:	bfa8      	it	ge
 80069a6:	462b      	movge	r3, r5
 80069a8:	1ad2      	subs	r2, r2, r3
 80069aa:	9204      	str	r2, [sp, #16]
 80069ac:	9a05      	ldr	r2, [sp, #20]
 80069ae:	1aed      	subs	r5, r5, r3
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	9305      	str	r3, [sp, #20]
 80069b4:	9b07      	ldr	r3, [sp, #28]
 80069b6:	b31b      	cbz	r3, 8006a00 <_dtoa_r+0x7a0>
 80069b8:	9b08      	ldr	r3, [sp, #32]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80af 	beq.w	8006b1e <_dtoa_r+0x8be>
 80069c0:	2e00      	cmp	r6, #0
 80069c2:	dd13      	ble.n	80069ec <_dtoa_r+0x78c>
 80069c4:	4639      	mov	r1, r7
 80069c6:	4632      	mov	r2, r6
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fc09 	bl	80071e0 <__pow5mult>
 80069ce:	ee18 2a10 	vmov	r2, s16
 80069d2:	4601      	mov	r1, r0
 80069d4:	4607      	mov	r7, r0
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 fb58 	bl	800708c <__multiply>
 80069dc:	ee18 1a10 	vmov	r1, s16
 80069e0:	4680      	mov	r8, r0
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 fa84 	bl	8006ef0 <_Bfree>
 80069e8:	ee08 8a10 	vmov	s16, r8
 80069ec:	9b07      	ldr	r3, [sp, #28]
 80069ee:	1b9a      	subs	r2, r3, r6
 80069f0:	d006      	beq.n	8006a00 <_dtoa_r+0x7a0>
 80069f2:	ee18 1a10 	vmov	r1, s16
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 fbf2 	bl	80071e0 <__pow5mult>
 80069fc:	ee08 0a10 	vmov	s16, r0
 8006a00:	2101      	movs	r1, #1
 8006a02:	4620      	mov	r0, r4
 8006a04:	f000 fb2c 	bl	8007060 <__i2b>
 8006a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	f340 8088 	ble.w	8006b22 <_dtoa_r+0x8c2>
 8006a12:	461a      	mov	r2, r3
 8006a14:	4601      	mov	r1, r0
 8006a16:	4620      	mov	r0, r4
 8006a18:	f000 fbe2 	bl	80071e0 <__pow5mult>
 8006a1c:	9b06      	ldr	r3, [sp, #24]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	4606      	mov	r6, r0
 8006a22:	f340 8081 	ble.w	8006b28 <_dtoa_r+0x8c8>
 8006a26:	f04f 0800 	mov.w	r8, #0
 8006a2a:	6933      	ldr	r3, [r6, #16]
 8006a2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a30:	6918      	ldr	r0, [r3, #16]
 8006a32:	f000 fac5 	bl	8006fc0 <__hi0bits>
 8006a36:	f1c0 0020 	rsb	r0, r0, #32
 8006a3a:	9b05      	ldr	r3, [sp, #20]
 8006a3c:	4418      	add	r0, r3
 8006a3e:	f010 001f 	ands.w	r0, r0, #31
 8006a42:	f000 8092 	beq.w	8006b6a <_dtoa_r+0x90a>
 8006a46:	f1c0 0320 	rsb	r3, r0, #32
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	f340 808a 	ble.w	8006b64 <_dtoa_r+0x904>
 8006a50:	f1c0 001c 	rsb	r0, r0, #28
 8006a54:	9b04      	ldr	r3, [sp, #16]
 8006a56:	4403      	add	r3, r0
 8006a58:	9304      	str	r3, [sp, #16]
 8006a5a:	9b05      	ldr	r3, [sp, #20]
 8006a5c:	4403      	add	r3, r0
 8006a5e:	4405      	add	r5, r0
 8006a60:	9305      	str	r3, [sp, #20]
 8006a62:	9b04      	ldr	r3, [sp, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dd07      	ble.n	8006a78 <_dtoa_r+0x818>
 8006a68:	ee18 1a10 	vmov	r1, s16
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 fc10 	bl	8007294 <__lshift>
 8006a74:	ee08 0a10 	vmov	s16, r0
 8006a78:	9b05      	ldr	r3, [sp, #20]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	dd05      	ble.n	8006a8a <_dtoa_r+0x82a>
 8006a7e:	4631      	mov	r1, r6
 8006a80:	461a      	mov	r2, r3
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 fc06 	bl	8007294 <__lshift>
 8006a88:	4606      	mov	r6, r0
 8006a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d06e      	beq.n	8006b6e <_dtoa_r+0x90e>
 8006a90:	ee18 0a10 	vmov	r0, s16
 8006a94:	4631      	mov	r1, r6
 8006a96:	f000 fc6d 	bl	8007374 <__mcmp>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	da67      	bge.n	8006b6e <_dtoa_r+0x90e>
 8006a9e:	9b00      	ldr	r3, [sp, #0]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	ee18 1a10 	vmov	r1, s16
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	220a      	movs	r2, #10
 8006aaa:	2300      	movs	r3, #0
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 fa41 	bl	8006f34 <__multadd>
 8006ab2:	9b08      	ldr	r3, [sp, #32]
 8006ab4:	ee08 0a10 	vmov	s16, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 81b1 	beq.w	8006e20 <_dtoa_r+0xbc0>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	220a      	movs	r2, #10
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 fa35 	bl	8006f34 <__multadd>
 8006aca:	9b02      	ldr	r3, [sp, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	4607      	mov	r7, r0
 8006ad0:	f300 808e 	bgt.w	8006bf0 <_dtoa_r+0x990>
 8006ad4:	9b06      	ldr	r3, [sp, #24]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	dc51      	bgt.n	8006b7e <_dtoa_r+0x91e>
 8006ada:	e089      	b.n	8006bf0 <_dtoa_r+0x990>
 8006adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ade:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ae2:	e74b      	b.n	800697c <_dtoa_r+0x71c>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	1e5e      	subs	r6, r3, #1
 8006ae8:	9b07      	ldr	r3, [sp, #28]
 8006aea:	42b3      	cmp	r3, r6
 8006aec:	bfbf      	itttt	lt
 8006aee:	9b07      	ldrlt	r3, [sp, #28]
 8006af0:	9607      	strlt	r6, [sp, #28]
 8006af2:	1af2      	sublt	r2, r6, r3
 8006af4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006af6:	bfb6      	itet	lt
 8006af8:	189b      	addlt	r3, r3, r2
 8006afa:	1b9e      	subge	r6, r3, r6
 8006afc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006afe:	9b03      	ldr	r3, [sp, #12]
 8006b00:	bfb8      	it	lt
 8006b02:	2600      	movlt	r6, #0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bfb7      	itett	lt
 8006b08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006b0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006b10:	1a9d      	sublt	r5, r3, r2
 8006b12:	2300      	movlt	r3, #0
 8006b14:	e734      	b.n	8006980 <_dtoa_r+0x720>
 8006b16:	9e07      	ldr	r6, [sp, #28]
 8006b18:	9d04      	ldr	r5, [sp, #16]
 8006b1a:	9f08      	ldr	r7, [sp, #32]
 8006b1c:	e73b      	b.n	8006996 <_dtoa_r+0x736>
 8006b1e:	9a07      	ldr	r2, [sp, #28]
 8006b20:	e767      	b.n	80069f2 <_dtoa_r+0x792>
 8006b22:	9b06      	ldr	r3, [sp, #24]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	dc18      	bgt.n	8006b5a <_dtoa_r+0x8fa>
 8006b28:	f1ba 0f00 	cmp.w	sl, #0
 8006b2c:	d115      	bne.n	8006b5a <_dtoa_r+0x8fa>
 8006b2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b32:	b993      	cbnz	r3, 8006b5a <_dtoa_r+0x8fa>
 8006b34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b38:	0d1b      	lsrs	r3, r3, #20
 8006b3a:	051b      	lsls	r3, r3, #20
 8006b3c:	b183      	cbz	r3, 8006b60 <_dtoa_r+0x900>
 8006b3e:	9b04      	ldr	r3, [sp, #16]
 8006b40:	3301      	adds	r3, #1
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	9b05      	ldr	r3, [sp, #20]
 8006b46:	3301      	adds	r3, #1
 8006b48:	9305      	str	r3, [sp, #20]
 8006b4a:	f04f 0801 	mov.w	r8, #1
 8006b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f47f af6a 	bne.w	8006a2a <_dtoa_r+0x7ca>
 8006b56:	2001      	movs	r0, #1
 8006b58:	e76f      	b.n	8006a3a <_dtoa_r+0x7da>
 8006b5a:	f04f 0800 	mov.w	r8, #0
 8006b5e:	e7f6      	b.n	8006b4e <_dtoa_r+0x8ee>
 8006b60:	4698      	mov	r8, r3
 8006b62:	e7f4      	b.n	8006b4e <_dtoa_r+0x8ee>
 8006b64:	f43f af7d 	beq.w	8006a62 <_dtoa_r+0x802>
 8006b68:	4618      	mov	r0, r3
 8006b6a:	301c      	adds	r0, #28
 8006b6c:	e772      	b.n	8006a54 <_dtoa_r+0x7f4>
 8006b6e:	9b03      	ldr	r3, [sp, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	dc37      	bgt.n	8006be4 <_dtoa_r+0x984>
 8006b74:	9b06      	ldr	r3, [sp, #24]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	dd34      	ble.n	8006be4 <_dtoa_r+0x984>
 8006b7a:	9b03      	ldr	r3, [sp, #12]
 8006b7c:	9302      	str	r3, [sp, #8]
 8006b7e:	9b02      	ldr	r3, [sp, #8]
 8006b80:	b96b      	cbnz	r3, 8006b9e <_dtoa_r+0x93e>
 8006b82:	4631      	mov	r1, r6
 8006b84:	2205      	movs	r2, #5
 8006b86:	4620      	mov	r0, r4
 8006b88:	f000 f9d4 	bl	8006f34 <__multadd>
 8006b8c:	4601      	mov	r1, r0
 8006b8e:	4606      	mov	r6, r0
 8006b90:	ee18 0a10 	vmov	r0, s16
 8006b94:	f000 fbee 	bl	8007374 <__mcmp>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	f73f adbb 	bgt.w	8006714 <_dtoa_r+0x4b4>
 8006b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba0:	9d01      	ldr	r5, [sp, #4]
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	f04f 0800 	mov.w	r8, #0
 8006baa:	4631      	mov	r1, r6
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 f99f 	bl	8006ef0 <_Bfree>
 8006bb2:	2f00      	cmp	r7, #0
 8006bb4:	f43f aea4 	beq.w	8006900 <_dtoa_r+0x6a0>
 8006bb8:	f1b8 0f00 	cmp.w	r8, #0
 8006bbc:	d005      	beq.n	8006bca <_dtoa_r+0x96a>
 8006bbe:	45b8      	cmp	r8, r7
 8006bc0:	d003      	beq.n	8006bca <_dtoa_r+0x96a>
 8006bc2:	4641      	mov	r1, r8
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 f993 	bl	8006ef0 <_Bfree>
 8006bca:	4639      	mov	r1, r7
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 f98f 	bl	8006ef0 <_Bfree>
 8006bd2:	e695      	b.n	8006900 <_dtoa_r+0x6a0>
 8006bd4:	2600      	movs	r6, #0
 8006bd6:	4637      	mov	r7, r6
 8006bd8:	e7e1      	b.n	8006b9e <_dtoa_r+0x93e>
 8006bda:	9700      	str	r7, [sp, #0]
 8006bdc:	4637      	mov	r7, r6
 8006bde:	e599      	b.n	8006714 <_dtoa_r+0x4b4>
 8006be0:	40240000 	.word	0x40240000
 8006be4:	9b08      	ldr	r3, [sp, #32]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 80ca 	beq.w	8006d80 <_dtoa_r+0xb20>
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	9302      	str	r3, [sp, #8]
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	dd05      	ble.n	8006c00 <_dtoa_r+0x9a0>
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	462a      	mov	r2, r5
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f000 fb4b 	bl	8007294 <__lshift>
 8006bfe:	4607      	mov	r7, r0
 8006c00:	f1b8 0f00 	cmp.w	r8, #0
 8006c04:	d05b      	beq.n	8006cbe <_dtoa_r+0xa5e>
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f000 f931 	bl	8006e70 <_Balloc>
 8006c0e:	4605      	mov	r5, r0
 8006c10:	b928      	cbnz	r0, 8006c1e <_dtoa_r+0x9be>
 8006c12:	4b87      	ldr	r3, [pc, #540]	; (8006e30 <_dtoa_r+0xbd0>)
 8006c14:	4602      	mov	r2, r0
 8006c16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c1a:	f7ff bb3b 	b.w	8006294 <_dtoa_r+0x34>
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	3202      	adds	r2, #2
 8006c22:	0092      	lsls	r2, r2, #2
 8006c24:	f107 010c 	add.w	r1, r7, #12
 8006c28:	300c      	adds	r0, #12
 8006c2a:	f000 f913 	bl	8006e54 <memcpy>
 8006c2e:	2201      	movs	r2, #1
 8006c30:	4629      	mov	r1, r5
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 fb2e 	bl	8007294 <__lshift>
 8006c38:	9b01      	ldr	r3, [sp, #4]
 8006c3a:	f103 0901 	add.w	r9, r3, #1
 8006c3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006c42:	4413      	add	r3, r2
 8006c44:	9305      	str	r3, [sp, #20]
 8006c46:	f00a 0301 	and.w	r3, sl, #1
 8006c4a:	46b8      	mov	r8, r7
 8006c4c:	9304      	str	r3, [sp, #16]
 8006c4e:	4607      	mov	r7, r0
 8006c50:	4631      	mov	r1, r6
 8006c52:	ee18 0a10 	vmov	r0, s16
 8006c56:	f7ff fa75 	bl	8006144 <quorem>
 8006c5a:	4641      	mov	r1, r8
 8006c5c:	9002      	str	r0, [sp, #8]
 8006c5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c62:	ee18 0a10 	vmov	r0, s16
 8006c66:	f000 fb85 	bl	8007374 <__mcmp>
 8006c6a:	463a      	mov	r2, r7
 8006c6c:	9003      	str	r0, [sp, #12]
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fb9b 	bl	80073ac <__mdiff>
 8006c76:	68c2      	ldr	r2, [r0, #12]
 8006c78:	f109 3bff 	add.w	fp, r9, #4294967295
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	bb02      	cbnz	r2, 8006cc2 <_dtoa_r+0xa62>
 8006c80:	4601      	mov	r1, r0
 8006c82:	ee18 0a10 	vmov	r0, s16
 8006c86:	f000 fb75 	bl	8007374 <__mcmp>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4620      	mov	r0, r4
 8006c90:	9207      	str	r2, [sp, #28]
 8006c92:	f000 f92d 	bl	8006ef0 <_Bfree>
 8006c96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006c9a:	ea43 0102 	orr.w	r1, r3, r2
 8006c9e:	9b04      	ldr	r3, [sp, #16]
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	464d      	mov	r5, r9
 8006ca4:	d10f      	bne.n	8006cc6 <_dtoa_r+0xa66>
 8006ca6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006caa:	d02a      	beq.n	8006d02 <_dtoa_r+0xaa2>
 8006cac:	9b03      	ldr	r3, [sp, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	dd02      	ble.n	8006cb8 <_dtoa_r+0xa58>
 8006cb2:	9b02      	ldr	r3, [sp, #8]
 8006cb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006cb8:	f88b a000 	strb.w	sl, [fp]
 8006cbc:	e775      	b.n	8006baa <_dtoa_r+0x94a>
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	e7ba      	b.n	8006c38 <_dtoa_r+0x9d8>
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	e7e2      	b.n	8006c8c <_dtoa_r+0xa2c>
 8006cc6:	9b03      	ldr	r3, [sp, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	db04      	blt.n	8006cd6 <_dtoa_r+0xa76>
 8006ccc:	9906      	ldr	r1, [sp, #24]
 8006cce:	430b      	orrs	r3, r1
 8006cd0:	9904      	ldr	r1, [sp, #16]
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	d122      	bne.n	8006d1c <_dtoa_r+0xabc>
 8006cd6:	2a00      	cmp	r2, #0
 8006cd8:	ddee      	ble.n	8006cb8 <_dtoa_r+0xa58>
 8006cda:	ee18 1a10 	vmov	r1, s16
 8006cde:	2201      	movs	r2, #1
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 fad7 	bl	8007294 <__lshift>
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	ee08 0a10 	vmov	s16, r0
 8006cec:	f000 fb42 	bl	8007374 <__mcmp>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	dc03      	bgt.n	8006cfc <_dtoa_r+0xa9c>
 8006cf4:	d1e0      	bne.n	8006cb8 <_dtoa_r+0xa58>
 8006cf6:	f01a 0f01 	tst.w	sl, #1
 8006cfa:	d0dd      	beq.n	8006cb8 <_dtoa_r+0xa58>
 8006cfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d00:	d1d7      	bne.n	8006cb2 <_dtoa_r+0xa52>
 8006d02:	2339      	movs	r3, #57	; 0x39
 8006d04:	f88b 3000 	strb.w	r3, [fp]
 8006d08:	462b      	mov	r3, r5
 8006d0a:	461d      	mov	r5, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d12:	2a39      	cmp	r2, #57	; 0x39
 8006d14:	d071      	beq.n	8006dfa <_dtoa_r+0xb9a>
 8006d16:	3201      	adds	r2, #1
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	e746      	b.n	8006baa <_dtoa_r+0x94a>
 8006d1c:	2a00      	cmp	r2, #0
 8006d1e:	dd07      	ble.n	8006d30 <_dtoa_r+0xad0>
 8006d20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d24:	d0ed      	beq.n	8006d02 <_dtoa_r+0xaa2>
 8006d26:	f10a 0301 	add.w	r3, sl, #1
 8006d2a:	f88b 3000 	strb.w	r3, [fp]
 8006d2e:	e73c      	b.n	8006baa <_dtoa_r+0x94a>
 8006d30:	9b05      	ldr	r3, [sp, #20]
 8006d32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006d36:	4599      	cmp	r9, r3
 8006d38:	d047      	beq.n	8006dca <_dtoa_r+0xb6a>
 8006d3a:	ee18 1a10 	vmov	r1, s16
 8006d3e:	2300      	movs	r3, #0
 8006d40:	220a      	movs	r2, #10
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 f8f6 	bl	8006f34 <__multadd>
 8006d48:	45b8      	cmp	r8, r7
 8006d4a:	ee08 0a10 	vmov	s16, r0
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	f04f 020a 	mov.w	r2, #10
 8006d56:	4641      	mov	r1, r8
 8006d58:	4620      	mov	r0, r4
 8006d5a:	d106      	bne.n	8006d6a <_dtoa_r+0xb0a>
 8006d5c:	f000 f8ea 	bl	8006f34 <__multadd>
 8006d60:	4680      	mov	r8, r0
 8006d62:	4607      	mov	r7, r0
 8006d64:	f109 0901 	add.w	r9, r9, #1
 8006d68:	e772      	b.n	8006c50 <_dtoa_r+0x9f0>
 8006d6a:	f000 f8e3 	bl	8006f34 <__multadd>
 8006d6e:	4639      	mov	r1, r7
 8006d70:	4680      	mov	r8, r0
 8006d72:	2300      	movs	r3, #0
 8006d74:	220a      	movs	r2, #10
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 f8dc 	bl	8006f34 <__multadd>
 8006d7c:	4607      	mov	r7, r0
 8006d7e:	e7f1      	b.n	8006d64 <_dtoa_r+0xb04>
 8006d80:	9b03      	ldr	r3, [sp, #12]
 8006d82:	9302      	str	r3, [sp, #8]
 8006d84:	9d01      	ldr	r5, [sp, #4]
 8006d86:	ee18 0a10 	vmov	r0, s16
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	f7ff f9da 	bl	8006144 <quorem>
 8006d90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d94:	9b01      	ldr	r3, [sp, #4]
 8006d96:	f805 ab01 	strb.w	sl, [r5], #1
 8006d9a:	1aea      	subs	r2, r5, r3
 8006d9c:	9b02      	ldr	r3, [sp, #8]
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	dd09      	ble.n	8006db6 <_dtoa_r+0xb56>
 8006da2:	ee18 1a10 	vmov	r1, s16
 8006da6:	2300      	movs	r3, #0
 8006da8:	220a      	movs	r2, #10
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 f8c2 	bl	8006f34 <__multadd>
 8006db0:	ee08 0a10 	vmov	s16, r0
 8006db4:	e7e7      	b.n	8006d86 <_dtoa_r+0xb26>
 8006db6:	9b02      	ldr	r3, [sp, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	bfc8      	it	gt
 8006dbc:	461d      	movgt	r5, r3
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	bfd8      	it	le
 8006dc2:	2501      	movle	r5, #1
 8006dc4:	441d      	add	r5, r3
 8006dc6:	f04f 0800 	mov.w	r8, #0
 8006dca:	ee18 1a10 	vmov	r1, s16
 8006dce:	2201      	movs	r2, #1
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fa5f 	bl	8007294 <__lshift>
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	ee08 0a10 	vmov	s16, r0
 8006ddc:	f000 faca 	bl	8007374 <__mcmp>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	dc91      	bgt.n	8006d08 <_dtoa_r+0xaa8>
 8006de4:	d102      	bne.n	8006dec <_dtoa_r+0xb8c>
 8006de6:	f01a 0f01 	tst.w	sl, #1
 8006dea:	d18d      	bne.n	8006d08 <_dtoa_r+0xaa8>
 8006dec:	462b      	mov	r3, r5
 8006dee:	461d      	mov	r5, r3
 8006df0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006df4:	2a30      	cmp	r2, #48	; 0x30
 8006df6:	d0fa      	beq.n	8006dee <_dtoa_r+0xb8e>
 8006df8:	e6d7      	b.n	8006baa <_dtoa_r+0x94a>
 8006dfa:	9a01      	ldr	r2, [sp, #4]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d184      	bne.n	8006d0a <_dtoa_r+0xaaa>
 8006e00:	9b00      	ldr	r3, [sp, #0]
 8006e02:	3301      	adds	r3, #1
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	2331      	movs	r3, #49	; 0x31
 8006e08:	7013      	strb	r3, [r2, #0]
 8006e0a:	e6ce      	b.n	8006baa <_dtoa_r+0x94a>
 8006e0c:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <_dtoa_r+0xbd4>)
 8006e0e:	f7ff ba95 	b.w	800633c <_dtoa_r+0xdc>
 8006e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f47f aa6e 	bne.w	80062f6 <_dtoa_r+0x96>
 8006e1a:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <_dtoa_r+0xbd8>)
 8006e1c:	f7ff ba8e 	b.w	800633c <_dtoa_r+0xdc>
 8006e20:	9b02      	ldr	r3, [sp, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	dcae      	bgt.n	8006d84 <_dtoa_r+0xb24>
 8006e26:	9b06      	ldr	r3, [sp, #24]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	f73f aea8 	bgt.w	8006b7e <_dtoa_r+0x91e>
 8006e2e:	e7a9      	b.n	8006d84 <_dtoa_r+0xb24>
 8006e30:	08008387 	.word	0x08008387
 8006e34:	080082e4 	.word	0x080082e4
 8006e38:	08008308 	.word	0x08008308

08006e3c <_localeconv_r>:
 8006e3c:	4800      	ldr	r0, [pc, #0]	; (8006e40 <_localeconv_r+0x4>)
 8006e3e:	4770      	bx	lr
 8006e40:	20000160 	.word	0x20000160

08006e44 <malloc>:
 8006e44:	4b02      	ldr	r3, [pc, #8]	; (8006e50 <malloc+0xc>)
 8006e46:	4601      	mov	r1, r0
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	f000 bc17 	b.w	800767c <_malloc_r>
 8006e4e:	bf00      	nop
 8006e50:	2000000c 	.word	0x2000000c

08006e54 <memcpy>:
 8006e54:	440a      	add	r2, r1
 8006e56:	4291      	cmp	r1, r2
 8006e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e5c:	d100      	bne.n	8006e60 <memcpy+0xc>
 8006e5e:	4770      	bx	lr
 8006e60:	b510      	push	{r4, lr}
 8006e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e6a:	4291      	cmp	r1, r2
 8006e6c:	d1f9      	bne.n	8006e62 <memcpy+0xe>
 8006e6e:	bd10      	pop	{r4, pc}

08006e70 <_Balloc>:
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e74:	4604      	mov	r4, r0
 8006e76:	460d      	mov	r5, r1
 8006e78:	b976      	cbnz	r6, 8006e98 <_Balloc+0x28>
 8006e7a:	2010      	movs	r0, #16
 8006e7c:	f7ff ffe2 	bl	8006e44 <malloc>
 8006e80:	4602      	mov	r2, r0
 8006e82:	6260      	str	r0, [r4, #36]	; 0x24
 8006e84:	b920      	cbnz	r0, 8006e90 <_Balloc+0x20>
 8006e86:	4b18      	ldr	r3, [pc, #96]	; (8006ee8 <_Balloc+0x78>)
 8006e88:	4818      	ldr	r0, [pc, #96]	; (8006eec <_Balloc+0x7c>)
 8006e8a:	2166      	movs	r1, #102	; 0x66
 8006e8c:	f000 fc7a 	bl	8007784 <__assert_func>
 8006e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e94:	6006      	str	r6, [r0, #0]
 8006e96:	60c6      	str	r6, [r0, #12]
 8006e98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e9a:	68f3      	ldr	r3, [r6, #12]
 8006e9c:	b183      	cbz	r3, 8006ec0 <_Balloc+0x50>
 8006e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ea6:	b9b8      	cbnz	r0, 8006ed8 <_Balloc+0x68>
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	fa01 f605 	lsl.w	r6, r1, r5
 8006eae:	1d72      	adds	r2, r6, #5
 8006eb0:	0092      	lsls	r2, r2, #2
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f000 fb60 	bl	8007578 <_calloc_r>
 8006eb8:	b160      	cbz	r0, 8006ed4 <_Balloc+0x64>
 8006eba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ebe:	e00e      	b.n	8006ede <_Balloc+0x6e>
 8006ec0:	2221      	movs	r2, #33	; 0x21
 8006ec2:	2104      	movs	r1, #4
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f000 fb57 	bl	8007578 <_calloc_r>
 8006eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ecc:	60f0      	str	r0, [r6, #12]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e4      	bne.n	8006e9e <_Balloc+0x2e>
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	6802      	ldr	r2, [r0, #0]
 8006eda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ee4:	e7f7      	b.n	8006ed6 <_Balloc+0x66>
 8006ee6:	bf00      	nop
 8006ee8:	08008315 	.word	0x08008315
 8006eec:	08008398 	.word	0x08008398

08006ef0 <_Bfree>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ef4:	4605      	mov	r5, r0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	b976      	cbnz	r6, 8006f18 <_Bfree+0x28>
 8006efa:	2010      	movs	r0, #16
 8006efc:	f7ff ffa2 	bl	8006e44 <malloc>
 8006f00:	4602      	mov	r2, r0
 8006f02:	6268      	str	r0, [r5, #36]	; 0x24
 8006f04:	b920      	cbnz	r0, 8006f10 <_Bfree+0x20>
 8006f06:	4b09      	ldr	r3, [pc, #36]	; (8006f2c <_Bfree+0x3c>)
 8006f08:	4809      	ldr	r0, [pc, #36]	; (8006f30 <_Bfree+0x40>)
 8006f0a:	218a      	movs	r1, #138	; 0x8a
 8006f0c:	f000 fc3a 	bl	8007784 <__assert_func>
 8006f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f14:	6006      	str	r6, [r0, #0]
 8006f16:	60c6      	str	r6, [r0, #12]
 8006f18:	b13c      	cbz	r4, 8006f2a <_Bfree+0x3a>
 8006f1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f1c:	6862      	ldr	r2, [r4, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f24:	6021      	str	r1, [r4, #0]
 8006f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
 8006f2c:	08008315 	.word	0x08008315
 8006f30:	08008398 	.word	0x08008398

08006f34 <__multadd>:
 8006f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f38:	690d      	ldr	r5, [r1, #16]
 8006f3a:	4607      	mov	r7, r0
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	461e      	mov	r6, r3
 8006f40:	f101 0c14 	add.w	ip, r1, #20
 8006f44:	2000      	movs	r0, #0
 8006f46:	f8dc 3000 	ldr.w	r3, [ip]
 8006f4a:	b299      	uxth	r1, r3
 8006f4c:	fb02 6101 	mla	r1, r2, r1, r6
 8006f50:	0c1e      	lsrs	r6, r3, #16
 8006f52:	0c0b      	lsrs	r3, r1, #16
 8006f54:	fb02 3306 	mla	r3, r2, r6, r3
 8006f58:	b289      	uxth	r1, r1
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f60:	4285      	cmp	r5, r0
 8006f62:	f84c 1b04 	str.w	r1, [ip], #4
 8006f66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f6a:	dcec      	bgt.n	8006f46 <__multadd+0x12>
 8006f6c:	b30e      	cbz	r6, 8006fb2 <__multadd+0x7e>
 8006f6e:	68a3      	ldr	r3, [r4, #8]
 8006f70:	42ab      	cmp	r3, r5
 8006f72:	dc19      	bgt.n	8006fa8 <__multadd+0x74>
 8006f74:	6861      	ldr	r1, [r4, #4]
 8006f76:	4638      	mov	r0, r7
 8006f78:	3101      	adds	r1, #1
 8006f7a:	f7ff ff79 	bl	8006e70 <_Balloc>
 8006f7e:	4680      	mov	r8, r0
 8006f80:	b928      	cbnz	r0, 8006f8e <__multadd+0x5a>
 8006f82:	4602      	mov	r2, r0
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <__multadd+0x84>)
 8006f86:	480d      	ldr	r0, [pc, #52]	; (8006fbc <__multadd+0x88>)
 8006f88:	21b5      	movs	r1, #181	; 0xb5
 8006f8a:	f000 fbfb 	bl	8007784 <__assert_func>
 8006f8e:	6922      	ldr	r2, [r4, #16]
 8006f90:	3202      	adds	r2, #2
 8006f92:	f104 010c 	add.w	r1, r4, #12
 8006f96:	0092      	lsls	r2, r2, #2
 8006f98:	300c      	adds	r0, #12
 8006f9a:	f7ff ff5b 	bl	8006e54 <memcpy>
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	f7ff ffa5 	bl	8006ef0 <_Bfree>
 8006fa6:	4644      	mov	r4, r8
 8006fa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fac:	3501      	adds	r5, #1
 8006fae:	615e      	str	r6, [r3, #20]
 8006fb0:	6125      	str	r5, [r4, #16]
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb8:	08008387 	.word	0x08008387
 8006fbc:	08008398 	.word	0x08008398

08006fc0 <__hi0bits>:
 8006fc0:	0c03      	lsrs	r3, r0, #16
 8006fc2:	041b      	lsls	r3, r3, #16
 8006fc4:	b9d3      	cbnz	r3, 8006ffc <__hi0bits+0x3c>
 8006fc6:	0400      	lsls	r0, r0, #16
 8006fc8:	2310      	movs	r3, #16
 8006fca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006fce:	bf04      	itt	eq
 8006fd0:	0200      	lsleq	r0, r0, #8
 8006fd2:	3308      	addeq	r3, #8
 8006fd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006fd8:	bf04      	itt	eq
 8006fda:	0100      	lsleq	r0, r0, #4
 8006fdc:	3304      	addeq	r3, #4
 8006fde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006fe2:	bf04      	itt	eq
 8006fe4:	0080      	lsleq	r0, r0, #2
 8006fe6:	3302      	addeq	r3, #2
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	db05      	blt.n	8006ff8 <__hi0bits+0x38>
 8006fec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ff0:	f103 0301 	add.w	r3, r3, #1
 8006ff4:	bf08      	it	eq
 8006ff6:	2320      	moveq	r3, #32
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	4770      	bx	lr
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e7e4      	b.n	8006fca <__hi0bits+0xa>

08007000 <__lo0bits>:
 8007000:	6803      	ldr	r3, [r0, #0]
 8007002:	f013 0207 	ands.w	r2, r3, #7
 8007006:	4601      	mov	r1, r0
 8007008:	d00b      	beq.n	8007022 <__lo0bits+0x22>
 800700a:	07da      	lsls	r2, r3, #31
 800700c:	d423      	bmi.n	8007056 <__lo0bits+0x56>
 800700e:	0798      	lsls	r0, r3, #30
 8007010:	bf49      	itett	mi
 8007012:	085b      	lsrmi	r3, r3, #1
 8007014:	089b      	lsrpl	r3, r3, #2
 8007016:	2001      	movmi	r0, #1
 8007018:	600b      	strmi	r3, [r1, #0]
 800701a:	bf5c      	itt	pl
 800701c:	600b      	strpl	r3, [r1, #0]
 800701e:	2002      	movpl	r0, #2
 8007020:	4770      	bx	lr
 8007022:	b298      	uxth	r0, r3
 8007024:	b9a8      	cbnz	r0, 8007052 <__lo0bits+0x52>
 8007026:	0c1b      	lsrs	r3, r3, #16
 8007028:	2010      	movs	r0, #16
 800702a:	b2da      	uxtb	r2, r3
 800702c:	b90a      	cbnz	r2, 8007032 <__lo0bits+0x32>
 800702e:	3008      	adds	r0, #8
 8007030:	0a1b      	lsrs	r3, r3, #8
 8007032:	071a      	lsls	r2, r3, #28
 8007034:	bf04      	itt	eq
 8007036:	091b      	lsreq	r3, r3, #4
 8007038:	3004      	addeq	r0, #4
 800703a:	079a      	lsls	r2, r3, #30
 800703c:	bf04      	itt	eq
 800703e:	089b      	lsreq	r3, r3, #2
 8007040:	3002      	addeq	r0, #2
 8007042:	07da      	lsls	r2, r3, #31
 8007044:	d403      	bmi.n	800704e <__lo0bits+0x4e>
 8007046:	085b      	lsrs	r3, r3, #1
 8007048:	f100 0001 	add.w	r0, r0, #1
 800704c:	d005      	beq.n	800705a <__lo0bits+0x5a>
 800704e:	600b      	str	r3, [r1, #0]
 8007050:	4770      	bx	lr
 8007052:	4610      	mov	r0, r2
 8007054:	e7e9      	b.n	800702a <__lo0bits+0x2a>
 8007056:	2000      	movs	r0, #0
 8007058:	4770      	bx	lr
 800705a:	2020      	movs	r0, #32
 800705c:	4770      	bx	lr
	...

08007060 <__i2b>:
 8007060:	b510      	push	{r4, lr}
 8007062:	460c      	mov	r4, r1
 8007064:	2101      	movs	r1, #1
 8007066:	f7ff ff03 	bl	8006e70 <_Balloc>
 800706a:	4602      	mov	r2, r0
 800706c:	b928      	cbnz	r0, 800707a <__i2b+0x1a>
 800706e:	4b05      	ldr	r3, [pc, #20]	; (8007084 <__i2b+0x24>)
 8007070:	4805      	ldr	r0, [pc, #20]	; (8007088 <__i2b+0x28>)
 8007072:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007076:	f000 fb85 	bl	8007784 <__assert_func>
 800707a:	2301      	movs	r3, #1
 800707c:	6144      	str	r4, [r0, #20]
 800707e:	6103      	str	r3, [r0, #16]
 8007080:	bd10      	pop	{r4, pc}
 8007082:	bf00      	nop
 8007084:	08008387 	.word	0x08008387
 8007088:	08008398 	.word	0x08008398

0800708c <__multiply>:
 800708c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007090:	4691      	mov	r9, r2
 8007092:	690a      	ldr	r2, [r1, #16]
 8007094:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007098:	429a      	cmp	r2, r3
 800709a:	bfb8      	it	lt
 800709c:	460b      	movlt	r3, r1
 800709e:	460c      	mov	r4, r1
 80070a0:	bfbc      	itt	lt
 80070a2:	464c      	movlt	r4, r9
 80070a4:	4699      	movlt	r9, r3
 80070a6:	6927      	ldr	r7, [r4, #16]
 80070a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80070ac:	68a3      	ldr	r3, [r4, #8]
 80070ae:	6861      	ldr	r1, [r4, #4]
 80070b0:	eb07 060a 	add.w	r6, r7, sl
 80070b4:	42b3      	cmp	r3, r6
 80070b6:	b085      	sub	sp, #20
 80070b8:	bfb8      	it	lt
 80070ba:	3101      	addlt	r1, #1
 80070bc:	f7ff fed8 	bl	8006e70 <_Balloc>
 80070c0:	b930      	cbnz	r0, 80070d0 <__multiply+0x44>
 80070c2:	4602      	mov	r2, r0
 80070c4:	4b44      	ldr	r3, [pc, #272]	; (80071d8 <__multiply+0x14c>)
 80070c6:	4845      	ldr	r0, [pc, #276]	; (80071dc <__multiply+0x150>)
 80070c8:	f240 115d 	movw	r1, #349	; 0x15d
 80070cc:	f000 fb5a 	bl	8007784 <__assert_func>
 80070d0:	f100 0514 	add.w	r5, r0, #20
 80070d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070d8:	462b      	mov	r3, r5
 80070da:	2200      	movs	r2, #0
 80070dc:	4543      	cmp	r3, r8
 80070de:	d321      	bcc.n	8007124 <__multiply+0x98>
 80070e0:	f104 0314 	add.w	r3, r4, #20
 80070e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80070e8:	f109 0314 	add.w	r3, r9, #20
 80070ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80070f0:	9202      	str	r2, [sp, #8]
 80070f2:	1b3a      	subs	r2, r7, r4
 80070f4:	3a15      	subs	r2, #21
 80070f6:	f022 0203 	bic.w	r2, r2, #3
 80070fa:	3204      	adds	r2, #4
 80070fc:	f104 0115 	add.w	r1, r4, #21
 8007100:	428f      	cmp	r7, r1
 8007102:	bf38      	it	cc
 8007104:	2204      	movcc	r2, #4
 8007106:	9201      	str	r2, [sp, #4]
 8007108:	9a02      	ldr	r2, [sp, #8]
 800710a:	9303      	str	r3, [sp, #12]
 800710c:	429a      	cmp	r2, r3
 800710e:	d80c      	bhi.n	800712a <__multiply+0x9e>
 8007110:	2e00      	cmp	r6, #0
 8007112:	dd03      	ble.n	800711c <__multiply+0x90>
 8007114:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007118:	2b00      	cmp	r3, #0
 800711a:	d05a      	beq.n	80071d2 <__multiply+0x146>
 800711c:	6106      	str	r6, [r0, #16]
 800711e:	b005      	add	sp, #20
 8007120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007124:	f843 2b04 	str.w	r2, [r3], #4
 8007128:	e7d8      	b.n	80070dc <__multiply+0x50>
 800712a:	f8b3 a000 	ldrh.w	sl, [r3]
 800712e:	f1ba 0f00 	cmp.w	sl, #0
 8007132:	d024      	beq.n	800717e <__multiply+0xf2>
 8007134:	f104 0e14 	add.w	lr, r4, #20
 8007138:	46a9      	mov	r9, r5
 800713a:	f04f 0c00 	mov.w	ip, #0
 800713e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007142:	f8d9 1000 	ldr.w	r1, [r9]
 8007146:	fa1f fb82 	uxth.w	fp, r2
 800714a:	b289      	uxth	r1, r1
 800714c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007150:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007154:	f8d9 2000 	ldr.w	r2, [r9]
 8007158:	4461      	add	r1, ip
 800715a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800715e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007162:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007166:	b289      	uxth	r1, r1
 8007168:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800716c:	4577      	cmp	r7, lr
 800716e:	f849 1b04 	str.w	r1, [r9], #4
 8007172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007176:	d8e2      	bhi.n	800713e <__multiply+0xb2>
 8007178:	9a01      	ldr	r2, [sp, #4]
 800717a:	f845 c002 	str.w	ip, [r5, r2]
 800717e:	9a03      	ldr	r2, [sp, #12]
 8007180:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007184:	3304      	adds	r3, #4
 8007186:	f1b9 0f00 	cmp.w	r9, #0
 800718a:	d020      	beq.n	80071ce <__multiply+0x142>
 800718c:	6829      	ldr	r1, [r5, #0]
 800718e:	f104 0c14 	add.w	ip, r4, #20
 8007192:	46ae      	mov	lr, r5
 8007194:	f04f 0a00 	mov.w	sl, #0
 8007198:	f8bc b000 	ldrh.w	fp, [ip]
 800719c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80071a0:	fb09 220b 	mla	r2, r9, fp, r2
 80071a4:	4492      	add	sl, r2
 80071a6:	b289      	uxth	r1, r1
 80071a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80071ac:	f84e 1b04 	str.w	r1, [lr], #4
 80071b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80071b4:	f8be 1000 	ldrh.w	r1, [lr]
 80071b8:	0c12      	lsrs	r2, r2, #16
 80071ba:	fb09 1102 	mla	r1, r9, r2, r1
 80071be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80071c2:	4567      	cmp	r7, ip
 80071c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80071c8:	d8e6      	bhi.n	8007198 <__multiply+0x10c>
 80071ca:	9a01      	ldr	r2, [sp, #4]
 80071cc:	50a9      	str	r1, [r5, r2]
 80071ce:	3504      	adds	r5, #4
 80071d0:	e79a      	b.n	8007108 <__multiply+0x7c>
 80071d2:	3e01      	subs	r6, #1
 80071d4:	e79c      	b.n	8007110 <__multiply+0x84>
 80071d6:	bf00      	nop
 80071d8:	08008387 	.word	0x08008387
 80071dc:	08008398 	.word	0x08008398

080071e0 <__pow5mult>:
 80071e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e4:	4615      	mov	r5, r2
 80071e6:	f012 0203 	ands.w	r2, r2, #3
 80071ea:	4606      	mov	r6, r0
 80071ec:	460f      	mov	r7, r1
 80071ee:	d007      	beq.n	8007200 <__pow5mult+0x20>
 80071f0:	4c25      	ldr	r4, [pc, #148]	; (8007288 <__pow5mult+0xa8>)
 80071f2:	3a01      	subs	r2, #1
 80071f4:	2300      	movs	r3, #0
 80071f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071fa:	f7ff fe9b 	bl	8006f34 <__multadd>
 80071fe:	4607      	mov	r7, r0
 8007200:	10ad      	asrs	r5, r5, #2
 8007202:	d03d      	beq.n	8007280 <__pow5mult+0xa0>
 8007204:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007206:	b97c      	cbnz	r4, 8007228 <__pow5mult+0x48>
 8007208:	2010      	movs	r0, #16
 800720a:	f7ff fe1b 	bl	8006e44 <malloc>
 800720e:	4602      	mov	r2, r0
 8007210:	6270      	str	r0, [r6, #36]	; 0x24
 8007212:	b928      	cbnz	r0, 8007220 <__pow5mult+0x40>
 8007214:	4b1d      	ldr	r3, [pc, #116]	; (800728c <__pow5mult+0xac>)
 8007216:	481e      	ldr	r0, [pc, #120]	; (8007290 <__pow5mult+0xb0>)
 8007218:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800721c:	f000 fab2 	bl	8007784 <__assert_func>
 8007220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007224:	6004      	str	r4, [r0, #0]
 8007226:	60c4      	str	r4, [r0, #12]
 8007228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800722c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007230:	b94c      	cbnz	r4, 8007246 <__pow5mult+0x66>
 8007232:	f240 2171 	movw	r1, #625	; 0x271
 8007236:	4630      	mov	r0, r6
 8007238:	f7ff ff12 	bl	8007060 <__i2b>
 800723c:	2300      	movs	r3, #0
 800723e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007242:	4604      	mov	r4, r0
 8007244:	6003      	str	r3, [r0, #0]
 8007246:	f04f 0900 	mov.w	r9, #0
 800724a:	07eb      	lsls	r3, r5, #31
 800724c:	d50a      	bpl.n	8007264 <__pow5mult+0x84>
 800724e:	4639      	mov	r1, r7
 8007250:	4622      	mov	r2, r4
 8007252:	4630      	mov	r0, r6
 8007254:	f7ff ff1a 	bl	800708c <__multiply>
 8007258:	4639      	mov	r1, r7
 800725a:	4680      	mov	r8, r0
 800725c:	4630      	mov	r0, r6
 800725e:	f7ff fe47 	bl	8006ef0 <_Bfree>
 8007262:	4647      	mov	r7, r8
 8007264:	106d      	asrs	r5, r5, #1
 8007266:	d00b      	beq.n	8007280 <__pow5mult+0xa0>
 8007268:	6820      	ldr	r0, [r4, #0]
 800726a:	b938      	cbnz	r0, 800727c <__pow5mult+0x9c>
 800726c:	4622      	mov	r2, r4
 800726e:	4621      	mov	r1, r4
 8007270:	4630      	mov	r0, r6
 8007272:	f7ff ff0b 	bl	800708c <__multiply>
 8007276:	6020      	str	r0, [r4, #0]
 8007278:	f8c0 9000 	str.w	r9, [r0]
 800727c:	4604      	mov	r4, r0
 800727e:	e7e4      	b.n	800724a <__pow5mult+0x6a>
 8007280:	4638      	mov	r0, r7
 8007282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007286:	bf00      	nop
 8007288:	080084e8 	.word	0x080084e8
 800728c:	08008315 	.word	0x08008315
 8007290:	08008398 	.word	0x08008398

08007294 <__lshift>:
 8007294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007298:	460c      	mov	r4, r1
 800729a:	6849      	ldr	r1, [r1, #4]
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072a2:	68a3      	ldr	r3, [r4, #8]
 80072a4:	4607      	mov	r7, r0
 80072a6:	4691      	mov	r9, r2
 80072a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072ac:	f108 0601 	add.w	r6, r8, #1
 80072b0:	42b3      	cmp	r3, r6
 80072b2:	db0b      	blt.n	80072cc <__lshift+0x38>
 80072b4:	4638      	mov	r0, r7
 80072b6:	f7ff fddb 	bl	8006e70 <_Balloc>
 80072ba:	4605      	mov	r5, r0
 80072bc:	b948      	cbnz	r0, 80072d2 <__lshift+0x3e>
 80072be:	4602      	mov	r2, r0
 80072c0:	4b2a      	ldr	r3, [pc, #168]	; (800736c <__lshift+0xd8>)
 80072c2:	482b      	ldr	r0, [pc, #172]	; (8007370 <__lshift+0xdc>)
 80072c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80072c8:	f000 fa5c 	bl	8007784 <__assert_func>
 80072cc:	3101      	adds	r1, #1
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	e7ee      	b.n	80072b0 <__lshift+0x1c>
 80072d2:	2300      	movs	r3, #0
 80072d4:	f100 0114 	add.w	r1, r0, #20
 80072d8:	f100 0210 	add.w	r2, r0, #16
 80072dc:	4618      	mov	r0, r3
 80072de:	4553      	cmp	r3, sl
 80072e0:	db37      	blt.n	8007352 <__lshift+0xbe>
 80072e2:	6920      	ldr	r0, [r4, #16]
 80072e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072e8:	f104 0314 	add.w	r3, r4, #20
 80072ec:	f019 091f 	ands.w	r9, r9, #31
 80072f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072f8:	d02f      	beq.n	800735a <__lshift+0xc6>
 80072fa:	f1c9 0e20 	rsb	lr, r9, #32
 80072fe:	468a      	mov	sl, r1
 8007300:	f04f 0c00 	mov.w	ip, #0
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	fa02 f209 	lsl.w	r2, r2, r9
 800730a:	ea42 020c 	orr.w	r2, r2, ip
 800730e:	f84a 2b04 	str.w	r2, [sl], #4
 8007312:	f853 2b04 	ldr.w	r2, [r3], #4
 8007316:	4298      	cmp	r0, r3
 8007318:	fa22 fc0e 	lsr.w	ip, r2, lr
 800731c:	d8f2      	bhi.n	8007304 <__lshift+0x70>
 800731e:	1b03      	subs	r3, r0, r4
 8007320:	3b15      	subs	r3, #21
 8007322:	f023 0303 	bic.w	r3, r3, #3
 8007326:	3304      	adds	r3, #4
 8007328:	f104 0215 	add.w	r2, r4, #21
 800732c:	4290      	cmp	r0, r2
 800732e:	bf38      	it	cc
 8007330:	2304      	movcc	r3, #4
 8007332:	f841 c003 	str.w	ip, [r1, r3]
 8007336:	f1bc 0f00 	cmp.w	ip, #0
 800733a:	d001      	beq.n	8007340 <__lshift+0xac>
 800733c:	f108 0602 	add.w	r6, r8, #2
 8007340:	3e01      	subs	r6, #1
 8007342:	4638      	mov	r0, r7
 8007344:	612e      	str	r6, [r5, #16]
 8007346:	4621      	mov	r1, r4
 8007348:	f7ff fdd2 	bl	8006ef0 <_Bfree>
 800734c:	4628      	mov	r0, r5
 800734e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007352:	f842 0f04 	str.w	r0, [r2, #4]!
 8007356:	3301      	adds	r3, #1
 8007358:	e7c1      	b.n	80072de <__lshift+0x4a>
 800735a:	3904      	subs	r1, #4
 800735c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007360:	f841 2f04 	str.w	r2, [r1, #4]!
 8007364:	4298      	cmp	r0, r3
 8007366:	d8f9      	bhi.n	800735c <__lshift+0xc8>
 8007368:	e7ea      	b.n	8007340 <__lshift+0xac>
 800736a:	bf00      	nop
 800736c:	08008387 	.word	0x08008387
 8007370:	08008398 	.word	0x08008398

08007374 <__mcmp>:
 8007374:	b530      	push	{r4, r5, lr}
 8007376:	6902      	ldr	r2, [r0, #16]
 8007378:	690c      	ldr	r4, [r1, #16]
 800737a:	1b12      	subs	r2, r2, r4
 800737c:	d10e      	bne.n	800739c <__mcmp+0x28>
 800737e:	f100 0314 	add.w	r3, r0, #20
 8007382:	3114      	adds	r1, #20
 8007384:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007388:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800738c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007390:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007394:	42a5      	cmp	r5, r4
 8007396:	d003      	beq.n	80073a0 <__mcmp+0x2c>
 8007398:	d305      	bcc.n	80073a6 <__mcmp+0x32>
 800739a:	2201      	movs	r2, #1
 800739c:	4610      	mov	r0, r2
 800739e:	bd30      	pop	{r4, r5, pc}
 80073a0:	4283      	cmp	r3, r0
 80073a2:	d3f3      	bcc.n	800738c <__mcmp+0x18>
 80073a4:	e7fa      	b.n	800739c <__mcmp+0x28>
 80073a6:	f04f 32ff 	mov.w	r2, #4294967295
 80073aa:	e7f7      	b.n	800739c <__mcmp+0x28>

080073ac <__mdiff>:
 80073ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	460c      	mov	r4, r1
 80073b2:	4606      	mov	r6, r0
 80073b4:	4611      	mov	r1, r2
 80073b6:	4620      	mov	r0, r4
 80073b8:	4690      	mov	r8, r2
 80073ba:	f7ff ffdb 	bl	8007374 <__mcmp>
 80073be:	1e05      	subs	r5, r0, #0
 80073c0:	d110      	bne.n	80073e4 <__mdiff+0x38>
 80073c2:	4629      	mov	r1, r5
 80073c4:	4630      	mov	r0, r6
 80073c6:	f7ff fd53 	bl	8006e70 <_Balloc>
 80073ca:	b930      	cbnz	r0, 80073da <__mdiff+0x2e>
 80073cc:	4b3a      	ldr	r3, [pc, #232]	; (80074b8 <__mdiff+0x10c>)
 80073ce:	4602      	mov	r2, r0
 80073d0:	f240 2132 	movw	r1, #562	; 0x232
 80073d4:	4839      	ldr	r0, [pc, #228]	; (80074bc <__mdiff+0x110>)
 80073d6:	f000 f9d5 	bl	8007784 <__assert_func>
 80073da:	2301      	movs	r3, #1
 80073dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e4:	bfa4      	itt	ge
 80073e6:	4643      	movge	r3, r8
 80073e8:	46a0      	movge	r8, r4
 80073ea:	4630      	mov	r0, r6
 80073ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073f0:	bfa6      	itte	ge
 80073f2:	461c      	movge	r4, r3
 80073f4:	2500      	movge	r5, #0
 80073f6:	2501      	movlt	r5, #1
 80073f8:	f7ff fd3a 	bl	8006e70 <_Balloc>
 80073fc:	b920      	cbnz	r0, 8007408 <__mdiff+0x5c>
 80073fe:	4b2e      	ldr	r3, [pc, #184]	; (80074b8 <__mdiff+0x10c>)
 8007400:	4602      	mov	r2, r0
 8007402:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007406:	e7e5      	b.n	80073d4 <__mdiff+0x28>
 8007408:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800740c:	6926      	ldr	r6, [r4, #16]
 800740e:	60c5      	str	r5, [r0, #12]
 8007410:	f104 0914 	add.w	r9, r4, #20
 8007414:	f108 0514 	add.w	r5, r8, #20
 8007418:	f100 0e14 	add.w	lr, r0, #20
 800741c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007420:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007424:	f108 0210 	add.w	r2, r8, #16
 8007428:	46f2      	mov	sl, lr
 800742a:	2100      	movs	r1, #0
 800742c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007430:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007434:	fa1f f883 	uxth.w	r8, r3
 8007438:	fa11 f18b 	uxtah	r1, r1, fp
 800743c:	0c1b      	lsrs	r3, r3, #16
 800743e:	eba1 0808 	sub.w	r8, r1, r8
 8007442:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007446:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800744a:	fa1f f888 	uxth.w	r8, r8
 800744e:	1419      	asrs	r1, r3, #16
 8007450:	454e      	cmp	r6, r9
 8007452:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007456:	f84a 3b04 	str.w	r3, [sl], #4
 800745a:	d8e7      	bhi.n	800742c <__mdiff+0x80>
 800745c:	1b33      	subs	r3, r6, r4
 800745e:	3b15      	subs	r3, #21
 8007460:	f023 0303 	bic.w	r3, r3, #3
 8007464:	3304      	adds	r3, #4
 8007466:	3415      	adds	r4, #21
 8007468:	42a6      	cmp	r6, r4
 800746a:	bf38      	it	cc
 800746c:	2304      	movcc	r3, #4
 800746e:	441d      	add	r5, r3
 8007470:	4473      	add	r3, lr
 8007472:	469e      	mov	lr, r3
 8007474:	462e      	mov	r6, r5
 8007476:	4566      	cmp	r6, ip
 8007478:	d30e      	bcc.n	8007498 <__mdiff+0xec>
 800747a:	f10c 0203 	add.w	r2, ip, #3
 800747e:	1b52      	subs	r2, r2, r5
 8007480:	f022 0203 	bic.w	r2, r2, #3
 8007484:	3d03      	subs	r5, #3
 8007486:	45ac      	cmp	ip, r5
 8007488:	bf38      	it	cc
 800748a:	2200      	movcc	r2, #0
 800748c:	441a      	add	r2, r3
 800748e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007492:	b17b      	cbz	r3, 80074b4 <__mdiff+0x108>
 8007494:	6107      	str	r7, [r0, #16]
 8007496:	e7a3      	b.n	80073e0 <__mdiff+0x34>
 8007498:	f856 8b04 	ldr.w	r8, [r6], #4
 800749c:	fa11 f288 	uxtah	r2, r1, r8
 80074a0:	1414      	asrs	r4, r2, #16
 80074a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80074a6:	b292      	uxth	r2, r2
 80074a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80074ac:	f84e 2b04 	str.w	r2, [lr], #4
 80074b0:	1421      	asrs	r1, r4, #16
 80074b2:	e7e0      	b.n	8007476 <__mdiff+0xca>
 80074b4:	3f01      	subs	r7, #1
 80074b6:	e7ea      	b.n	800748e <__mdiff+0xe2>
 80074b8:	08008387 	.word	0x08008387
 80074bc:	08008398 	.word	0x08008398

080074c0 <__d2b>:
 80074c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074c4:	4689      	mov	r9, r1
 80074c6:	2101      	movs	r1, #1
 80074c8:	ec57 6b10 	vmov	r6, r7, d0
 80074cc:	4690      	mov	r8, r2
 80074ce:	f7ff fccf 	bl	8006e70 <_Balloc>
 80074d2:	4604      	mov	r4, r0
 80074d4:	b930      	cbnz	r0, 80074e4 <__d2b+0x24>
 80074d6:	4602      	mov	r2, r0
 80074d8:	4b25      	ldr	r3, [pc, #148]	; (8007570 <__d2b+0xb0>)
 80074da:	4826      	ldr	r0, [pc, #152]	; (8007574 <__d2b+0xb4>)
 80074dc:	f240 310a 	movw	r1, #778	; 0x30a
 80074e0:	f000 f950 	bl	8007784 <__assert_func>
 80074e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80074e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074ec:	bb35      	cbnz	r5, 800753c <__d2b+0x7c>
 80074ee:	2e00      	cmp	r6, #0
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	d028      	beq.n	8007546 <__d2b+0x86>
 80074f4:	4668      	mov	r0, sp
 80074f6:	9600      	str	r6, [sp, #0]
 80074f8:	f7ff fd82 	bl	8007000 <__lo0bits>
 80074fc:	9900      	ldr	r1, [sp, #0]
 80074fe:	b300      	cbz	r0, 8007542 <__d2b+0x82>
 8007500:	9a01      	ldr	r2, [sp, #4]
 8007502:	f1c0 0320 	rsb	r3, r0, #32
 8007506:	fa02 f303 	lsl.w	r3, r2, r3
 800750a:	430b      	orrs	r3, r1
 800750c:	40c2      	lsrs	r2, r0
 800750e:	6163      	str	r3, [r4, #20]
 8007510:	9201      	str	r2, [sp, #4]
 8007512:	9b01      	ldr	r3, [sp, #4]
 8007514:	61a3      	str	r3, [r4, #24]
 8007516:	2b00      	cmp	r3, #0
 8007518:	bf14      	ite	ne
 800751a:	2202      	movne	r2, #2
 800751c:	2201      	moveq	r2, #1
 800751e:	6122      	str	r2, [r4, #16]
 8007520:	b1d5      	cbz	r5, 8007558 <__d2b+0x98>
 8007522:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007526:	4405      	add	r5, r0
 8007528:	f8c9 5000 	str.w	r5, [r9]
 800752c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007530:	f8c8 0000 	str.w	r0, [r8]
 8007534:	4620      	mov	r0, r4
 8007536:	b003      	add	sp, #12
 8007538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800753c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007540:	e7d5      	b.n	80074ee <__d2b+0x2e>
 8007542:	6161      	str	r1, [r4, #20]
 8007544:	e7e5      	b.n	8007512 <__d2b+0x52>
 8007546:	a801      	add	r0, sp, #4
 8007548:	f7ff fd5a 	bl	8007000 <__lo0bits>
 800754c:	9b01      	ldr	r3, [sp, #4]
 800754e:	6163      	str	r3, [r4, #20]
 8007550:	2201      	movs	r2, #1
 8007552:	6122      	str	r2, [r4, #16]
 8007554:	3020      	adds	r0, #32
 8007556:	e7e3      	b.n	8007520 <__d2b+0x60>
 8007558:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800755c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007560:	f8c9 0000 	str.w	r0, [r9]
 8007564:	6918      	ldr	r0, [r3, #16]
 8007566:	f7ff fd2b 	bl	8006fc0 <__hi0bits>
 800756a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800756e:	e7df      	b.n	8007530 <__d2b+0x70>
 8007570:	08008387 	.word	0x08008387
 8007574:	08008398 	.word	0x08008398

08007578 <_calloc_r>:
 8007578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800757a:	fba1 2402 	umull	r2, r4, r1, r2
 800757e:	b94c      	cbnz	r4, 8007594 <_calloc_r+0x1c>
 8007580:	4611      	mov	r1, r2
 8007582:	9201      	str	r2, [sp, #4]
 8007584:	f000 f87a 	bl	800767c <_malloc_r>
 8007588:	9a01      	ldr	r2, [sp, #4]
 800758a:	4605      	mov	r5, r0
 800758c:	b930      	cbnz	r0, 800759c <_calloc_r+0x24>
 800758e:	4628      	mov	r0, r5
 8007590:	b003      	add	sp, #12
 8007592:	bd30      	pop	{r4, r5, pc}
 8007594:	220c      	movs	r2, #12
 8007596:	6002      	str	r2, [r0, #0]
 8007598:	2500      	movs	r5, #0
 800759a:	e7f8      	b.n	800758e <_calloc_r+0x16>
 800759c:	4621      	mov	r1, r4
 800759e:	f7fe f95f 	bl	8005860 <memset>
 80075a2:	e7f4      	b.n	800758e <_calloc_r+0x16>

080075a4 <_free_r>:
 80075a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075a6:	2900      	cmp	r1, #0
 80075a8:	d044      	beq.n	8007634 <_free_r+0x90>
 80075aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ae:	9001      	str	r0, [sp, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f1a1 0404 	sub.w	r4, r1, #4
 80075b6:	bfb8      	it	lt
 80075b8:	18e4      	addlt	r4, r4, r3
 80075ba:	f000 f925 	bl	8007808 <__malloc_lock>
 80075be:	4a1e      	ldr	r2, [pc, #120]	; (8007638 <_free_r+0x94>)
 80075c0:	9801      	ldr	r0, [sp, #4]
 80075c2:	6813      	ldr	r3, [r2, #0]
 80075c4:	b933      	cbnz	r3, 80075d4 <_free_r+0x30>
 80075c6:	6063      	str	r3, [r4, #4]
 80075c8:	6014      	str	r4, [r2, #0]
 80075ca:	b003      	add	sp, #12
 80075cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075d0:	f000 b920 	b.w	8007814 <__malloc_unlock>
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	d908      	bls.n	80075ea <_free_r+0x46>
 80075d8:	6825      	ldr	r5, [r4, #0]
 80075da:	1961      	adds	r1, r4, r5
 80075dc:	428b      	cmp	r3, r1
 80075de:	bf01      	itttt	eq
 80075e0:	6819      	ldreq	r1, [r3, #0]
 80075e2:	685b      	ldreq	r3, [r3, #4]
 80075e4:	1949      	addeq	r1, r1, r5
 80075e6:	6021      	streq	r1, [r4, #0]
 80075e8:	e7ed      	b.n	80075c6 <_free_r+0x22>
 80075ea:	461a      	mov	r2, r3
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	b10b      	cbz	r3, 80075f4 <_free_r+0x50>
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	d9fa      	bls.n	80075ea <_free_r+0x46>
 80075f4:	6811      	ldr	r1, [r2, #0]
 80075f6:	1855      	adds	r5, r2, r1
 80075f8:	42a5      	cmp	r5, r4
 80075fa:	d10b      	bne.n	8007614 <_free_r+0x70>
 80075fc:	6824      	ldr	r4, [r4, #0]
 80075fe:	4421      	add	r1, r4
 8007600:	1854      	adds	r4, r2, r1
 8007602:	42a3      	cmp	r3, r4
 8007604:	6011      	str	r1, [r2, #0]
 8007606:	d1e0      	bne.n	80075ca <_free_r+0x26>
 8007608:	681c      	ldr	r4, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	6053      	str	r3, [r2, #4]
 800760e:	4421      	add	r1, r4
 8007610:	6011      	str	r1, [r2, #0]
 8007612:	e7da      	b.n	80075ca <_free_r+0x26>
 8007614:	d902      	bls.n	800761c <_free_r+0x78>
 8007616:	230c      	movs	r3, #12
 8007618:	6003      	str	r3, [r0, #0]
 800761a:	e7d6      	b.n	80075ca <_free_r+0x26>
 800761c:	6825      	ldr	r5, [r4, #0]
 800761e:	1961      	adds	r1, r4, r5
 8007620:	428b      	cmp	r3, r1
 8007622:	bf04      	itt	eq
 8007624:	6819      	ldreq	r1, [r3, #0]
 8007626:	685b      	ldreq	r3, [r3, #4]
 8007628:	6063      	str	r3, [r4, #4]
 800762a:	bf04      	itt	eq
 800762c:	1949      	addeq	r1, r1, r5
 800762e:	6021      	streq	r1, [r4, #0]
 8007630:	6054      	str	r4, [r2, #4]
 8007632:	e7ca      	b.n	80075ca <_free_r+0x26>
 8007634:	b003      	add	sp, #12
 8007636:	bd30      	pop	{r4, r5, pc}
 8007638:	200002b8 	.word	0x200002b8

0800763c <sbrk_aligned>:
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	4e0e      	ldr	r6, [pc, #56]	; (8007678 <sbrk_aligned+0x3c>)
 8007640:	460c      	mov	r4, r1
 8007642:	6831      	ldr	r1, [r6, #0]
 8007644:	4605      	mov	r5, r0
 8007646:	b911      	cbnz	r1, 800764e <sbrk_aligned+0x12>
 8007648:	f000 f88c 	bl	8007764 <_sbrk_r>
 800764c:	6030      	str	r0, [r6, #0]
 800764e:	4621      	mov	r1, r4
 8007650:	4628      	mov	r0, r5
 8007652:	f000 f887 	bl	8007764 <_sbrk_r>
 8007656:	1c43      	adds	r3, r0, #1
 8007658:	d00a      	beq.n	8007670 <sbrk_aligned+0x34>
 800765a:	1cc4      	adds	r4, r0, #3
 800765c:	f024 0403 	bic.w	r4, r4, #3
 8007660:	42a0      	cmp	r0, r4
 8007662:	d007      	beq.n	8007674 <sbrk_aligned+0x38>
 8007664:	1a21      	subs	r1, r4, r0
 8007666:	4628      	mov	r0, r5
 8007668:	f000 f87c 	bl	8007764 <_sbrk_r>
 800766c:	3001      	adds	r0, #1
 800766e:	d101      	bne.n	8007674 <sbrk_aligned+0x38>
 8007670:	f04f 34ff 	mov.w	r4, #4294967295
 8007674:	4620      	mov	r0, r4
 8007676:	bd70      	pop	{r4, r5, r6, pc}
 8007678:	200002bc 	.word	0x200002bc

0800767c <_malloc_r>:
 800767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007680:	1ccd      	adds	r5, r1, #3
 8007682:	f025 0503 	bic.w	r5, r5, #3
 8007686:	3508      	adds	r5, #8
 8007688:	2d0c      	cmp	r5, #12
 800768a:	bf38      	it	cc
 800768c:	250c      	movcc	r5, #12
 800768e:	2d00      	cmp	r5, #0
 8007690:	4607      	mov	r7, r0
 8007692:	db01      	blt.n	8007698 <_malloc_r+0x1c>
 8007694:	42a9      	cmp	r1, r5
 8007696:	d905      	bls.n	80076a4 <_malloc_r+0x28>
 8007698:	230c      	movs	r3, #12
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	2600      	movs	r6, #0
 800769e:	4630      	mov	r0, r6
 80076a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a4:	4e2e      	ldr	r6, [pc, #184]	; (8007760 <_malloc_r+0xe4>)
 80076a6:	f000 f8af 	bl	8007808 <__malloc_lock>
 80076aa:	6833      	ldr	r3, [r6, #0]
 80076ac:	461c      	mov	r4, r3
 80076ae:	bb34      	cbnz	r4, 80076fe <_malloc_r+0x82>
 80076b0:	4629      	mov	r1, r5
 80076b2:	4638      	mov	r0, r7
 80076b4:	f7ff ffc2 	bl	800763c <sbrk_aligned>
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	4604      	mov	r4, r0
 80076bc:	d14d      	bne.n	800775a <_malloc_r+0xde>
 80076be:	6834      	ldr	r4, [r6, #0]
 80076c0:	4626      	mov	r6, r4
 80076c2:	2e00      	cmp	r6, #0
 80076c4:	d140      	bne.n	8007748 <_malloc_r+0xcc>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	4631      	mov	r1, r6
 80076ca:	4638      	mov	r0, r7
 80076cc:	eb04 0803 	add.w	r8, r4, r3
 80076d0:	f000 f848 	bl	8007764 <_sbrk_r>
 80076d4:	4580      	cmp	r8, r0
 80076d6:	d13a      	bne.n	800774e <_malloc_r+0xd2>
 80076d8:	6821      	ldr	r1, [r4, #0]
 80076da:	3503      	adds	r5, #3
 80076dc:	1a6d      	subs	r5, r5, r1
 80076de:	f025 0503 	bic.w	r5, r5, #3
 80076e2:	3508      	adds	r5, #8
 80076e4:	2d0c      	cmp	r5, #12
 80076e6:	bf38      	it	cc
 80076e8:	250c      	movcc	r5, #12
 80076ea:	4629      	mov	r1, r5
 80076ec:	4638      	mov	r0, r7
 80076ee:	f7ff ffa5 	bl	800763c <sbrk_aligned>
 80076f2:	3001      	adds	r0, #1
 80076f4:	d02b      	beq.n	800774e <_malloc_r+0xd2>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	442b      	add	r3, r5
 80076fa:	6023      	str	r3, [r4, #0]
 80076fc:	e00e      	b.n	800771c <_malloc_r+0xa0>
 80076fe:	6822      	ldr	r2, [r4, #0]
 8007700:	1b52      	subs	r2, r2, r5
 8007702:	d41e      	bmi.n	8007742 <_malloc_r+0xc6>
 8007704:	2a0b      	cmp	r2, #11
 8007706:	d916      	bls.n	8007736 <_malloc_r+0xba>
 8007708:	1961      	adds	r1, r4, r5
 800770a:	42a3      	cmp	r3, r4
 800770c:	6025      	str	r5, [r4, #0]
 800770e:	bf18      	it	ne
 8007710:	6059      	strne	r1, [r3, #4]
 8007712:	6863      	ldr	r3, [r4, #4]
 8007714:	bf08      	it	eq
 8007716:	6031      	streq	r1, [r6, #0]
 8007718:	5162      	str	r2, [r4, r5]
 800771a:	604b      	str	r3, [r1, #4]
 800771c:	4638      	mov	r0, r7
 800771e:	f104 060b 	add.w	r6, r4, #11
 8007722:	f000 f877 	bl	8007814 <__malloc_unlock>
 8007726:	f026 0607 	bic.w	r6, r6, #7
 800772a:	1d23      	adds	r3, r4, #4
 800772c:	1af2      	subs	r2, r6, r3
 800772e:	d0b6      	beq.n	800769e <_malloc_r+0x22>
 8007730:	1b9b      	subs	r3, r3, r6
 8007732:	50a3      	str	r3, [r4, r2]
 8007734:	e7b3      	b.n	800769e <_malloc_r+0x22>
 8007736:	6862      	ldr	r2, [r4, #4]
 8007738:	42a3      	cmp	r3, r4
 800773a:	bf0c      	ite	eq
 800773c:	6032      	streq	r2, [r6, #0]
 800773e:	605a      	strne	r2, [r3, #4]
 8007740:	e7ec      	b.n	800771c <_malloc_r+0xa0>
 8007742:	4623      	mov	r3, r4
 8007744:	6864      	ldr	r4, [r4, #4]
 8007746:	e7b2      	b.n	80076ae <_malloc_r+0x32>
 8007748:	4634      	mov	r4, r6
 800774a:	6876      	ldr	r6, [r6, #4]
 800774c:	e7b9      	b.n	80076c2 <_malloc_r+0x46>
 800774e:	230c      	movs	r3, #12
 8007750:	603b      	str	r3, [r7, #0]
 8007752:	4638      	mov	r0, r7
 8007754:	f000 f85e 	bl	8007814 <__malloc_unlock>
 8007758:	e7a1      	b.n	800769e <_malloc_r+0x22>
 800775a:	6025      	str	r5, [r4, #0]
 800775c:	e7de      	b.n	800771c <_malloc_r+0xa0>
 800775e:	bf00      	nop
 8007760:	200002b8 	.word	0x200002b8

08007764 <_sbrk_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4d06      	ldr	r5, [pc, #24]	; (8007780 <_sbrk_r+0x1c>)
 8007768:	2300      	movs	r3, #0
 800776a:	4604      	mov	r4, r0
 800776c:	4608      	mov	r0, r1
 800776e:	602b      	str	r3, [r5, #0]
 8007770:	f7f9 ff4e 	bl	8001610 <_sbrk>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d102      	bne.n	800777e <_sbrk_r+0x1a>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	b103      	cbz	r3, 800777e <_sbrk_r+0x1a>
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	200002c0 	.word	0x200002c0

08007784 <__assert_func>:
 8007784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007786:	4614      	mov	r4, r2
 8007788:	461a      	mov	r2, r3
 800778a:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <__assert_func+0x2c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4605      	mov	r5, r0
 8007790:	68d8      	ldr	r0, [r3, #12]
 8007792:	b14c      	cbz	r4, 80077a8 <__assert_func+0x24>
 8007794:	4b07      	ldr	r3, [pc, #28]	; (80077b4 <__assert_func+0x30>)
 8007796:	9100      	str	r1, [sp, #0]
 8007798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800779c:	4906      	ldr	r1, [pc, #24]	; (80077b8 <__assert_func+0x34>)
 800779e:	462b      	mov	r3, r5
 80077a0:	f000 f80e 	bl	80077c0 <fiprintf>
 80077a4:	f000 fa64 	bl	8007c70 <abort>
 80077a8:	4b04      	ldr	r3, [pc, #16]	; (80077bc <__assert_func+0x38>)
 80077aa:	461c      	mov	r4, r3
 80077ac:	e7f3      	b.n	8007796 <__assert_func+0x12>
 80077ae:	bf00      	nop
 80077b0:	2000000c 	.word	0x2000000c
 80077b4:	080084f4 	.word	0x080084f4
 80077b8:	08008501 	.word	0x08008501
 80077bc:	0800852f 	.word	0x0800852f

080077c0 <fiprintf>:
 80077c0:	b40e      	push	{r1, r2, r3}
 80077c2:	b503      	push	{r0, r1, lr}
 80077c4:	4601      	mov	r1, r0
 80077c6:	ab03      	add	r3, sp, #12
 80077c8:	4805      	ldr	r0, [pc, #20]	; (80077e0 <fiprintf+0x20>)
 80077ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ce:	6800      	ldr	r0, [r0, #0]
 80077d0:	9301      	str	r3, [sp, #4]
 80077d2:	f000 f84f 	bl	8007874 <_vfiprintf_r>
 80077d6:	b002      	add	sp, #8
 80077d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077dc:	b003      	add	sp, #12
 80077de:	4770      	bx	lr
 80077e0:	2000000c 	.word	0x2000000c

080077e4 <__ascii_mbtowc>:
 80077e4:	b082      	sub	sp, #8
 80077e6:	b901      	cbnz	r1, 80077ea <__ascii_mbtowc+0x6>
 80077e8:	a901      	add	r1, sp, #4
 80077ea:	b142      	cbz	r2, 80077fe <__ascii_mbtowc+0x1a>
 80077ec:	b14b      	cbz	r3, 8007802 <__ascii_mbtowc+0x1e>
 80077ee:	7813      	ldrb	r3, [r2, #0]
 80077f0:	600b      	str	r3, [r1, #0]
 80077f2:	7812      	ldrb	r2, [r2, #0]
 80077f4:	1e10      	subs	r0, r2, #0
 80077f6:	bf18      	it	ne
 80077f8:	2001      	movne	r0, #1
 80077fa:	b002      	add	sp, #8
 80077fc:	4770      	bx	lr
 80077fe:	4610      	mov	r0, r2
 8007800:	e7fb      	b.n	80077fa <__ascii_mbtowc+0x16>
 8007802:	f06f 0001 	mvn.w	r0, #1
 8007806:	e7f8      	b.n	80077fa <__ascii_mbtowc+0x16>

08007808 <__malloc_lock>:
 8007808:	4801      	ldr	r0, [pc, #4]	; (8007810 <__malloc_lock+0x8>)
 800780a:	f000 bbf1 	b.w	8007ff0 <__retarget_lock_acquire_recursive>
 800780e:	bf00      	nop
 8007810:	200002c4 	.word	0x200002c4

08007814 <__malloc_unlock>:
 8007814:	4801      	ldr	r0, [pc, #4]	; (800781c <__malloc_unlock+0x8>)
 8007816:	f000 bbec 	b.w	8007ff2 <__retarget_lock_release_recursive>
 800781a:	bf00      	nop
 800781c:	200002c4 	.word	0x200002c4

08007820 <__sfputc_r>:
 8007820:	6893      	ldr	r3, [r2, #8]
 8007822:	3b01      	subs	r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	b410      	push	{r4}
 8007828:	6093      	str	r3, [r2, #8]
 800782a:	da08      	bge.n	800783e <__sfputc_r+0x1e>
 800782c:	6994      	ldr	r4, [r2, #24]
 800782e:	42a3      	cmp	r3, r4
 8007830:	db01      	blt.n	8007836 <__sfputc_r+0x16>
 8007832:	290a      	cmp	r1, #10
 8007834:	d103      	bne.n	800783e <__sfputc_r+0x1e>
 8007836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800783a:	f000 b94b 	b.w	8007ad4 <__swbuf_r>
 800783e:	6813      	ldr	r3, [r2, #0]
 8007840:	1c58      	adds	r0, r3, #1
 8007842:	6010      	str	r0, [r2, #0]
 8007844:	7019      	strb	r1, [r3, #0]
 8007846:	4608      	mov	r0, r1
 8007848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800784c:	4770      	bx	lr

0800784e <__sfputs_r>:
 800784e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007850:	4606      	mov	r6, r0
 8007852:	460f      	mov	r7, r1
 8007854:	4614      	mov	r4, r2
 8007856:	18d5      	adds	r5, r2, r3
 8007858:	42ac      	cmp	r4, r5
 800785a:	d101      	bne.n	8007860 <__sfputs_r+0x12>
 800785c:	2000      	movs	r0, #0
 800785e:	e007      	b.n	8007870 <__sfputs_r+0x22>
 8007860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007864:	463a      	mov	r2, r7
 8007866:	4630      	mov	r0, r6
 8007868:	f7ff ffda 	bl	8007820 <__sfputc_r>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	d1f3      	bne.n	8007858 <__sfputs_r+0xa>
 8007870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007874 <_vfiprintf_r>:
 8007874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007878:	460d      	mov	r5, r1
 800787a:	b09d      	sub	sp, #116	; 0x74
 800787c:	4614      	mov	r4, r2
 800787e:	4698      	mov	r8, r3
 8007880:	4606      	mov	r6, r0
 8007882:	b118      	cbz	r0, 800788c <_vfiprintf_r+0x18>
 8007884:	6983      	ldr	r3, [r0, #24]
 8007886:	b90b      	cbnz	r3, 800788c <_vfiprintf_r+0x18>
 8007888:	f000 fb14 	bl	8007eb4 <__sinit>
 800788c:	4b89      	ldr	r3, [pc, #548]	; (8007ab4 <_vfiprintf_r+0x240>)
 800788e:	429d      	cmp	r5, r3
 8007890:	d11b      	bne.n	80078ca <_vfiprintf_r+0x56>
 8007892:	6875      	ldr	r5, [r6, #4]
 8007894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007896:	07d9      	lsls	r1, r3, #31
 8007898:	d405      	bmi.n	80078a6 <_vfiprintf_r+0x32>
 800789a:	89ab      	ldrh	r3, [r5, #12]
 800789c:	059a      	lsls	r2, r3, #22
 800789e:	d402      	bmi.n	80078a6 <_vfiprintf_r+0x32>
 80078a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078a2:	f000 fba5 	bl	8007ff0 <__retarget_lock_acquire_recursive>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	071b      	lsls	r3, r3, #28
 80078aa:	d501      	bpl.n	80078b0 <_vfiprintf_r+0x3c>
 80078ac:	692b      	ldr	r3, [r5, #16]
 80078ae:	b9eb      	cbnz	r3, 80078ec <_vfiprintf_r+0x78>
 80078b0:	4629      	mov	r1, r5
 80078b2:	4630      	mov	r0, r6
 80078b4:	f000 f96e 	bl	8007b94 <__swsetup_r>
 80078b8:	b1c0      	cbz	r0, 80078ec <_vfiprintf_r+0x78>
 80078ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078bc:	07dc      	lsls	r4, r3, #31
 80078be:	d50e      	bpl.n	80078de <_vfiprintf_r+0x6a>
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295
 80078c4:	b01d      	add	sp, #116	; 0x74
 80078c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ca:	4b7b      	ldr	r3, [pc, #492]	; (8007ab8 <_vfiprintf_r+0x244>)
 80078cc:	429d      	cmp	r5, r3
 80078ce:	d101      	bne.n	80078d4 <_vfiprintf_r+0x60>
 80078d0:	68b5      	ldr	r5, [r6, #8]
 80078d2:	e7df      	b.n	8007894 <_vfiprintf_r+0x20>
 80078d4:	4b79      	ldr	r3, [pc, #484]	; (8007abc <_vfiprintf_r+0x248>)
 80078d6:	429d      	cmp	r5, r3
 80078d8:	bf08      	it	eq
 80078da:	68f5      	ldreq	r5, [r6, #12]
 80078dc:	e7da      	b.n	8007894 <_vfiprintf_r+0x20>
 80078de:	89ab      	ldrh	r3, [r5, #12]
 80078e0:	0598      	lsls	r0, r3, #22
 80078e2:	d4ed      	bmi.n	80078c0 <_vfiprintf_r+0x4c>
 80078e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078e6:	f000 fb84 	bl	8007ff2 <__retarget_lock_release_recursive>
 80078ea:	e7e9      	b.n	80078c0 <_vfiprintf_r+0x4c>
 80078ec:	2300      	movs	r3, #0
 80078ee:	9309      	str	r3, [sp, #36]	; 0x24
 80078f0:	2320      	movs	r3, #32
 80078f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80078fa:	2330      	movs	r3, #48	; 0x30
 80078fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ac0 <_vfiprintf_r+0x24c>
 8007900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007904:	f04f 0901 	mov.w	r9, #1
 8007908:	4623      	mov	r3, r4
 800790a:	469a      	mov	sl, r3
 800790c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007910:	b10a      	cbz	r2, 8007916 <_vfiprintf_r+0xa2>
 8007912:	2a25      	cmp	r2, #37	; 0x25
 8007914:	d1f9      	bne.n	800790a <_vfiprintf_r+0x96>
 8007916:	ebba 0b04 	subs.w	fp, sl, r4
 800791a:	d00b      	beq.n	8007934 <_vfiprintf_r+0xc0>
 800791c:	465b      	mov	r3, fp
 800791e:	4622      	mov	r2, r4
 8007920:	4629      	mov	r1, r5
 8007922:	4630      	mov	r0, r6
 8007924:	f7ff ff93 	bl	800784e <__sfputs_r>
 8007928:	3001      	adds	r0, #1
 800792a:	f000 80aa 	beq.w	8007a82 <_vfiprintf_r+0x20e>
 800792e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007930:	445a      	add	r2, fp
 8007932:	9209      	str	r2, [sp, #36]	; 0x24
 8007934:	f89a 3000 	ldrb.w	r3, [sl]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80a2 	beq.w	8007a82 <_vfiprintf_r+0x20e>
 800793e:	2300      	movs	r3, #0
 8007940:	f04f 32ff 	mov.w	r2, #4294967295
 8007944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007948:	f10a 0a01 	add.w	sl, sl, #1
 800794c:	9304      	str	r3, [sp, #16]
 800794e:	9307      	str	r3, [sp, #28]
 8007950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007954:	931a      	str	r3, [sp, #104]	; 0x68
 8007956:	4654      	mov	r4, sl
 8007958:	2205      	movs	r2, #5
 800795a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800795e:	4858      	ldr	r0, [pc, #352]	; (8007ac0 <_vfiprintf_r+0x24c>)
 8007960:	f7f8 fc5e 	bl	8000220 <memchr>
 8007964:	9a04      	ldr	r2, [sp, #16]
 8007966:	b9d8      	cbnz	r0, 80079a0 <_vfiprintf_r+0x12c>
 8007968:	06d1      	lsls	r1, r2, #27
 800796a:	bf44      	itt	mi
 800796c:	2320      	movmi	r3, #32
 800796e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007972:	0713      	lsls	r3, r2, #28
 8007974:	bf44      	itt	mi
 8007976:	232b      	movmi	r3, #43	; 0x2b
 8007978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800797c:	f89a 3000 	ldrb.w	r3, [sl]
 8007980:	2b2a      	cmp	r3, #42	; 0x2a
 8007982:	d015      	beq.n	80079b0 <_vfiprintf_r+0x13c>
 8007984:	9a07      	ldr	r2, [sp, #28]
 8007986:	4654      	mov	r4, sl
 8007988:	2000      	movs	r0, #0
 800798a:	f04f 0c0a 	mov.w	ip, #10
 800798e:	4621      	mov	r1, r4
 8007990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007994:	3b30      	subs	r3, #48	; 0x30
 8007996:	2b09      	cmp	r3, #9
 8007998:	d94e      	bls.n	8007a38 <_vfiprintf_r+0x1c4>
 800799a:	b1b0      	cbz	r0, 80079ca <_vfiprintf_r+0x156>
 800799c:	9207      	str	r2, [sp, #28]
 800799e:	e014      	b.n	80079ca <_vfiprintf_r+0x156>
 80079a0:	eba0 0308 	sub.w	r3, r0, r8
 80079a4:	fa09 f303 	lsl.w	r3, r9, r3
 80079a8:	4313      	orrs	r3, r2
 80079aa:	9304      	str	r3, [sp, #16]
 80079ac:	46a2      	mov	sl, r4
 80079ae:	e7d2      	b.n	8007956 <_vfiprintf_r+0xe2>
 80079b0:	9b03      	ldr	r3, [sp, #12]
 80079b2:	1d19      	adds	r1, r3, #4
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	9103      	str	r1, [sp, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bfbb      	ittet	lt
 80079bc:	425b      	neglt	r3, r3
 80079be:	f042 0202 	orrlt.w	r2, r2, #2
 80079c2:	9307      	strge	r3, [sp, #28]
 80079c4:	9307      	strlt	r3, [sp, #28]
 80079c6:	bfb8      	it	lt
 80079c8:	9204      	strlt	r2, [sp, #16]
 80079ca:	7823      	ldrb	r3, [r4, #0]
 80079cc:	2b2e      	cmp	r3, #46	; 0x2e
 80079ce:	d10c      	bne.n	80079ea <_vfiprintf_r+0x176>
 80079d0:	7863      	ldrb	r3, [r4, #1]
 80079d2:	2b2a      	cmp	r3, #42	; 0x2a
 80079d4:	d135      	bne.n	8007a42 <_vfiprintf_r+0x1ce>
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	1d1a      	adds	r2, r3, #4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	9203      	str	r2, [sp, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bfb8      	it	lt
 80079e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80079e6:	3402      	adds	r4, #2
 80079e8:	9305      	str	r3, [sp, #20]
 80079ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ad0 <_vfiprintf_r+0x25c>
 80079ee:	7821      	ldrb	r1, [r4, #0]
 80079f0:	2203      	movs	r2, #3
 80079f2:	4650      	mov	r0, sl
 80079f4:	f7f8 fc14 	bl	8000220 <memchr>
 80079f8:	b140      	cbz	r0, 8007a0c <_vfiprintf_r+0x198>
 80079fa:	2340      	movs	r3, #64	; 0x40
 80079fc:	eba0 000a 	sub.w	r0, r0, sl
 8007a00:	fa03 f000 	lsl.w	r0, r3, r0
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	4303      	orrs	r3, r0
 8007a08:	3401      	adds	r4, #1
 8007a0a:	9304      	str	r3, [sp, #16]
 8007a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a10:	482c      	ldr	r0, [pc, #176]	; (8007ac4 <_vfiprintf_r+0x250>)
 8007a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a16:	2206      	movs	r2, #6
 8007a18:	f7f8 fc02 	bl	8000220 <memchr>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d03f      	beq.n	8007aa0 <_vfiprintf_r+0x22c>
 8007a20:	4b29      	ldr	r3, [pc, #164]	; (8007ac8 <_vfiprintf_r+0x254>)
 8007a22:	bb1b      	cbnz	r3, 8007a6c <_vfiprintf_r+0x1f8>
 8007a24:	9b03      	ldr	r3, [sp, #12]
 8007a26:	3307      	adds	r3, #7
 8007a28:	f023 0307 	bic.w	r3, r3, #7
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	9303      	str	r3, [sp, #12]
 8007a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a32:	443b      	add	r3, r7
 8007a34:	9309      	str	r3, [sp, #36]	; 0x24
 8007a36:	e767      	b.n	8007908 <_vfiprintf_r+0x94>
 8007a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	2001      	movs	r0, #1
 8007a40:	e7a5      	b.n	800798e <_vfiprintf_r+0x11a>
 8007a42:	2300      	movs	r3, #0
 8007a44:	3401      	adds	r4, #1
 8007a46:	9305      	str	r3, [sp, #20]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f04f 0c0a 	mov.w	ip, #10
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a54:	3a30      	subs	r2, #48	; 0x30
 8007a56:	2a09      	cmp	r2, #9
 8007a58:	d903      	bls.n	8007a62 <_vfiprintf_r+0x1ee>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0c5      	beq.n	80079ea <_vfiprintf_r+0x176>
 8007a5e:	9105      	str	r1, [sp, #20]
 8007a60:	e7c3      	b.n	80079ea <_vfiprintf_r+0x176>
 8007a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a66:	4604      	mov	r4, r0
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e7f0      	b.n	8007a4e <_vfiprintf_r+0x1da>
 8007a6c:	ab03      	add	r3, sp, #12
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	462a      	mov	r2, r5
 8007a72:	4b16      	ldr	r3, [pc, #88]	; (8007acc <_vfiprintf_r+0x258>)
 8007a74:	a904      	add	r1, sp, #16
 8007a76:	4630      	mov	r0, r6
 8007a78:	f7fd ff9a 	bl	80059b0 <_printf_float>
 8007a7c:	4607      	mov	r7, r0
 8007a7e:	1c78      	adds	r0, r7, #1
 8007a80:	d1d6      	bne.n	8007a30 <_vfiprintf_r+0x1bc>
 8007a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a84:	07d9      	lsls	r1, r3, #31
 8007a86:	d405      	bmi.n	8007a94 <_vfiprintf_r+0x220>
 8007a88:	89ab      	ldrh	r3, [r5, #12]
 8007a8a:	059a      	lsls	r2, r3, #22
 8007a8c:	d402      	bmi.n	8007a94 <_vfiprintf_r+0x220>
 8007a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a90:	f000 faaf 	bl	8007ff2 <__retarget_lock_release_recursive>
 8007a94:	89ab      	ldrh	r3, [r5, #12]
 8007a96:	065b      	lsls	r3, r3, #25
 8007a98:	f53f af12 	bmi.w	80078c0 <_vfiprintf_r+0x4c>
 8007a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a9e:	e711      	b.n	80078c4 <_vfiprintf_r+0x50>
 8007aa0:	ab03      	add	r3, sp, #12
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	462a      	mov	r2, r5
 8007aa6:	4b09      	ldr	r3, [pc, #36]	; (8007acc <_vfiprintf_r+0x258>)
 8007aa8:	a904      	add	r1, sp, #16
 8007aaa:	4630      	mov	r0, r6
 8007aac:	f7fe fa24 	bl	8005ef8 <_printf_i>
 8007ab0:	e7e4      	b.n	8007a7c <_vfiprintf_r+0x208>
 8007ab2:	bf00      	nop
 8007ab4:	0800866c 	.word	0x0800866c
 8007ab8:	0800868c 	.word	0x0800868c
 8007abc:	0800864c 	.word	0x0800864c
 8007ac0:	0800853a 	.word	0x0800853a
 8007ac4:	08008544 	.word	0x08008544
 8007ac8:	080059b1 	.word	0x080059b1
 8007acc:	0800784f 	.word	0x0800784f
 8007ad0:	08008540 	.word	0x08008540

08007ad4 <__swbuf_r>:
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad6:	460e      	mov	r6, r1
 8007ad8:	4614      	mov	r4, r2
 8007ada:	4605      	mov	r5, r0
 8007adc:	b118      	cbz	r0, 8007ae6 <__swbuf_r+0x12>
 8007ade:	6983      	ldr	r3, [r0, #24]
 8007ae0:	b90b      	cbnz	r3, 8007ae6 <__swbuf_r+0x12>
 8007ae2:	f000 f9e7 	bl	8007eb4 <__sinit>
 8007ae6:	4b21      	ldr	r3, [pc, #132]	; (8007b6c <__swbuf_r+0x98>)
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	d12b      	bne.n	8007b44 <__swbuf_r+0x70>
 8007aec:	686c      	ldr	r4, [r5, #4]
 8007aee:	69a3      	ldr	r3, [r4, #24]
 8007af0:	60a3      	str	r3, [r4, #8]
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	071a      	lsls	r2, r3, #28
 8007af6:	d52f      	bpl.n	8007b58 <__swbuf_r+0x84>
 8007af8:	6923      	ldr	r3, [r4, #16]
 8007afa:	b36b      	cbz	r3, 8007b58 <__swbuf_r+0x84>
 8007afc:	6923      	ldr	r3, [r4, #16]
 8007afe:	6820      	ldr	r0, [r4, #0]
 8007b00:	1ac0      	subs	r0, r0, r3
 8007b02:	6963      	ldr	r3, [r4, #20]
 8007b04:	b2f6      	uxtb	r6, r6
 8007b06:	4283      	cmp	r3, r0
 8007b08:	4637      	mov	r7, r6
 8007b0a:	dc04      	bgt.n	8007b16 <__swbuf_r+0x42>
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f000 f93c 	bl	8007d8c <_fflush_r>
 8007b14:	bb30      	cbnz	r0, 8007b64 <__swbuf_r+0x90>
 8007b16:	68a3      	ldr	r3, [r4, #8]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	60a3      	str	r3, [r4, #8]
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	6022      	str	r2, [r4, #0]
 8007b22:	701e      	strb	r6, [r3, #0]
 8007b24:	6963      	ldr	r3, [r4, #20]
 8007b26:	3001      	adds	r0, #1
 8007b28:	4283      	cmp	r3, r0
 8007b2a:	d004      	beq.n	8007b36 <__swbuf_r+0x62>
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	07db      	lsls	r3, r3, #31
 8007b30:	d506      	bpl.n	8007b40 <__swbuf_r+0x6c>
 8007b32:	2e0a      	cmp	r6, #10
 8007b34:	d104      	bne.n	8007b40 <__swbuf_r+0x6c>
 8007b36:	4621      	mov	r1, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f000 f927 	bl	8007d8c <_fflush_r>
 8007b3e:	b988      	cbnz	r0, 8007b64 <__swbuf_r+0x90>
 8007b40:	4638      	mov	r0, r7
 8007b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b44:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <__swbuf_r+0x9c>)
 8007b46:	429c      	cmp	r4, r3
 8007b48:	d101      	bne.n	8007b4e <__swbuf_r+0x7a>
 8007b4a:	68ac      	ldr	r4, [r5, #8]
 8007b4c:	e7cf      	b.n	8007aee <__swbuf_r+0x1a>
 8007b4e:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <__swbuf_r+0xa0>)
 8007b50:	429c      	cmp	r4, r3
 8007b52:	bf08      	it	eq
 8007b54:	68ec      	ldreq	r4, [r5, #12]
 8007b56:	e7ca      	b.n	8007aee <__swbuf_r+0x1a>
 8007b58:	4621      	mov	r1, r4
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f000 f81a 	bl	8007b94 <__swsetup_r>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d0cb      	beq.n	8007afc <__swbuf_r+0x28>
 8007b64:	f04f 37ff 	mov.w	r7, #4294967295
 8007b68:	e7ea      	b.n	8007b40 <__swbuf_r+0x6c>
 8007b6a:	bf00      	nop
 8007b6c:	0800866c 	.word	0x0800866c
 8007b70:	0800868c 	.word	0x0800868c
 8007b74:	0800864c 	.word	0x0800864c

08007b78 <__ascii_wctomb>:
 8007b78:	b149      	cbz	r1, 8007b8e <__ascii_wctomb+0x16>
 8007b7a:	2aff      	cmp	r2, #255	; 0xff
 8007b7c:	bf85      	ittet	hi
 8007b7e:	238a      	movhi	r3, #138	; 0x8a
 8007b80:	6003      	strhi	r3, [r0, #0]
 8007b82:	700a      	strbls	r2, [r1, #0]
 8007b84:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b88:	bf98      	it	ls
 8007b8a:	2001      	movls	r0, #1
 8007b8c:	4770      	bx	lr
 8007b8e:	4608      	mov	r0, r1
 8007b90:	4770      	bx	lr
	...

08007b94 <__swsetup_r>:
 8007b94:	4b32      	ldr	r3, [pc, #200]	; (8007c60 <__swsetup_r+0xcc>)
 8007b96:	b570      	push	{r4, r5, r6, lr}
 8007b98:	681d      	ldr	r5, [r3, #0]
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	b125      	cbz	r5, 8007baa <__swsetup_r+0x16>
 8007ba0:	69ab      	ldr	r3, [r5, #24]
 8007ba2:	b913      	cbnz	r3, 8007baa <__swsetup_r+0x16>
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f000 f985 	bl	8007eb4 <__sinit>
 8007baa:	4b2e      	ldr	r3, [pc, #184]	; (8007c64 <__swsetup_r+0xd0>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	d10f      	bne.n	8007bd0 <__swsetup_r+0x3c>
 8007bb0:	686c      	ldr	r4, [r5, #4]
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bb8:	0719      	lsls	r1, r3, #28
 8007bba:	d42c      	bmi.n	8007c16 <__swsetup_r+0x82>
 8007bbc:	06dd      	lsls	r5, r3, #27
 8007bbe:	d411      	bmi.n	8007be4 <__swsetup_r+0x50>
 8007bc0:	2309      	movs	r3, #9
 8007bc2:	6033      	str	r3, [r6, #0]
 8007bc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bc8:	81a3      	strh	r3, [r4, #12]
 8007bca:	f04f 30ff 	mov.w	r0, #4294967295
 8007bce:	e03e      	b.n	8007c4e <__swsetup_r+0xba>
 8007bd0:	4b25      	ldr	r3, [pc, #148]	; (8007c68 <__swsetup_r+0xd4>)
 8007bd2:	429c      	cmp	r4, r3
 8007bd4:	d101      	bne.n	8007bda <__swsetup_r+0x46>
 8007bd6:	68ac      	ldr	r4, [r5, #8]
 8007bd8:	e7eb      	b.n	8007bb2 <__swsetup_r+0x1e>
 8007bda:	4b24      	ldr	r3, [pc, #144]	; (8007c6c <__swsetup_r+0xd8>)
 8007bdc:	429c      	cmp	r4, r3
 8007bde:	bf08      	it	eq
 8007be0:	68ec      	ldreq	r4, [r5, #12]
 8007be2:	e7e6      	b.n	8007bb2 <__swsetup_r+0x1e>
 8007be4:	0758      	lsls	r0, r3, #29
 8007be6:	d512      	bpl.n	8007c0e <__swsetup_r+0x7a>
 8007be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bea:	b141      	cbz	r1, 8007bfe <__swsetup_r+0x6a>
 8007bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	d002      	beq.n	8007bfa <__swsetup_r+0x66>
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f7ff fcd5 	bl	80075a4 <_free_r>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	2300      	movs	r3, #0
 8007c08:	6063      	str	r3, [r4, #4]
 8007c0a:	6923      	ldr	r3, [r4, #16]
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	f043 0308 	orr.w	r3, r3, #8
 8007c14:	81a3      	strh	r3, [r4, #12]
 8007c16:	6923      	ldr	r3, [r4, #16]
 8007c18:	b94b      	cbnz	r3, 8007c2e <__swsetup_r+0x9a>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c24:	d003      	beq.n	8007c2e <__swsetup_r+0x9a>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f000 fa09 	bl	8008040 <__smakebuf_r>
 8007c2e:	89a0      	ldrh	r0, [r4, #12]
 8007c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c34:	f010 0301 	ands.w	r3, r0, #1
 8007c38:	d00a      	beq.n	8007c50 <__swsetup_r+0xbc>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60a3      	str	r3, [r4, #8]
 8007c3e:	6963      	ldr	r3, [r4, #20]
 8007c40:	425b      	negs	r3, r3
 8007c42:	61a3      	str	r3, [r4, #24]
 8007c44:	6923      	ldr	r3, [r4, #16]
 8007c46:	b943      	cbnz	r3, 8007c5a <__swsetup_r+0xc6>
 8007c48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c4c:	d1ba      	bne.n	8007bc4 <__swsetup_r+0x30>
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	0781      	lsls	r1, r0, #30
 8007c52:	bf58      	it	pl
 8007c54:	6963      	ldrpl	r3, [r4, #20]
 8007c56:	60a3      	str	r3, [r4, #8]
 8007c58:	e7f4      	b.n	8007c44 <__swsetup_r+0xb0>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e7f7      	b.n	8007c4e <__swsetup_r+0xba>
 8007c5e:	bf00      	nop
 8007c60:	2000000c 	.word	0x2000000c
 8007c64:	0800866c 	.word	0x0800866c
 8007c68:	0800868c 	.word	0x0800868c
 8007c6c:	0800864c 	.word	0x0800864c

08007c70 <abort>:
 8007c70:	b508      	push	{r3, lr}
 8007c72:	2006      	movs	r0, #6
 8007c74:	f000 fa4c 	bl	8008110 <raise>
 8007c78:	2001      	movs	r0, #1
 8007c7a:	f7f9 fc51 	bl	8001520 <_exit>
	...

08007c80 <__sflush_r>:
 8007c80:	898a      	ldrh	r2, [r1, #12]
 8007c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c86:	4605      	mov	r5, r0
 8007c88:	0710      	lsls	r0, r2, #28
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	d458      	bmi.n	8007d40 <__sflush_r+0xc0>
 8007c8e:	684b      	ldr	r3, [r1, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	dc05      	bgt.n	8007ca0 <__sflush_r+0x20>
 8007c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	dc02      	bgt.n	8007ca0 <__sflush_r+0x20>
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ca2:	2e00      	cmp	r6, #0
 8007ca4:	d0f9      	beq.n	8007c9a <__sflush_r+0x1a>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cac:	682f      	ldr	r7, [r5, #0]
 8007cae:	602b      	str	r3, [r5, #0]
 8007cb0:	d032      	beq.n	8007d18 <__sflush_r+0x98>
 8007cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	075a      	lsls	r2, r3, #29
 8007cb8:	d505      	bpl.n	8007cc6 <__sflush_r+0x46>
 8007cba:	6863      	ldr	r3, [r4, #4]
 8007cbc:	1ac0      	subs	r0, r0, r3
 8007cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cc0:	b10b      	cbz	r3, 8007cc6 <__sflush_r+0x46>
 8007cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cc4:	1ac0      	subs	r0, r0, r3
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	4602      	mov	r2, r0
 8007cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ccc:	6a21      	ldr	r1, [r4, #32]
 8007cce:	4628      	mov	r0, r5
 8007cd0:	47b0      	blx	r6
 8007cd2:	1c43      	adds	r3, r0, #1
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	d106      	bne.n	8007ce6 <__sflush_r+0x66>
 8007cd8:	6829      	ldr	r1, [r5, #0]
 8007cda:	291d      	cmp	r1, #29
 8007cdc:	d82c      	bhi.n	8007d38 <__sflush_r+0xb8>
 8007cde:	4a2a      	ldr	r2, [pc, #168]	; (8007d88 <__sflush_r+0x108>)
 8007ce0:	40ca      	lsrs	r2, r1
 8007ce2:	07d6      	lsls	r6, r2, #31
 8007ce4:	d528      	bpl.n	8007d38 <__sflush_r+0xb8>
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	6062      	str	r2, [r4, #4]
 8007cea:	04d9      	lsls	r1, r3, #19
 8007cec:	6922      	ldr	r2, [r4, #16]
 8007cee:	6022      	str	r2, [r4, #0]
 8007cf0:	d504      	bpl.n	8007cfc <__sflush_r+0x7c>
 8007cf2:	1c42      	adds	r2, r0, #1
 8007cf4:	d101      	bne.n	8007cfa <__sflush_r+0x7a>
 8007cf6:	682b      	ldr	r3, [r5, #0]
 8007cf8:	b903      	cbnz	r3, 8007cfc <__sflush_r+0x7c>
 8007cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8007cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cfe:	602f      	str	r7, [r5, #0]
 8007d00:	2900      	cmp	r1, #0
 8007d02:	d0ca      	beq.n	8007c9a <__sflush_r+0x1a>
 8007d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d08:	4299      	cmp	r1, r3
 8007d0a:	d002      	beq.n	8007d12 <__sflush_r+0x92>
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	f7ff fc49 	bl	80075a4 <_free_r>
 8007d12:	2000      	movs	r0, #0
 8007d14:	6360      	str	r0, [r4, #52]	; 0x34
 8007d16:	e7c1      	b.n	8007c9c <__sflush_r+0x1c>
 8007d18:	6a21      	ldr	r1, [r4, #32]
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	47b0      	blx	r6
 8007d20:	1c41      	adds	r1, r0, #1
 8007d22:	d1c7      	bne.n	8007cb4 <__sflush_r+0x34>
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0c4      	beq.n	8007cb4 <__sflush_r+0x34>
 8007d2a:	2b1d      	cmp	r3, #29
 8007d2c:	d001      	beq.n	8007d32 <__sflush_r+0xb2>
 8007d2e:	2b16      	cmp	r3, #22
 8007d30:	d101      	bne.n	8007d36 <__sflush_r+0xb6>
 8007d32:	602f      	str	r7, [r5, #0]
 8007d34:	e7b1      	b.n	8007c9a <__sflush_r+0x1a>
 8007d36:	89a3      	ldrh	r3, [r4, #12]
 8007d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d3c:	81a3      	strh	r3, [r4, #12]
 8007d3e:	e7ad      	b.n	8007c9c <__sflush_r+0x1c>
 8007d40:	690f      	ldr	r7, [r1, #16]
 8007d42:	2f00      	cmp	r7, #0
 8007d44:	d0a9      	beq.n	8007c9a <__sflush_r+0x1a>
 8007d46:	0793      	lsls	r3, r2, #30
 8007d48:	680e      	ldr	r6, [r1, #0]
 8007d4a:	bf08      	it	eq
 8007d4c:	694b      	ldreq	r3, [r1, #20]
 8007d4e:	600f      	str	r7, [r1, #0]
 8007d50:	bf18      	it	ne
 8007d52:	2300      	movne	r3, #0
 8007d54:	eba6 0807 	sub.w	r8, r6, r7
 8007d58:	608b      	str	r3, [r1, #8]
 8007d5a:	f1b8 0f00 	cmp.w	r8, #0
 8007d5e:	dd9c      	ble.n	8007c9a <__sflush_r+0x1a>
 8007d60:	6a21      	ldr	r1, [r4, #32]
 8007d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d64:	4643      	mov	r3, r8
 8007d66:	463a      	mov	r2, r7
 8007d68:	4628      	mov	r0, r5
 8007d6a:	47b0      	blx	r6
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	dc06      	bgt.n	8007d7e <__sflush_r+0xfe>
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d76:	81a3      	strh	r3, [r4, #12]
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	e78e      	b.n	8007c9c <__sflush_r+0x1c>
 8007d7e:	4407      	add	r7, r0
 8007d80:	eba8 0800 	sub.w	r8, r8, r0
 8007d84:	e7e9      	b.n	8007d5a <__sflush_r+0xda>
 8007d86:	bf00      	nop
 8007d88:	20400001 	.word	0x20400001

08007d8c <_fflush_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	690b      	ldr	r3, [r1, #16]
 8007d90:	4605      	mov	r5, r0
 8007d92:	460c      	mov	r4, r1
 8007d94:	b913      	cbnz	r3, 8007d9c <_fflush_r+0x10>
 8007d96:	2500      	movs	r5, #0
 8007d98:	4628      	mov	r0, r5
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	b118      	cbz	r0, 8007da6 <_fflush_r+0x1a>
 8007d9e:	6983      	ldr	r3, [r0, #24]
 8007da0:	b90b      	cbnz	r3, 8007da6 <_fflush_r+0x1a>
 8007da2:	f000 f887 	bl	8007eb4 <__sinit>
 8007da6:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <_fflush_r+0x6c>)
 8007da8:	429c      	cmp	r4, r3
 8007daa:	d11b      	bne.n	8007de4 <_fflush_r+0x58>
 8007dac:	686c      	ldr	r4, [r5, #4]
 8007dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d0ef      	beq.n	8007d96 <_fflush_r+0xa>
 8007db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007db8:	07d0      	lsls	r0, r2, #31
 8007dba:	d404      	bmi.n	8007dc6 <_fflush_r+0x3a>
 8007dbc:	0599      	lsls	r1, r3, #22
 8007dbe:	d402      	bmi.n	8007dc6 <_fflush_r+0x3a>
 8007dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dc2:	f000 f915 	bl	8007ff0 <__retarget_lock_acquire_recursive>
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	4621      	mov	r1, r4
 8007dca:	f7ff ff59 	bl	8007c80 <__sflush_r>
 8007dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dd0:	07da      	lsls	r2, r3, #31
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	d4e0      	bmi.n	8007d98 <_fflush_r+0xc>
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	059b      	lsls	r3, r3, #22
 8007dda:	d4dd      	bmi.n	8007d98 <_fflush_r+0xc>
 8007ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dde:	f000 f908 	bl	8007ff2 <__retarget_lock_release_recursive>
 8007de2:	e7d9      	b.n	8007d98 <_fflush_r+0xc>
 8007de4:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <_fflush_r+0x70>)
 8007de6:	429c      	cmp	r4, r3
 8007de8:	d101      	bne.n	8007dee <_fflush_r+0x62>
 8007dea:	68ac      	ldr	r4, [r5, #8]
 8007dec:	e7df      	b.n	8007dae <_fflush_r+0x22>
 8007dee:	4b04      	ldr	r3, [pc, #16]	; (8007e00 <_fflush_r+0x74>)
 8007df0:	429c      	cmp	r4, r3
 8007df2:	bf08      	it	eq
 8007df4:	68ec      	ldreq	r4, [r5, #12]
 8007df6:	e7da      	b.n	8007dae <_fflush_r+0x22>
 8007df8:	0800866c 	.word	0x0800866c
 8007dfc:	0800868c 	.word	0x0800868c
 8007e00:	0800864c 	.word	0x0800864c

08007e04 <std>:
 8007e04:	2300      	movs	r3, #0
 8007e06:	b510      	push	{r4, lr}
 8007e08:	4604      	mov	r4, r0
 8007e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e12:	6083      	str	r3, [r0, #8]
 8007e14:	8181      	strh	r1, [r0, #12]
 8007e16:	6643      	str	r3, [r0, #100]	; 0x64
 8007e18:	81c2      	strh	r2, [r0, #14]
 8007e1a:	6183      	str	r3, [r0, #24]
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	2208      	movs	r2, #8
 8007e20:	305c      	adds	r0, #92	; 0x5c
 8007e22:	f7fd fd1d 	bl	8005860 <memset>
 8007e26:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <std+0x38>)
 8007e28:	6263      	str	r3, [r4, #36]	; 0x24
 8007e2a:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <std+0x3c>)
 8007e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e2e:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <std+0x40>)
 8007e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e32:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <std+0x44>)
 8007e34:	6224      	str	r4, [r4, #32]
 8007e36:	6323      	str	r3, [r4, #48]	; 0x30
 8007e38:	bd10      	pop	{r4, pc}
 8007e3a:	bf00      	nop
 8007e3c:	08008149 	.word	0x08008149
 8007e40:	0800816b 	.word	0x0800816b
 8007e44:	080081a3 	.word	0x080081a3
 8007e48:	080081c7 	.word	0x080081c7

08007e4c <_cleanup_r>:
 8007e4c:	4901      	ldr	r1, [pc, #4]	; (8007e54 <_cleanup_r+0x8>)
 8007e4e:	f000 b8af 	b.w	8007fb0 <_fwalk_reent>
 8007e52:	bf00      	nop
 8007e54:	08007d8d 	.word	0x08007d8d

08007e58 <__sfmoreglue>:
 8007e58:	b570      	push	{r4, r5, r6, lr}
 8007e5a:	2268      	movs	r2, #104	; 0x68
 8007e5c:	1e4d      	subs	r5, r1, #1
 8007e5e:	4355      	muls	r5, r2
 8007e60:	460e      	mov	r6, r1
 8007e62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e66:	f7ff fc09 	bl	800767c <_malloc_r>
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	b140      	cbz	r0, 8007e80 <__sfmoreglue+0x28>
 8007e6e:	2100      	movs	r1, #0
 8007e70:	e9c0 1600 	strd	r1, r6, [r0]
 8007e74:	300c      	adds	r0, #12
 8007e76:	60a0      	str	r0, [r4, #8]
 8007e78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e7c:	f7fd fcf0 	bl	8005860 <memset>
 8007e80:	4620      	mov	r0, r4
 8007e82:	bd70      	pop	{r4, r5, r6, pc}

08007e84 <__sfp_lock_acquire>:
 8007e84:	4801      	ldr	r0, [pc, #4]	; (8007e8c <__sfp_lock_acquire+0x8>)
 8007e86:	f000 b8b3 	b.w	8007ff0 <__retarget_lock_acquire_recursive>
 8007e8a:	bf00      	nop
 8007e8c:	200002c5 	.word	0x200002c5

08007e90 <__sfp_lock_release>:
 8007e90:	4801      	ldr	r0, [pc, #4]	; (8007e98 <__sfp_lock_release+0x8>)
 8007e92:	f000 b8ae 	b.w	8007ff2 <__retarget_lock_release_recursive>
 8007e96:	bf00      	nop
 8007e98:	200002c5 	.word	0x200002c5

08007e9c <__sinit_lock_acquire>:
 8007e9c:	4801      	ldr	r0, [pc, #4]	; (8007ea4 <__sinit_lock_acquire+0x8>)
 8007e9e:	f000 b8a7 	b.w	8007ff0 <__retarget_lock_acquire_recursive>
 8007ea2:	bf00      	nop
 8007ea4:	200002c6 	.word	0x200002c6

08007ea8 <__sinit_lock_release>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	; (8007eb0 <__sinit_lock_release+0x8>)
 8007eaa:	f000 b8a2 	b.w	8007ff2 <__retarget_lock_release_recursive>
 8007eae:	bf00      	nop
 8007eb0:	200002c6 	.word	0x200002c6

08007eb4 <__sinit>:
 8007eb4:	b510      	push	{r4, lr}
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	f7ff fff0 	bl	8007e9c <__sinit_lock_acquire>
 8007ebc:	69a3      	ldr	r3, [r4, #24]
 8007ebe:	b11b      	cbz	r3, 8007ec8 <__sinit+0x14>
 8007ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ec4:	f7ff bff0 	b.w	8007ea8 <__sinit_lock_release>
 8007ec8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ecc:	6523      	str	r3, [r4, #80]	; 0x50
 8007ece:	4b13      	ldr	r3, [pc, #76]	; (8007f1c <__sinit+0x68>)
 8007ed0:	4a13      	ldr	r2, [pc, #76]	; (8007f20 <__sinit+0x6c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ed6:	42a3      	cmp	r3, r4
 8007ed8:	bf04      	itt	eq
 8007eda:	2301      	moveq	r3, #1
 8007edc:	61a3      	streq	r3, [r4, #24]
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 f820 	bl	8007f24 <__sfp>
 8007ee4:	6060      	str	r0, [r4, #4]
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 f81c 	bl	8007f24 <__sfp>
 8007eec:	60a0      	str	r0, [r4, #8]
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f000 f818 	bl	8007f24 <__sfp>
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	60e0      	str	r0, [r4, #12]
 8007ef8:	2104      	movs	r1, #4
 8007efa:	6860      	ldr	r0, [r4, #4]
 8007efc:	f7ff ff82 	bl	8007e04 <std>
 8007f00:	68a0      	ldr	r0, [r4, #8]
 8007f02:	2201      	movs	r2, #1
 8007f04:	2109      	movs	r1, #9
 8007f06:	f7ff ff7d 	bl	8007e04 <std>
 8007f0a:	68e0      	ldr	r0, [r4, #12]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	2112      	movs	r1, #18
 8007f10:	f7ff ff78 	bl	8007e04 <std>
 8007f14:	2301      	movs	r3, #1
 8007f16:	61a3      	str	r3, [r4, #24]
 8007f18:	e7d2      	b.n	8007ec0 <__sinit+0xc>
 8007f1a:	bf00      	nop
 8007f1c:	080082d0 	.word	0x080082d0
 8007f20:	08007e4d 	.word	0x08007e4d

08007f24 <__sfp>:
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	4607      	mov	r7, r0
 8007f28:	f7ff ffac 	bl	8007e84 <__sfp_lock_acquire>
 8007f2c:	4b1e      	ldr	r3, [pc, #120]	; (8007fa8 <__sfp+0x84>)
 8007f2e:	681e      	ldr	r6, [r3, #0]
 8007f30:	69b3      	ldr	r3, [r6, #24]
 8007f32:	b913      	cbnz	r3, 8007f3a <__sfp+0x16>
 8007f34:	4630      	mov	r0, r6
 8007f36:	f7ff ffbd 	bl	8007eb4 <__sinit>
 8007f3a:	3648      	adds	r6, #72	; 0x48
 8007f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	d503      	bpl.n	8007f4c <__sfp+0x28>
 8007f44:	6833      	ldr	r3, [r6, #0]
 8007f46:	b30b      	cbz	r3, 8007f8c <__sfp+0x68>
 8007f48:	6836      	ldr	r6, [r6, #0]
 8007f4a:	e7f7      	b.n	8007f3c <__sfp+0x18>
 8007f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f50:	b9d5      	cbnz	r5, 8007f88 <__sfp+0x64>
 8007f52:	4b16      	ldr	r3, [pc, #88]	; (8007fac <__sfp+0x88>)
 8007f54:	60e3      	str	r3, [r4, #12]
 8007f56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f5a:	6665      	str	r5, [r4, #100]	; 0x64
 8007f5c:	f000 f847 	bl	8007fee <__retarget_lock_init_recursive>
 8007f60:	f7ff ff96 	bl	8007e90 <__sfp_lock_release>
 8007f64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f6c:	6025      	str	r5, [r4, #0]
 8007f6e:	61a5      	str	r5, [r4, #24]
 8007f70:	2208      	movs	r2, #8
 8007f72:	4629      	mov	r1, r5
 8007f74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f78:	f7fd fc72 	bl	8005860 <memset>
 8007f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f84:	4620      	mov	r0, r4
 8007f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f88:	3468      	adds	r4, #104	; 0x68
 8007f8a:	e7d9      	b.n	8007f40 <__sfp+0x1c>
 8007f8c:	2104      	movs	r1, #4
 8007f8e:	4638      	mov	r0, r7
 8007f90:	f7ff ff62 	bl	8007e58 <__sfmoreglue>
 8007f94:	4604      	mov	r4, r0
 8007f96:	6030      	str	r0, [r6, #0]
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d1d5      	bne.n	8007f48 <__sfp+0x24>
 8007f9c:	f7ff ff78 	bl	8007e90 <__sfp_lock_release>
 8007fa0:	230c      	movs	r3, #12
 8007fa2:	603b      	str	r3, [r7, #0]
 8007fa4:	e7ee      	b.n	8007f84 <__sfp+0x60>
 8007fa6:	bf00      	nop
 8007fa8:	080082d0 	.word	0x080082d0
 8007fac:	ffff0001 	.word	0xffff0001

08007fb0 <_fwalk_reent>:
 8007fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	4688      	mov	r8, r1
 8007fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fbc:	2700      	movs	r7, #0
 8007fbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fc2:	f1b9 0901 	subs.w	r9, r9, #1
 8007fc6:	d505      	bpl.n	8007fd4 <_fwalk_reent+0x24>
 8007fc8:	6824      	ldr	r4, [r4, #0]
 8007fca:	2c00      	cmp	r4, #0
 8007fcc:	d1f7      	bne.n	8007fbe <_fwalk_reent+0xe>
 8007fce:	4638      	mov	r0, r7
 8007fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd4:	89ab      	ldrh	r3, [r5, #12]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d907      	bls.n	8007fea <_fwalk_reent+0x3a>
 8007fda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	d003      	beq.n	8007fea <_fwalk_reent+0x3a>
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	47c0      	blx	r8
 8007fe8:	4307      	orrs	r7, r0
 8007fea:	3568      	adds	r5, #104	; 0x68
 8007fec:	e7e9      	b.n	8007fc2 <_fwalk_reent+0x12>

08007fee <__retarget_lock_init_recursive>:
 8007fee:	4770      	bx	lr

08007ff0 <__retarget_lock_acquire_recursive>:
 8007ff0:	4770      	bx	lr

08007ff2 <__retarget_lock_release_recursive>:
 8007ff2:	4770      	bx	lr

08007ff4 <__swhatbuf_r>:
 8007ff4:	b570      	push	{r4, r5, r6, lr}
 8007ff6:	460e      	mov	r6, r1
 8007ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ffc:	2900      	cmp	r1, #0
 8007ffe:	b096      	sub	sp, #88	; 0x58
 8008000:	4614      	mov	r4, r2
 8008002:	461d      	mov	r5, r3
 8008004:	da08      	bge.n	8008018 <__swhatbuf_r+0x24>
 8008006:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	602a      	str	r2, [r5, #0]
 800800e:	061a      	lsls	r2, r3, #24
 8008010:	d410      	bmi.n	8008034 <__swhatbuf_r+0x40>
 8008012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008016:	e00e      	b.n	8008036 <__swhatbuf_r+0x42>
 8008018:	466a      	mov	r2, sp
 800801a:	f000 f8fb 	bl	8008214 <_fstat_r>
 800801e:	2800      	cmp	r0, #0
 8008020:	dbf1      	blt.n	8008006 <__swhatbuf_r+0x12>
 8008022:	9a01      	ldr	r2, [sp, #4]
 8008024:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008028:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800802c:	425a      	negs	r2, r3
 800802e:	415a      	adcs	r2, r3
 8008030:	602a      	str	r2, [r5, #0]
 8008032:	e7ee      	b.n	8008012 <__swhatbuf_r+0x1e>
 8008034:	2340      	movs	r3, #64	; 0x40
 8008036:	2000      	movs	r0, #0
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	b016      	add	sp, #88	; 0x58
 800803c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008040 <__smakebuf_r>:
 8008040:	898b      	ldrh	r3, [r1, #12]
 8008042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008044:	079d      	lsls	r5, r3, #30
 8008046:	4606      	mov	r6, r0
 8008048:	460c      	mov	r4, r1
 800804a:	d507      	bpl.n	800805c <__smakebuf_r+0x1c>
 800804c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	6123      	str	r3, [r4, #16]
 8008054:	2301      	movs	r3, #1
 8008056:	6163      	str	r3, [r4, #20]
 8008058:	b002      	add	sp, #8
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	ab01      	add	r3, sp, #4
 800805e:	466a      	mov	r2, sp
 8008060:	f7ff ffc8 	bl	8007ff4 <__swhatbuf_r>
 8008064:	9900      	ldr	r1, [sp, #0]
 8008066:	4605      	mov	r5, r0
 8008068:	4630      	mov	r0, r6
 800806a:	f7ff fb07 	bl	800767c <_malloc_r>
 800806e:	b948      	cbnz	r0, 8008084 <__smakebuf_r+0x44>
 8008070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008074:	059a      	lsls	r2, r3, #22
 8008076:	d4ef      	bmi.n	8008058 <__smakebuf_r+0x18>
 8008078:	f023 0303 	bic.w	r3, r3, #3
 800807c:	f043 0302 	orr.w	r3, r3, #2
 8008080:	81a3      	strh	r3, [r4, #12]
 8008082:	e7e3      	b.n	800804c <__smakebuf_r+0xc>
 8008084:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <__smakebuf_r+0x7c>)
 8008086:	62b3      	str	r3, [r6, #40]	; 0x28
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	6020      	str	r0, [r4, #0]
 800808c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008090:	81a3      	strh	r3, [r4, #12]
 8008092:	9b00      	ldr	r3, [sp, #0]
 8008094:	6163      	str	r3, [r4, #20]
 8008096:	9b01      	ldr	r3, [sp, #4]
 8008098:	6120      	str	r0, [r4, #16]
 800809a:	b15b      	cbz	r3, 80080b4 <__smakebuf_r+0x74>
 800809c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080a0:	4630      	mov	r0, r6
 80080a2:	f000 f8c9 	bl	8008238 <_isatty_r>
 80080a6:	b128      	cbz	r0, 80080b4 <__smakebuf_r+0x74>
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	f023 0303 	bic.w	r3, r3, #3
 80080ae:	f043 0301 	orr.w	r3, r3, #1
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	89a0      	ldrh	r0, [r4, #12]
 80080b6:	4305      	orrs	r5, r0
 80080b8:	81a5      	strh	r5, [r4, #12]
 80080ba:	e7cd      	b.n	8008058 <__smakebuf_r+0x18>
 80080bc:	08007e4d 	.word	0x08007e4d

080080c0 <_raise_r>:
 80080c0:	291f      	cmp	r1, #31
 80080c2:	b538      	push	{r3, r4, r5, lr}
 80080c4:	4604      	mov	r4, r0
 80080c6:	460d      	mov	r5, r1
 80080c8:	d904      	bls.n	80080d4 <_raise_r+0x14>
 80080ca:	2316      	movs	r3, #22
 80080cc:	6003      	str	r3, [r0, #0]
 80080ce:	f04f 30ff 	mov.w	r0, #4294967295
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080d6:	b112      	cbz	r2, 80080de <_raise_r+0x1e>
 80080d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080dc:	b94b      	cbnz	r3, 80080f2 <_raise_r+0x32>
 80080de:	4620      	mov	r0, r4
 80080e0:	f000 f830 	bl	8008144 <_getpid_r>
 80080e4:	462a      	mov	r2, r5
 80080e6:	4601      	mov	r1, r0
 80080e8:	4620      	mov	r0, r4
 80080ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080ee:	f000 b817 	b.w	8008120 <_kill_r>
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d00a      	beq.n	800810c <_raise_r+0x4c>
 80080f6:	1c59      	adds	r1, r3, #1
 80080f8:	d103      	bne.n	8008102 <_raise_r+0x42>
 80080fa:	2316      	movs	r3, #22
 80080fc:	6003      	str	r3, [r0, #0]
 80080fe:	2001      	movs	r0, #1
 8008100:	e7e7      	b.n	80080d2 <_raise_r+0x12>
 8008102:	2400      	movs	r4, #0
 8008104:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008108:	4628      	mov	r0, r5
 800810a:	4798      	blx	r3
 800810c:	2000      	movs	r0, #0
 800810e:	e7e0      	b.n	80080d2 <_raise_r+0x12>

08008110 <raise>:
 8008110:	4b02      	ldr	r3, [pc, #8]	; (800811c <raise+0xc>)
 8008112:	4601      	mov	r1, r0
 8008114:	6818      	ldr	r0, [r3, #0]
 8008116:	f7ff bfd3 	b.w	80080c0 <_raise_r>
 800811a:	bf00      	nop
 800811c:	2000000c 	.word	0x2000000c

08008120 <_kill_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d07      	ldr	r5, [pc, #28]	; (8008140 <_kill_r+0x20>)
 8008124:	2300      	movs	r3, #0
 8008126:	4604      	mov	r4, r0
 8008128:	4608      	mov	r0, r1
 800812a:	4611      	mov	r1, r2
 800812c:	602b      	str	r3, [r5, #0]
 800812e:	f7f9 f9e7 	bl	8001500 <_kill>
 8008132:	1c43      	adds	r3, r0, #1
 8008134:	d102      	bne.n	800813c <_kill_r+0x1c>
 8008136:	682b      	ldr	r3, [r5, #0]
 8008138:	b103      	cbz	r3, 800813c <_kill_r+0x1c>
 800813a:	6023      	str	r3, [r4, #0]
 800813c:	bd38      	pop	{r3, r4, r5, pc}
 800813e:	bf00      	nop
 8008140:	200002c0 	.word	0x200002c0

08008144 <_getpid_r>:
 8008144:	f7f9 b9d4 	b.w	80014f0 <_getpid>

08008148 <__sread>:
 8008148:	b510      	push	{r4, lr}
 800814a:	460c      	mov	r4, r1
 800814c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008150:	f000 f894 	bl	800827c <_read_r>
 8008154:	2800      	cmp	r0, #0
 8008156:	bfab      	itete	ge
 8008158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800815a:	89a3      	ldrhlt	r3, [r4, #12]
 800815c:	181b      	addge	r3, r3, r0
 800815e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008162:	bfac      	ite	ge
 8008164:	6563      	strge	r3, [r4, #84]	; 0x54
 8008166:	81a3      	strhlt	r3, [r4, #12]
 8008168:	bd10      	pop	{r4, pc}

0800816a <__swrite>:
 800816a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800816e:	461f      	mov	r7, r3
 8008170:	898b      	ldrh	r3, [r1, #12]
 8008172:	05db      	lsls	r3, r3, #23
 8008174:	4605      	mov	r5, r0
 8008176:	460c      	mov	r4, r1
 8008178:	4616      	mov	r6, r2
 800817a:	d505      	bpl.n	8008188 <__swrite+0x1e>
 800817c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008180:	2302      	movs	r3, #2
 8008182:	2200      	movs	r2, #0
 8008184:	f000 f868 	bl	8008258 <_lseek_r>
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800818e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008192:	81a3      	strh	r3, [r4, #12]
 8008194:	4632      	mov	r2, r6
 8008196:	463b      	mov	r3, r7
 8008198:	4628      	mov	r0, r5
 800819a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800819e:	f000 b817 	b.w	80081d0 <_write_r>

080081a2 <__sseek>:
 80081a2:	b510      	push	{r4, lr}
 80081a4:	460c      	mov	r4, r1
 80081a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081aa:	f000 f855 	bl	8008258 <_lseek_r>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	89a3      	ldrh	r3, [r4, #12]
 80081b2:	bf15      	itete	ne
 80081b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80081b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081be:	81a3      	strheq	r3, [r4, #12]
 80081c0:	bf18      	it	ne
 80081c2:	81a3      	strhne	r3, [r4, #12]
 80081c4:	bd10      	pop	{r4, pc}

080081c6 <__sclose>:
 80081c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ca:	f000 b813 	b.w	80081f4 <_close_r>
	...

080081d0 <_write_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4d07      	ldr	r5, [pc, #28]	; (80081f0 <_write_r+0x20>)
 80081d4:	4604      	mov	r4, r0
 80081d6:	4608      	mov	r0, r1
 80081d8:	4611      	mov	r1, r2
 80081da:	2200      	movs	r2, #0
 80081dc:	602a      	str	r2, [r5, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	f7f9 f9c5 	bl	800156e <_write>
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	d102      	bne.n	80081ee <_write_r+0x1e>
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	b103      	cbz	r3, 80081ee <_write_r+0x1e>
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	200002c0 	.word	0x200002c0

080081f4 <_close_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4d06      	ldr	r5, [pc, #24]	; (8008210 <_close_r+0x1c>)
 80081f8:	2300      	movs	r3, #0
 80081fa:	4604      	mov	r4, r0
 80081fc:	4608      	mov	r0, r1
 80081fe:	602b      	str	r3, [r5, #0]
 8008200:	f7f9 f9d1 	bl	80015a6 <_close>
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	d102      	bne.n	800820e <_close_r+0x1a>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	b103      	cbz	r3, 800820e <_close_r+0x1a>
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	bd38      	pop	{r3, r4, r5, pc}
 8008210:	200002c0 	.word	0x200002c0

08008214 <_fstat_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4d07      	ldr	r5, [pc, #28]	; (8008234 <_fstat_r+0x20>)
 8008218:	2300      	movs	r3, #0
 800821a:	4604      	mov	r4, r0
 800821c:	4608      	mov	r0, r1
 800821e:	4611      	mov	r1, r2
 8008220:	602b      	str	r3, [r5, #0]
 8008222:	f7f9 f9cc 	bl	80015be <_fstat>
 8008226:	1c43      	adds	r3, r0, #1
 8008228:	d102      	bne.n	8008230 <_fstat_r+0x1c>
 800822a:	682b      	ldr	r3, [r5, #0]
 800822c:	b103      	cbz	r3, 8008230 <_fstat_r+0x1c>
 800822e:	6023      	str	r3, [r4, #0]
 8008230:	bd38      	pop	{r3, r4, r5, pc}
 8008232:	bf00      	nop
 8008234:	200002c0 	.word	0x200002c0

08008238 <_isatty_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	4d06      	ldr	r5, [pc, #24]	; (8008254 <_isatty_r+0x1c>)
 800823c:	2300      	movs	r3, #0
 800823e:	4604      	mov	r4, r0
 8008240:	4608      	mov	r0, r1
 8008242:	602b      	str	r3, [r5, #0]
 8008244:	f7f9 f9cb 	bl	80015de <_isatty>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d102      	bne.n	8008252 <_isatty_r+0x1a>
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	b103      	cbz	r3, 8008252 <_isatty_r+0x1a>
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	bd38      	pop	{r3, r4, r5, pc}
 8008254:	200002c0 	.word	0x200002c0

08008258 <_lseek_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4d07      	ldr	r5, [pc, #28]	; (8008278 <_lseek_r+0x20>)
 800825c:	4604      	mov	r4, r0
 800825e:	4608      	mov	r0, r1
 8008260:	4611      	mov	r1, r2
 8008262:	2200      	movs	r2, #0
 8008264:	602a      	str	r2, [r5, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	f7f9 f9c4 	bl	80015f4 <_lseek>
 800826c:	1c43      	adds	r3, r0, #1
 800826e:	d102      	bne.n	8008276 <_lseek_r+0x1e>
 8008270:	682b      	ldr	r3, [r5, #0]
 8008272:	b103      	cbz	r3, 8008276 <_lseek_r+0x1e>
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	bd38      	pop	{r3, r4, r5, pc}
 8008278:	200002c0 	.word	0x200002c0

0800827c <_read_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4d07      	ldr	r5, [pc, #28]	; (800829c <_read_r+0x20>)
 8008280:	4604      	mov	r4, r0
 8008282:	4608      	mov	r0, r1
 8008284:	4611      	mov	r1, r2
 8008286:	2200      	movs	r2, #0
 8008288:	602a      	str	r2, [r5, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	f7f9 f952 	bl	8001534 <_read>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d102      	bne.n	800829a <_read_r+0x1e>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b103      	cbz	r3, 800829a <_read_r+0x1e>
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	200002c0 	.word	0x200002c0

080082a0 <_init>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	bf00      	nop
 80082a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a6:	bc08      	pop	{r3}
 80082a8:	469e      	mov	lr, r3
 80082aa:	4770      	bx	lr

080082ac <_fini>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	bf00      	nop
 80082b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b2:	bc08      	pop	{r3}
 80082b4:	469e      	mov	lr, r3
 80082b6:	4770      	bx	lr
